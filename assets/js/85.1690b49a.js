(window.webpackJsonp=window.webpackJsonp||[]).push([[85],{219:function(t,e,r){"use strict";r.r(e);var s=r(0),_=Object(s.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),r("p",[t._v("相对与上一个版本的计算机网路面试知识总结，这个版本增加了 “TCP协议如何保证可靠传输”包括超时重传、停止等待协议、滑动窗口、流量控制、拥塞控制等内容并且对一些已有内容做了补充。")]),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("学习计算机网络时我们一般采用折中的办法，也就是中和 OSI 和 TCP/IP 的优点，采用一种只有五层协议的体系结构，这样既简洁又能将概念阐述清楚。")]),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("结合互联网的情况，自上而下地，非常简要的介绍一下各层的作用。")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),r("p",[t._v("这里强调指出，网络层中的“网络”二字已经不是我们通常谈到的具体网络，而是指计算机网络体系结构模型中第三层的名称.")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),r("p",[t._v("在接收数据时，控制信息使接收端能够知道一个帧从哪个比特开始和到哪个比特结束。这样，数据链路层在收到一个帧后，就可从中提出数据部分，上交给网络层。\n控制信息还使接收端能够检测到所收到的帧中有误差错。如果发现差错，数据链路层就简单地丢弃这个出了差错的帧，以避免继续在网络中传送下去白白浪费网络资源。如果需要改正数据在链路层传输时出现差错（这就是说，数据链路层不仅要检错，而且还要纠错），那么就要采用可靠性传输协议来纠正出现的差错。这种方法会使链路层的协议复杂些。")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),r("p",[t._v("在互联网使用的各种协中最重要和最著名的就是 TCP/IP 两个协议。现在人们经常提到的TCP/IP并不一定单指TCP和IP这两个具体的协议，而往往表示互联网所使用的整个TCP/IP协议族。")]),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),r("p",[t._v("为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。")]),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),r("p",[t._v("第一次握手：Client 什么都不能确认；Server 确认了对方发送正常")]),t._v(" "),r("p",[t._v("第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己接收正常，对方发送正常")]),t._v(" "),r("p",[t._v("第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送接收正常")]),t._v(" "),r("p",[t._v("所以三次握手就能确认双发收发功能都正常，缺一不可。")]),t._v(" "),t._m(35),t._v(" "),r("p",[t._v("接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。")]),t._v(" "),t._m(36),t._v(" "),t._m(37),t._v(" "),r("p",[t._v("双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方到接收方的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号来进行验证。")]),t._v(" "),t._m(38),t._v(" "),r("p",[t._v("断开一个 TCP 连接则需要“四次挥手”：")]),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),r("p",[t._v("任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。")]),t._v(" "),r("p",[t._v("举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。")]),t._v(" "),r("p",[t._v("上面讲的比较概括，推荐一篇讲的比较细致的文章："),r("a",{attrs:{href:"https://blog.csdn.net/qzcsu/article/details/72861891",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/qzcsu/article/details/72861891"),r("OutboundLink")],1)]),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),r("p",[t._v("UDP 在传送数据之前不需要先建立连接，远地主机在收到 UDP 报文后，不需要给出任何确认。虽然 UDP 不提供可靠交付，但在某些情况下 UDP 确是一种最有效的工作方式（一般用于即时通信），比如： QQ 语音、 QQ 视频 、直播等等")]),t._v(" "),r("p",[t._v("TCP 提供面向连接的服务。在传送数据之前必须先建立连接，数据传送结束后要释放连接。 TCP 不提供广播或多播服务。由于 TCP 要提供可靠的，面向连接的运输服务（TCP的可靠体现在TCP在传递数据之前，会有三次握手来建立连接，而且在数据传递时，有确认、窗口、重传、拥塞控制机制，在数据传完后，还会断开连接用来节约系统资源），这一难以避免增加了许多开销，如确认，流量控制，计时器以及连接管理等。这不仅使协议数据单元的首部增大很多，还要占用许多处理机资源。TCP 一般用于文件传输、发送和接收邮件、远程登录等场景。")]),t._v(" "),t._m(43),t._v(" "),t._m(44),t._v(" "),t._m(45),t._v(" "),t._m(46),t._v(" "),t._m(47),t._v(" "),t._m(48),t._v(" "),r("p",[t._v("发送方发送分组,接收方在规定时间内收到,并且回复确认.发送方再次发送。")]),t._v(" "),t._m(49),t._v(" "),t._m(50),t._v(" "),t._m(51),t._v(" "),t._m(52),t._v(" "),r("p",[t._v("停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为自动重传请求ARQ。")]),t._v(" "),t._m(53),t._v(" "),t._m(54),t._v(" "),t._m(55),t._v(" "),r("p",[t._v("连续 ARQ 协议可提高信道利用率。发送方维持一个发送窗口，凡位于发送窗口内的分组可以连续发送出去，而不需要等待对方确认。接收方一般采用累计确认，对按序到达的最后一个分组发送确认，表明到这个分组为止的所有分组都已经正确收到了。")]),t._v(" "),t._m(56),t._v(" "),t._m(57),t._v(" "),t._m(58),t._v(" "),t._m(59),t._v(" "),t._m(60),t._v(" "),t._m(61),t._v(" "),t._m(62),t._v(" "),r("p",[t._v("在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络的性能就要变坏。这种情况就叫拥塞。拥塞控制就是为了防止过多的数据注入到网络中，这样就可以使网络中的路由器或链路不致过载。拥塞控制所要做的都有一个前提，就是网络能够承受现有的网络负荷。拥塞控制是一个全局性的过程，涉及到所有的主机，所有的路由器，以及与降低网络传输性能有关的所有因素。相反，流量控制往往是点对点通信量的控制，是个端到端的问题。流量控制所要做到的就是抑制发送端发送数据的速率，以便使接收端来得及接收。")]),t._v(" "),t._m(63),t._v(" "),t._m(64),t._v(" "),t._m(65),t._v(" "),t._m(66),t._v(" "),r("p",[t._v("百度好像最喜欢问这个问题。")]),t._v(" "),t._m(67),t._v(" "),r("p",[t._v("图解（图片来源：《图解HTTP》）：")]),t._v(" "),t._m(68),t._v(" "),r("p",[t._v("总体来说分为以下几个过程:")]),t._v(" "),t._m(69),t._v(" "),r("p",[t._v("具体可以参考下面这篇文章：")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000006879700",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://segmentfault.com/a/1190000006879700"),r("OutboundLink")],1)])]),t._v(" "),t._m(70),t._v(" "),t._m(71),t._v(" "),t._m(72),t._v(" "),r("p",[t._v("一般面试官会通过这样的问题来考察你对计算机网络知识体系的理解。")]),t._v(" "),r("p",[t._v("图片来源：《图解HTTP》")]),t._v(" "),t._m(73),t._v(" "),t._m(74),t._v(" "),r("p",[t._v("在HTTP/1.0中默认使用短连接。也就是说，客户端和服务器每进行一次HTTP操作，就建立一次连接，任务结束就中断连接。当客户端浏览器访问的某个HTML或其他类型的Web页中包含有其他的Web资源（如JavaScript文件、图像文件、CSS文件等），每遇到这样一个Web资源，浏览器就会重新建立一个HTTP会话。")]),t._v(" "),r("p",[t._v("而从HTTP/1.1起，默认使用长连接，用以保持连接特性。使用长连接的HTTP协议，会在响应头加入这行代码：")]),t._v(" "),t._m(75),r("p",[t._v("在使用长连接的情况下，当一个网页打开完成后，客户端和服务器之间用于传输HTTP数据的TCP连接不会关闭，客户端再次访问这个服务器时，会继续使用这一条已经建立的连接。Keep-Alive不会永久保持连接，它有一个保持时间，可以在不同的服务器软件（如Apache）中设定这个时间。实现长连接需要客户端和服务端都支持长连接。")]),t._v(" "),t._m(76),t._v(" "),r("p",[t._v("—— "),r("a",{attrs:{href:"https://www.cnblogs.com/gotodsp/p/6366163.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("《HTTP长连接、短连接究竟是什么？》"),r("OutboundLink")],1)]),t._v(" "),t._m(77),t._v(" "),t._m(78),t._v(" "),t._m(79),t._v(" "),t._m(80),t._v(" "),r("p",[t._v("非常推荐大家看一下 《图解HTTP》 这本书，这本书页数不多，但是内容很是充实，不管是用来系统的掌握网络方面的一些知识还是说纯粹为了应付面试都有很大帮助。下面的一些文章只是参考。大二学习这门课程的时候，我们使用的教材是 《计算机网络第七版》（谢希仁编著），不推荐大家看这本教材，书非常厚而且知识偏理论，不确定大家能不能心平气和的读完。")]),t._v(" "),t._m(81),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://blog.csdn.net/qq_16209077/article/details/52718250",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/qq_16209077/article/details/52718250"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.csdn.net/zixiaomuwu/article/details/60965466",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/zixiaomuwu/article/details/60965466"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://blog.csdn.net/turn__back/article/details/73743641",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://blog.csdn.net/turn__back/article/details/73743641"),r("OutboundLink")],1)])])])},[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("a",{attrs:{href:"#%E4%B8%80-osi%E4%B8%8Etcpip%E5%90%84%E5%B1%82%E7%9A%84%E7%BB%93%E6%9E%84%E4%B8%8E%E5%8A%9F%E8%83%BD%E9%83%BD%E6%9C%89%E5%93%AA%E4%BA%9B%E5%8D%8F%E8%AE%AE"}},[t._v("一 OSI与TCP/IP各层的结构与功能,都有哪些协议")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%BA%94%E5%B1%82%E5%8D%8F%E8%AE%AE%E7%9A%84%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84"}},[t._v("五层协议的体系结构")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#1-%E5%BA%94%E7%94%A8%E5%B1%82"}},[t._v("1 应用层")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%9F%9F%E5%90%8D%E7%B3%BB%E7%BB%9F"}},[t._v("域名系统")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#http%E5%8D%8F%E8%AE%AE"}},[t._v("HTTP协议")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#2-%E8%BF%90%E8%BE%93%E5%B1%82"}},[t._v("2 运输层")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E8%BF%90%E8%BE%93%E5%B1%82%E4%B8%BB%E8%A6%81%E4%BD%BF%E7%94%A8%E4%BB%A5%E4%B8%8B%E4%B8%A4%E7%A7%8D%E5%8D%8F%E8%AE%AE"}},[t._v("运输层主要使用以下两种协议")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#udp-%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9"}},[t._v("UDP 的主要特点")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#tcp-%E7%9A%84%E4%B8%BB%E8%A6%81%E7%89%B9%E7%82%B9"}},[t._v("TCP 的主要特点")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#3-%E7%BD%91%E7%BB%9C%E5%B1%82"}},[t._v("3 网络层")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#4-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82"}},[t._v("4 数据链路层")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#5-%E7%89%A9%E7%90%86%E5%B1%82"}},[t._v("5 物理层")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%80%BB%E7%BB%93%E4%B8%80%E4%B8%8B"}},[t._v("总结一下")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%8C-tcp-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E9%9D%A2%E8%AF%95%E5%B8%B8%E5%AE%A2"}},[t._v("二 TCP 三次握手和四次挥手(面试常客)")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B"}},[t._v("为什么要三次握手")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BC%A0%E5%9B%9E-syn"}},[t._v("为什么要传回 SYN")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BC%A0%E4%BA%86-syn%E4%B8%BA%E5%95%A5%E8%BF%98%E8%A6%81%E4%BC%A0-ack"}},[t._v("传了 SYN,为啥还要传 ACK")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B"}},[t._v("为什么要四次挥手")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%89-tcp%E3%80%81udp-%E5%8D%8F%E8%AE%AE%E7%9A%84%E5%8C%BA%E5%88%AB"}},[t._v("三 TCP、UDP 协议的区别")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%9B%9B-tcp-%E5%8D%8F%E8%AE%AE%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%8F%AF%E9%9D%A0%E4%BC%A0%E8%BE%93"}},[t._v("四 TCP 协议如何保证可靠传输")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E5%81%9C%E6%AD%A2%E7%AD%89%E5%BE%85%E5%8D%8F%E8%AE%AE"}},[t._v("停止等待协议")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E8%87%AA%E5%8A%A8%E9%87%8D%E4%BC%A0%E8%AF%B7%E6%B1%82-arq-%E5%8D%8F%E8%AE%AE"}},[t._v("自动重传请求 ARQ 协议")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E8%BF%9E%E7%BB%ADarq%E5%8D%8F%E8%AE%AE"}},[t._v("连续ARQ协议")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3"}},[t._v("滑动窗口")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%B5%81%E9%87%8F%E6%8E%A7%E5%88%B6"}},[t._v("流量控制")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6"}},[t._v("拥塞控制")])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%94-%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5url%E5%9C%B0%E5%9D%80---%E6%98%BE%E7%A4%BA%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%BF%87%E7%A8%8B%EF%BC%88%E9%9D%A2%E8%AF%95%E5%B8%B8%E5%AE%A2%EF%BC%89"}},[t._v("五  在浏览器中输入url地址 ->> 显示主页的过程（面试常客）")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%85%AD-%E7%8A%B6%E6%80%81%E7%A0%81"}},[t._v("六 状态码")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%B8%83-%E5%90%84%E7%A7%8D%E5%8D%8F%E8%AE%AE%E4%B8%8Ehttp%E5%8D%8F%E8%AE%AE%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB"}},[t._v("七 各种协议与HTTP协议之间的关系")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%85%AB-http%E9%95%BF%E8%BF%9E%E6%8E%A5%E3%80%81%E7%9F%AD%E8%BF%9E%E6%8E%A5"}},[t._v("八  HTTP长连接、短连接")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%86%99%E5%9C%A8%E6%9C%80%E5%90%8E"}},[t._v("写在最后")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E5%9B%9E%E9%A1%BE"}},[t._v("计算机网络常见问题回顾")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E5%BB%BA%E8%AE%AE"}},[t._v("建议")])])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"一-osi与tcp-ip各层的结构与功能-都有哪些协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-osi与tcp-ip各层的结构与功能-都有哪些协议","aria-hidden":"true"}},[this._v("#")]),this._v(" 一 OSI与TCP/IP各层的结构与功能,都有哪些协议")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"五层协议的体系结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五层协议的体系结构","aria-hidden":"true"}},[this._v("#")]),this._v(" 五层协议的体系结构")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/29/164e5307471e8eba?w=633&h=344&f=png&s=164623",alt:"五层协议的体系结构"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-应用层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-应用层","aria-hidden":"true"}},[this._v("#")]),this._v(" 1 应用层")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[r("strong",[t._v("应用层(application-layer）的任务是通过应用进程间的交互来完成特定网络应用。"),r("strong",[t._v("应用层协议定义的是应用进程（进程：主机中正在运行的程序）间的通信和交互的规则。对于不同的网络应用需要不同的应用层协议。在互联网中应用层协议很多，如")]),t._v("域名系统DNS")]),t._v("，支持万维网应用的 "),r("strong",[t._v("HTTP协议")]),t._v("，支持电子邮件的 "),r("strong",[t._v("SMTP协议")]),t._v("等等。我们把应用层交互的数据单元称为报文。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"域名系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#域名系统","aria-hidden":"true"}},[this._v("#")]),this._v(" 域名系统")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("域名系统(Domain Name System缩写 DNS，Domain Name被译为域名)是因特网的一项核心服务，它作为可以将域名和IP地址相互映射的一个分布式数据库，能够使人更方便的访问互联网，而不用去记住能够被机器直接读取的IP数串。（百度百科）例如：一个公司的 Web 网站可看作是它在网上的门户，而域名就相当于其门牌地址，通常域名都使用该公司的名称或简称。例如上面提到的微软公司的域名，类似的还有：IBM 公司的域名是 www.ibm.com、Oracle 公司的域名是 www.oracle.com、Cisco公司的域名是 www.cisco.com 等。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"http协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#http协议","aria-hidden":"true"}},[this._v("#")]),this._v(" HTTP协议")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("超文本传输协议（HTTP，HyperText Transfer Protocol)是互联网上应用最为广泛的一种网络协议。所有的 WWW（万维网） 文件都必须遵守这个标准。设计 HTTP 最初的目的是为了提供一种发布和接收 HTML 页面的方法。（百度百科）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-运输层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-运输层","aria-hidden":"true"}},[this._v("#")]),this._v(" 2 运输层")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("运输层(transport layer)的主要任务就是负责向两台主机进程之间的通信提供通用的数据传输服务")]),this._v("。应用进程利用该服务传送应用层报文。“通用的”是指并不针对某一个特定的网络应用，而是多种应用可以使用同一个运输层服务。由于一台主机可同时运行多个线程，因此运输层有复用和分用的功能。所谓复用就是指多个应用层进程可同时使用下面运输层的服务，分用和复用相反，是运输层把收到的信息分别交付上面应用层中的相应进程。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"运输层主要使用以下两种协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#运输层主要使用以下两种协议","aria-hidden":"true"}},[this._v("#")]),this._v(" 运输层主要使用以下两种协议")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[r("strong",[t._v("传输控制协议 TCP")]),t._v("（Transmisson Control Protocol）--提供"),r("strong",[t._v("面向连接")]),t._v("的，"),r("strong",[t._v("可靠的")]),t._v("数据传输服务。")]),t._v(" "),r("li",[r("strong",[t._v("用户数据协议 UDP")]),t._v("（User Datagram Protocol）--提供"),r("strong",[t._v("无连接")]),t._v("的，尽最大努力的数据传输服务（"),r("strong",[t._v("不保证数据传输的可靠性")]),t._v("）。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"udp-的主要特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#udp-的主要特点","aria-hidden":"true"}},[this._v("#")]),this._v(" UDP 的主要特点")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[t._v("UDP 是无连接的；")]),t._v(" "),r("li",[t._v("UDP 使用尽最大努力交付，即不保证可靠交付，因此主机不需要维持复杂的链接状态（这里面有许多参数）；")]),t._v(" "),r("li",[t._v("UDP 是面向报文的；")]),t._v(" "),r("li",[t._v("UDP 没有拥塞控制，因此网络出现拥塞不会使源主机的发送速率降低（对实时应用很有用，如 直播，实时视频会议等）；")]),t._v(" "),r("li",[t._v("UDP 支持一对一、一对多、多对一和多对多的交互通信；")]),t._v(" "),r("li",[t._v("UDP 的首部开销小，只有8个字节，比TCP的20个字节的首部要短。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"tcp-的主要特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#tcp-的主要特点","aria-hidden":"true"}},[this._v("#")]),this._v(" TCP 的主要特点")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[t._v("TCP 是面向连接的。（就好像打电话一样，通话前需要先拨号建立连接，通话结束后要挂机释放连接）；")]),t._v(" "),r("li",[t._v("每一条 TCP 连接只能有两个端点，每一条TCP连接只能是点对点的（一对一）；")]),t._v(" "),r("li",[t._v("TCP 提供可靠交付的服务。通过TCP连接传送的数据，无差错、不丢失、不重复、并且按序到达；")]),t._v(" "),r("li",[t._v("TCP 提供全双工通信。TCP 允许通信双方的应用进程在任何时候都能发送数据。TCP 连接的两端都设有发送缓存和接收缓存，用来临时存放双方通信的数据；")]),t._v(" "),r("li",[t._v("面向字节流。TCP 中的“流”（Stream）指的是流入进程或从进程流出的字节序列。“面向字节流”的含义是：虽然应用程序和 TCP 的交互是一次一个数据块（大小不等），但 TCP 把应用程序交下来的数据仅仅看成是一连串的无结构的字节流。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-网络层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-网络层","aria-hidden":"true"}},[this._v("#")]),this._v(" 3 网络层")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[r("strong",[t._v("在 计算机网络中进行通信的两个计算机之间可能会经过很多个数据链路，也可能还要经过很多通信子网。网络层的任务就是选择合适的网间路由和交换结点， 确保数据及时传送。")]),t._v(" 在发送数据时，网络层把运输层产生的报文段或用户数据报封装成分组和包进行传送。在 TCP/IP 体系结构中，由于网络层使用 "),r("strong",[t._v("IP 协议")]),t._v("，因此分组也叫 "),r("strong",[t._v("IP 数据报")]),t._v(" ，简称 "),r("strong",[t._v("数据报")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这里要注意："),e("strong",[this._v("不要把运输层的“用户数据报 UDP ”和网络层的“ IP 数据报”弄混")]),this._v("。另外，无论是哪一层的数据单元，都可笼统地用“分组”来表示。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("互联网是由大量的异构（heterogeneous）网络通过路由器（router）相互连接起来的。互联网使用的网络层协议是无连接的网际协议（Intert Prococol）和许多路由选择协议，因此互联网的网络层也叫做"),e("strong",[this._v("网际层")]),this._v("或"),e("strong",[this._v("IP层")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-数据链路层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据链路层","aria-hidden":"true"}},[this._v("#")]),this._v(" 4 数据链路层")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("数据链路层(data link layer)通常简称为链路层。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层的协议。")]),this._v(" 在两个相邻节点之间传送数据时，"),e("strong",[this._v("数据链路层将网络层交下来的 IP 数据报组装程帧")]),this._v("，在两个相邻节点间的链路上传送帧。每一帧包括数据和必要的控制信息（如同步信息，地址信息，差错控制等）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-物理层"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-物理层","aria-hidden":"true"}},[this._v("#")]),this._v(" 5 物理层")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("在物理层上所传送的数据单位是比特。\n"),e("strong",[this._v("物理层(physical layer)的作用是实现相邻计算机节点之间比特流的透明传送，尽可能屏蔽掉具体传输介质和物理设备的差异。")]),this._v(" 使其上面的数据链路层不必考虑网络的具体传输介质是什么。“透明传送比特流”表示经实际电路传送后的比特流没有发生变化，对传送的比特流来说，这个电路好像是看不见的。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"总结一下"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#总结一下","aria-hidden":"true"}},[this._v("#")]),this._v(" 总结一下")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("上面我们对计算机网络的五层体系结构有了初步的了解，下面附送一张七层体系结构图总结一下。图片来源：https://blog.csdn.net/yaopeng_2005/article/details/7064869\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/7/29/164e529309f0fa33?w=1120&h=1587&f=gif&s=225325",alt:"七层体系结构图"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"二-tcp-三次握手和四次挥手-面试常客"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-tcp-三次握手和四次挥手-面试常客","aria-hidden":"true"}},[this._v("#")]),this._v(" 二 TCP 三次握手和四次挥手(面试常客)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("漫画图解：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("图片来源：《图解HTTP》\n"),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/8/1633e127396541f1?w=864&h=439&f=png&s=226095",alt:"TCP三次握手"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("简单示意图：")]),this._v(" "),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/8/1633e14233d95972?w=542&h=427&f=jpeg&s=15088",alt:"TCP三次握手"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("客户端–发送带有 SYN 标志的数据包–一次握手–服务端")]),this._v(" "),e("li",[this._v("服务端–发送带有 SYN/ACK 标志的数据包–二次握手–客户端")]),this._v(" "),e("li",[this._v("客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"为什么要三次握手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要三次握手","aria-hidden":"true"}},[this._v("#")]),this._v(" 为什么要三次握手")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"为什么要传回-syn"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要传回-syn","aria-hidden":"true"}},[this._v("#")]),this._v(" 为什么要传回 SYN")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("SYN 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误。 ]）消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"传了-syn-为啥还要传-ack"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#传了-syn-为啥还要传-ack","aria-hidden":"true"}},[this._v("#")]),this._v(" 传了 SYN,为啥还要传 ACK")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/8/1633e1676e2ac0a3?w=500&h=340&f=jpeg&s=13406",alt:"TCP四次挥手"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送")]),this._v(" "),e("li",[this._v("服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号")]),this._v(" "),e("li",[this._v("服务器-关闭与客户端的连接，发送一个FIN给客户端")]),this._v(" "),e("li",[this._v("客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"为什么要四次挥手"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么要四次挥手","aria-hidden":"true"}},[this._v("#")]),this._v(" 为什么要四次挥手")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"三-tcp、udp-协议的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三-tcp、udp-协议的区别","aria-hidden":"true"}},[this._v("#")]),this._v(" 三 TCP、UDP 协议的区别")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/19/162db5e97e9a9e01?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"TCP、UDP协议的区别"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"四-tcp-协议如何保证可靠传输"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#四-tcp-协议如何保证可靠传输","aria-hidden":"true"}},[this._v("#")]),this._v(" 四 TCP 协议如何保证可靠传输")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[t._v("应用数据被分割成 TCP 认为最适合发送的数据块。")]),t._v(" "),r("li",[t._v("TCP 给发送的每一个包进行编号，接收方对数据包进行排序，把有序数据传送给应用层。")]),t._v(" "),r("li",[r("strong",[t._v("校验和：")]),t._v(" TCP 将保持它首部和数据的检验和。这是一个端到端的检验和，目的是检测数据在传输过程中的任何变化。如果收到段的检验和有差错，TCP 将丢弃这个报文段和不确认收到此报文段。")]),t._v(" "),r("li",[t._v("TCP 的接收端会丢弃重复的数据。")]),t._v(" "),r("li",[r("strong",[t._v("流量控制：")]),t._v(" TCP 连接的每一方都有固定大小的缓冲空间，TCP的接收端只允许发送端发送接收端缓冲区能接纳的数据。当接收方来不及处理发送方的数据，能提示发送方降低发送的速率，防止包丢失。TCP 使用的流量控制协议是可变大小的滑动窗口协议。 （TCP 利用滑动窗口实现流量控制）")]),t._v(" "),r("li",[r("strong",[t._v("拥塞控制：")]),t._v(" 当网络拥塞时，减少数据的发送。")]),t._v(" "),r("li",[r("strong",[t._v("停止等待协议")]),t._v(" 也是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组。 "),r("strong",[t._v("超时重传：")]),t._v(" 当 TCP 发出一个段后，它启动一个定时器，等待目的端确认收到这个报文段。如果不能及时收到一个确认，将重发这个报文段。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"停止等待协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#停止等待协议","aria-hidden":"true"}},[this._v("#")]),this._v(" 停止等待协议")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("停止等待协议是为了实现可靠传输的，它的基本原理就是每发完一个分组就停止发送，等待对方确认。在收到确认后再发下一个分组；")]),this._v(" "),e("li",[this._v("在停止等待协议中，若接收方收到重复分组，就丢弃该分组，但同时还要发送确认；")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("1) 无差错情况:")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/16/16541fa8c3816a90?w=514&h=473&f=png&s=9924",alt:""}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("2) 出现差错情况（超时重传）:")]),this._v(" "),e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/16/16541faefdf249ab?w=953&h=480&f=png&s=19163",alt:""}}),this._v("\n停止等待协议中超时重传是指只要超过一段时间仍然没有收到确认，就重传前面发送过的分组（认为刚才发送过的分组丢失了）。因此每发送完一个分组需要设置一个超时计时器，其重转时间应比数据在分组传输的平均往返时间更长一些。这种自动重传方式常称为 "),e("strong",[this._v("自动重传请求 ARQ")]),this._v(" 。另外在停止等待协议中若收到重复分组，就丢弃该分组，但同时还要发送确认。"),e("strong",[this._v("连续 ARQ 协议")]),this._v(" 可提高信道利用率。发送维持一个发送窗口，凡位于发送窗口内的分组可连续发送出去，而不需要等待对方确认。接收方一般采用累积确认，对按序到达的最后一个分组发送确认，表明到这个分组位置的所有分组都已经正确收到了。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("3) 确认丢失和确认迟到")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("p",[r("strong",[t._v("确认丢失")]),t._v("：确认消息在传输过程丢失\n"),r("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/16/16541fb6941a7165?w=918&h=461&f=png&s=19841",alt:""}}),t._v("\n当A发送M1消息，B收到后，B向A发送了一个M1确认消息，但却在传输过程中丢失。而A并不知道，在超时计时过后，A重传M1消息，B再次收到该消息后采取以下两点措施：")]),t._v(" "),r("ol",[r("li",[t._v("丢弃这个重复的M1消息，不向上层交付。")]),t._v(" "),r("li",[t._v("向A发送确认消息。（不会认为已经发送过了，就不再发送。A能重传，就证明B的确认消息丢失）。")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("确认迟到")]),t._v(" ：确认消息在传输过程中迟到\n"),r("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/16/16541fdd85929e6b?w=899&h=450&f=png&s=23165",alt:""}}),t._v("\nA发送M1消息，B收到并发送确认。在超时时间内没有收到确认消息，A重传M1消息，B仍然收到并继续发送确认消息（B收到了2份M1）。此时A收到了B第二次发送的确认消息。接着发送其他数据。过了一会，A收到了B第一次发送的对M1的确认消息（A也收到了2份确认消息）。处理如下：")]),t._v(" "),r("ol",[r("li",[t._v("A收到重复的确认后，直接丢弃。")]),t._v(" "),r("li",[t._v("B收到重复的M1后，也直接丢弃重复的M1。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"自动重传请求-arq-协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#自动重传请求-arq-协议","aria-hidden":"true"}},[this._v("#")]),this._v(" 自动重传请求 ARQ 协议")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("优点：")]),this._v(" 简单")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("缺点：")]),this._v(" 信道利用率低")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"连续arq协议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#连续arq协议","aria-hidden":"true"}},[this._v("#")]),this._v(" 连续ARQ协议")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("优点：")]),this._v(" 信道利用率高，容易实现，即使确认丢失，也不必重传。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("缺点：")]),this._v(" 不能向发送方反映出接收方已经正确收到的所有分组的信息。 比如：发送方发送了 5条 消息，中间第三条丢失（3号），这时接收方只能对前两个发送确认。发送方无法知道后三个分组的下落，而只好把后三个全部重传一次。这也叫 Go-Back-N（回退 N），表示需要退回来重传已经发送过的 N 个消息。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"滑动窗口"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#滑动窗口","aria-hidden":"true"}},[this._v("#")]),this._v(" 滑动窗口")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("TCP 利用滑动窗口实现流量控制的机制。")]),this._v(" "),e("li",[this._v("滑动窗口（Sliding window）是一种流量控制技术。早期的网络通信中，通信双方不会考虑网络的拥挤情况直接发送数据。由于大家不知道网络拥塞状况，同时发送数据，导致中间节点阻塞掉包，谁也发不了数据，所以就有了滑动窗口机制来解决此问题。")]),this._v(" "),e("li",[this._v("TCP 中采用滑动窗口来进行传输控制，滑动窗口的大小意味着接收方还有多大的缓冲区可以用于接收数据。发送方可以通过滑动窗口的大小来确定应该发送多少字节的数据。当滑动窗口为 0 时，发送方一般不能再发送数据报，但有两种情况除外，一种情况是可以发送紧急数据，例如，允许用户终止在远端机上的运行进程。另一种情况是发送方可以发送一个 1 字节的数据报来通知接收方重新声明它希望接收的下一字节及发送方的滑动窗口大小。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"流量控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#流量控制","aria-hidden":"true"}},[this._v("#")]),this._v(" 流量控制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("TCP 利用滑动窗口实现流量控制。")]),this._v(" "),e("li",[this._v("流量控制是为了控制发送方发送速率，保证接收方来得及接收。")]),this._v(" "),e("li",[this._v("接收方发送的确认报文中的窗口字段可以用来控制发送方窗口大小，从而影响发送方的发送速率。将窗口字段设置为 0，则发送方不能发送数据。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"拥塞控制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#拥塞控制","aria-hidden":"true"}},[this._v("#")]),this._v(" 拥塞控制")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("为了进行拥塞控制，TCP 发送方要维持一个 "),e("strong",[this._v("拥塞窗口(cwnd)")]),this._v(" 的状态变量。拥塞控制窗口的大小取决于网络的拥塞程度，并且动态变化。发送方让自己的发送窗口取为拥塞窗口和接收方的接受窗口中较小的一个。")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("TCP的拥塞控制采用了四种算法，即 "),r("strong",[t._v("慢开始")]),t._v(" 、 "),r("strong",[t._v("拥塞避免")]),t._v(" 、"),r("strong",[t._v("快重传")]),t._v(" 和 "),r("strong",[t._v("快恢复")]),t._v("。在网络层也可以使路由器采用适当的分组丢弃策略（如主动队列管理 AQM），以减少网络拥塞的发生。")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("strong",[t._v("慢开始：")]),t._v(" 慢开始算法的思路是当主机开始发送数据时，如果立即把大量数据字节注入到网络，那么可能会引起网络阻塞，因为现在还不知道网络的符合情况。经验表明，较好的方法是先探测一下，即由小到大逐渐增大发送窗口，也就是由小到大逐渐增大拥塞窗口数值。cwnd初始值为1，每经过一个传播轮次，cwnd加倍。\n"),r("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/10/1652348ada2c8fd0?w=1050&h=560&f=jpeg&s=112611",alt:""}})]),t._v(" "),r("li",[r("strong",[t._v("拥塞避免：")]),t._v(" 拥塞避免算法的思路是让拥塞窗口cwnd缓慢增大，即每经过一个往返时间RTT就把发送放的cwnd加1.")]),t._v(" "),r("li",[r("strong",[t._v("快重传与快恢复：")]),t._v("\n在 TCP/IP 中，快速重传和恢复（fast retransmit and recovery，FRR）是一种拥塞控制算法，它能快速恢复丢失的数据包。没有 FRR，如果数据包丢失了，TCP 将会使用定时器来要求传输暂停。在暂停的这段时间内，没有新的或复制的数据包被发送。有了 FRR，如果接收机接收到一个不按顺序的数据段，它会立即给发送机发送一个重复确认。如果发送机接收到三个重复确认，它会假定确认件指出的数据段丢失了，并立即重传这些丢失的数据段。有了 FRR，就不会因为重传时要求的暂停被耽误。 　当有单独的数据包丢失时，快速重传和恢复（FRR）能最有效地工作。当有多个数据信息包在某一段很短的时间内丢失时，它则不能很有效地工作。\n"),r("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/8/10/165234f0303d174b?w=1174&h=648&f=png&s=109568",alt:"快重传与快恢复"}})])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"五-在浏览器中输入url地址-显示主页的过程（面试常客）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#五-在浏览器中输入url地址-显示主页的过程（面试常客）","aria-hidden":"true"}},[this._v("#")]),this._v(" 五  在浏览器中输入url地址 ->> 显示主页的过程（面试常客）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("打开一个网页，整个过程会使用哪些协议")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/19/162db5e985aabdbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1",alt:"状态码"}})])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ol",[r("li",[t._v("DNS解析")]),t._v(" "),r("li",[t._v("TCP连接")]),t._v(" "),r("li",[t._v("发送HTTP请求")]),t._v(" "),r("li",[t._v("服务器处理请求并返回HTTP报文")]),t._v(" "),r("li",[t._v("浏览器解析渲染页面")]),t._v(" "),r("li",[t._v("连接结束")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"六-状态码"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#六-状态码","aria-hidden":"true"}},[this._v("#")]),this._v(" 六 状态码")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/8/1633e19dba27ed00?w=673&h=218&f=png&s=72968",alt:"状态码"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"七-各种协议与http协议之间的关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#七-各种协议与http协议之间的关系","aria-hidden":"true"}},[this._v("#")]),this._v(" 七 各种协议与HTTP协议之间的关系")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/8/1633ead316d07713?w=841&h=1193&f=png&s=609513",alt:"各种协议与HTTP协议之间的关系"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"八-http长连接、短连接"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#八-http长连接、短连接","aria-hidden":"true"}},[this._v("#")]),this._v(" 八  HTTP长连接、短连接")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("Connection:keep-alive\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("HTTP协议的长连接和短连接，实质上是TCP协议的长连接和短连接。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"写在最后"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#写在最后","aria-hidden":"true"}},[this._v("#")]),this._v(" 写在最后")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"计算机网络常见问题回顾"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#计算机网络常见问题回顾","aria-hidden":"true"}},[this._v("#")]),this._v(" 计算机网络常见问题回顾")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("①TCP三次握手和四次挥手、")]),t._v(" "),r("li",[t._v("②在浏览器中输入url地址->>显示主页的过程")]),t._v(" "),r("li",[t._v("③HTTP和HTTPS的区别")]),t._v(" "),r("li",[t._v("④TCP、UDP协议的区别")]),t._v(" "),r("li",[t._v("⑤常见的状态码。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"建议"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#建议","aria-hidden":"true"}},[this._v("#")]),this._v(" 建议")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考")])}],!1,null,null,null);e.default=_.exports}}]);