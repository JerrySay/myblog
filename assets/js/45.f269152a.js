(window.webpackJsonp=window.webpackJsonp||[]).push([[45],{247:function(t,e,r){"use strict";r.r(e);var n=r(0),s=Object(n.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[r("p",[t._v("下面是自己学习设计模式的时候做的总结，有些是自己的原创文章，有些是网上写的比较好的文章，保存下来细细消化吧！")]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/qq_34337272/article/details/80455972",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解单例模式——只有一个实例"),r("OutboundLink")],1)]),t._v(" "),t._m(6),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/qq_34337272/article/details/80472071",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解工厂模式——由对象工厂生成对象"),r("OutboundLink")],1)]),t._v(" "),t._m(7),t._v(" "),r("p",[r("a",{attrs:{href:"http://blog.csdn.net/qq_34337272/article/details/80540059",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解建造者模式 ——组装复杂的实例"),r("OutboundLink")],1)]),t._v(" "),t._m(8),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/qq_34337272/article/details/80706444",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解原型模式 ——通过复制生成实例"),r("OutboundLink")],1)]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),r("p",[r("a",{attrs:{href:"https://segmentfault.com/a/1190000011856448",target:"_blank",rel:"noopener noreferrer"}},[t._v("深入理解适配器模式——加个“适配器”以便于复用"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-lo-adapter-pattern/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("适配器模式原理及实例介绍-IBM"),r("OutboundLink")],1)]),t._v(" "),t._m(15),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/yangzl2008/article/details/7670996",target:"_blank",rel:"noopener noreferrer"}},[t._v("设计模式笔记16：桥接模式(Bridge Pattern)"),r("OutboundLink")],1)]),t._v(" "),t._m(16),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/lmb55/article/details/51039781",target:"_blank",rel:"noopener noreferrer"}},[t._v("大话设计模式—组合模式"),r("OutboundLink")],1)]),t._v(" "),t._m(17),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/chenxing818/p/4705919.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("java模式—装饰者模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/cauchyweierstrass/article/details/48240147",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java设计模式-装饰者模式"),r("OutboundLink")],1)]),t._v(" "),t._m(18),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/lthIU/p/5860607.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("java设计模式之外观模式（门面模式）"),r("OutboundLink")],1)]),t._v(" "),t._m(19),t._v(" "),r("p",[r("a",{attrs:{href:"http://www.jasongj.com/design_pattern/flyweight/",target:"_blank",rel:"noopener noreferrer"}},[t._v("享元模式"),r("OutboundLink")],1)]),t._v(" "),t._m(20),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.ibm.com/developerworks/cn/java/j-lo-proxy-pattern/index.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("代理模式原理及实例讲解 （IBM出品，很不错）"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/briblue/article/details/73928350",target:"_blank",rel:"noopener noreferrer"}},[t._v("轻松学，Java 中的代理模式及动态代理"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/justloveyou_/article/details/74203025",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java代理模式及其应用"),r("OutboundLink")],1)]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/jason0539/article/details/45091639",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java设计模式之责任链模式、职责链模式"),r("OutboundLink")],1)]),t._v(" "),r("p",[r("a",{attrs:{href:"https://www.cnblogs.com/lizo/p/7503862.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("责任链模式实现的三种方式"),r("OutboundLink")],1)]),t._v(" "),t._m(28),t._v(" "),r("p",[t._v("观察者模式也是非常常用的设计模式，下面这个博客简单介绍了观察者模式的简单定义、解决了一个什么问题，用一个气象站和气象看板的例子去描述一对多的关系中观察者模式的应用，并且还介绍了jdk内置的观察者模式接口。")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://zhanglijun1217.github.io/blog/2018/12/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-md/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java设计模式之观察者模式"),r("OutboundLink")],1)]),t._v(" "),t._m(29),t._v(" "),r("p",[t._v("策略模式作为设计原则中开闭原则最典型的体现，也是经常使用的。下面这篇博客介绍了策略模式一般的组成部分和概念，并用了一个小demo去说明了策略模式的应用。")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://blog.csdn.net/zlj1217/article/details/81230077",target:"_blank",rel:"noopener noreferrer"}},[t._v("java设计模式之策略模式"),r("OutboundLink")],1)]),t._v(" "),t._m(30)])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"创建型模式："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式：","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建型模式：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("h3",{attrs:{id:"创建型模式概述："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式概述：","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建型模式概述：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("创建型模式(Creational Pattern)对类的实例化过程进行了抽象，能够将软件模块中对象的创建和对象的使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。")]),this._v(" "),e("li",[this._v("创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/16/1640641afcb7559b?w=491&h=241&f=png&s=51443",alt:"创建型模式"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("h3",{attrs:{id:"创建型模式系列文章推荐："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#创建型模式系列文章推荐：","aria-hidden":"true"}},[this._v("#")]),this._v(" 创建型模式系列文章推荐：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("单例模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("工厂模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("建造者模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("原型模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"结构型模式："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式：","aria-hidden":"true"}},[this._v("#")]),this._v(" 结构型模式：")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("h3",{attrs:{id:"结构型模式概述："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式概述：","aria-hidden":"true"}},[this._v("#")]),this._v(" 结构型模式概述：")])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("strong",[t._v("结构型模式(Structural Pattern)：")]),t._v(" 描述如何将类或者对象结合在一起形成更大的结构，就像搭积木，可以通过简单积木的组合形成复杂的、功能更为强大的结构\n"),r("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/16/164064d6b3c205e3?w=719&h=233&f=png&s=270293",alt:"结构型模式(Structural Pattern)"}})]),t._v(" "),r("li",[r("strong",[t._v("结构型模式可以分为类结构型模式和对象结构型模式：")]),t._v(" "),r("ul",[r("li",[t._v("类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在继承关系和实现关系。")]),t._v(" "),r("li",[t._v("对象结构型模式关心类与对象的组合，通过关联关系使得在一个类中定义另一个类的实例对象，然后通过该对象调用其方法。根据“合成复用原则”，在系统中尽量使用关联关系来替代继承关系，因此大部分结构型模式都是对象结构型模式。")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/16/1640655459d766d2?w=378&h=266&f=png&s=59652",alt:"结构型模式"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("h3",{attrs:{id:"结构型模式系列文章推荐："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#结构型模式系列文章推荐：","aria-hidden":"true"}},[this._v("#")]),this._v(" 结构型模式系列文章推荐：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("适配器模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("桥接模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("组合模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("装饰模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("外观模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("享元模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("代理模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"行为型模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式","aria-hidden":"true"}},[this._v("#")]),this._v(" 行为型模式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("h3",{attrs:{id:"行为型模式概述："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#行为型模式概述：","aria-hidden":"true"}},[this._v("#")]),this._v(" 行为型模式概述：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("行为型模式(Behavioral Pattern)是对在不同的对象之间划分责任和算法的抽象化。")]),this._v(" "),e("li",[this._v("行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。")]),this._v(" "),e("li",[this._v("通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象之间的交互。在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("行为型模式分为类行为型模式和对象行为型模式两种：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("类行为型模式：")]),this._v(" 类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。")]),this._v(" "),e("li",[e("strong",[this._v("对象行为型模式：")]),this._v(" 对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/28/164467dd92c6172c?w=453&h=269&f=png&s=63270",alt:"行为型模式"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("职责链模式：")])])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("p",[r("strong",[t._v("命令模式：")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("解释器模式：")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("迭代器模式：")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("中介者模式：")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("备忘录模式：")])])]),t._v(" "),r("li",[r("p",[r("strong",[t._v("观察者模式：")])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("状态模式：")])]),this._v(" "),e("li",[e("strong",[this._v("策略模式：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("模板方法模式：")])]),this._v(" "),e("li",[e("strong",[this._v("访问者模式：")])])])}],!1,null,null,null);e.default=s.exports}}]);