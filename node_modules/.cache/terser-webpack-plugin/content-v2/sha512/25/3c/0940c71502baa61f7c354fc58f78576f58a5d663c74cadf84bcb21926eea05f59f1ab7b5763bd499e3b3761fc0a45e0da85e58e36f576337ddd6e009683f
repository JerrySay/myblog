{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[74],{280:function(t,e,a){\"use strict\";a.r(e);var r=a(0),s=Object(r.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"div\",{staticClass:\"content\"},[a(\"p\",[t._v(\"本文是作者根据官方文档以及自己平时的使用情况，对 Dubbo 所做的一个总结。如果不懂 Dubbo 的使用的话，可以参考我的这篇文章\"),a(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484706&idx=1&sn=d413fc17023482f67ca17cb6756b9ff8&chksm=fd985343caefda555969568fdf4734536e0a1745f9de337d434a7dbd04e893bd2d75f3641aab&token=1902169190&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"《超详细，新手都能看懂 ！使用SpringBoot+Dubbo 搭建一个简单的分布式服务》\"),a(\"OutboundLink\")],1)]),t._v(\" \"),a(\"p\",[t._v(\"Dubbo 官网：http://dubbo.apache.org/zh-cn/index.html\")]),t._v(\" \"),a(\"p\",[t._v(\"Dubbo 中文文档： http://dubbo.apache.org/zh-cn/index.html\")]),t._v(\" \"),t._m(0),t._v(\" \"),t._m(1),t._v(\" \"),t._m(2),t._v(\" \"),a(\"p\",[t._v(\"Apache Dubbo (incubating) |ˈdʌbəʊ| 是一款高性能、轻量级的开源Java RPC 框架，它提供了三大核心能力：面向接口的远程方法调用，智能容错和负载均衡，以及服务自动注册和发现。简单来说 Dubbo 是一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及SOA服务治理方案。\")]),t._v(\" \"),a(\"p\",[t._v(\"Dubbo 目前已经有接近 23k 的 Star ，Dubbo的Github 地址：\"),a(\"a\",{attrs:{href:\"https://github.com/apache/incubator-dubbo\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://github.com/apache/incubator-dubbo\"),a(\"OutboundLink\")],1),t._v(\" 。 另外，在开源中国举行的2018年度最受欢迎中国开源软件这个活动的评选中，Dubbo 更是凭借其超高人气仅次于 vue.js 和 ECharts 获得第三名的好成绩。\")]),t._v(\" \"),a(\"p\",[t._v(\"Dubbo 是由阿里开源，后来加入了 Apache 。正式由于 Dubbo 的出现，才使得越来越多的公司开始使用以及接受分布式架构。\")]),t._v(\" \"),t._m(3),t._v(\" \"),t._m(4),t._v(\" \"),t._m(5),t._v(\" \"),a(\"p\",[t._v(\"RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。比如两个不同的服务A,B部署在两台不同的机器上，那么服务 A 如果想要调用服务 B 中的某个方法该怎么办呢？使用 HTTP请求 当然可以，但是可能会比较慢而且一些优化做的并不好。 RPC 的出现就是为了解决这个问题。\")]),t._v(\" \"),t._m(6),t._v(\" \"),a(\"p\",[t._v(\"我这里这是简单的提一下。详细内容可以查看下面这篇文章：\")]),t._v(\" \"),a(\"p\",[a(\"a\",{attrs:{href:\"http://www.importnew.com/22003.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"http://www.importnew.com/22003.html\"),a(\"OutboundLink\")],1)]),t._v(\" \"),t._m(7),t._v(\" \"),t._m(8),t._v(\" \"),a(\"p\",[t._v(\"下面再贴一个网上的时序图：\")]),t._v(\" \"),t._m(9),t._v(\" \"),t._m(10),t._v(\" \"),t._m(11),t._v(\" \"),a(\"p\",[t._v(\"Dubbo 的诞生和 SOA 分布式架构的流行有着莫大的关系。SOA 面向服务的架构（Service Oriented Architecture），也就是把工程按照业务逻辑拆分成服务层、表现层两个工程。服务层中包含业务逻辑，只需要对外提供服务即可。表现层只需要处理和页面的交互，业务逻辑都是调用服务层的服务来实现。SOA架构中有两个主要角色：服务提供者（Provider）和服务使用者（Consumer）。\")]),t._v(\" \"),t._m(12),t._v(\" \"),t._m(13),t._v(\" \"),a(\"p\",[t._v(\"我觉得主要可以从 Dubbo 提供的下面四点特性来说为什么要用 Dubbo：\")]),t._v(\" \"),t._m(14),t._v(\" \"),a(\"p\",[t._v(\"另外，Dubbo 除了能够应用在分布式系统中，也可以应用在现在比较火的微服务系统中。不过，由于 Spring Cloud 在微服务中应用更加广泛，所以，我觉得一般我们提 Dubbo 的话，大部分是分布式系统的情况。\")]),t._v(\" \"),t._m(15),t._v(\" \"),t._m(16),t._v(\" \"),a(\"p\",[t._v(\"分布式或者说 SOA 分布式重要的就是面向服务，说简单的分布式就是我们把整个系统拆分成不同的服务然后将这些服务放在不同的服务器上减轻单体服务的压力提高并发量和性能。比如电商系统可以简单地拆分成订单系统、商品系统、登录系统等等，拆分之后的每个服务可以部署在不同的机器上，如果某一个服务的访问量比较大的话也可以将这个服务同时部署在多台机器上。\")]),t._v(\" \"),t._m(17),t._v(\" \"),a(\"p\",[t._v(\"从开发角度来讲单体应用的代码都集中在一起，而分布式系统的代码根据业务被拆分。所以，每个团队可以负责一个服务的开发，这样提升了开发效率。另外，代码根据业务拆分之后更加便于维护和扩展。\")]),t._v(\" \"),a(\"p\",[t._v(\"另外，我觉得将系统拆分成分布式之后不光便于系统扩展和维护，更能提高整个系统的性能。你想一想嘛?把整个系统拆分成不同的服务/系统，然后每个服务/系统 单独部署在一台服务器上，是不是很大程度上提高了系统性能呢？\")]),t._v(\" \"),t._m(18),t._v(\" \"),t._m(19),t._v(\" \"),t._m(20),t._v(\" \"),t._m(21),t._v(\" \"),t._m(22),t._v(\" \"),t._m(23),t._v(\" \"),t._m(24),t._v(\" \"),t._m(25),t._v(\" \"),t._m(26),t._v(\" \"),t._m(27),t._v(\" \"),t._m(28),t._v(\" \"),a(\"p\",[t._v(\"图中从下至上分为十层，各层均为单向依赖，右边的黑色箭头代表层之间的依赖关系，每一层都可以剥离上层被复用，其中，Service 和 Config 层为 API，其它各层均为 SPI。\")]),t._v(\" \"),t._m(29),t._v(\" \"),t._m(30),t._v(\" \"),t._m(31),t._v(\" \"),t._m(32),t._v(\" \"),t._m(33),t._v(\" \"),t._m(34),t._v(\" \"),t._m(35),t._v(\" \"),a(\"p\",[t._v(\"比如我们的系统中的某个服务的访问量特别大，我们将这个服务部署在了多台服务器上，当客户端发起请求的时候，多台服务器都可以处理这个请求。那么，如何正确选择处理该请求的服务器就很关键。假如，你就要一台服务器来处理该服务的请求，那该服务部署在多台服务器的意义就不复存在了。负载均衡就是为了避免单个服务器响应同一请求，容易造成服务器宕机、崩溃等问题，我们从负载均衡的这四个字就能明显感受到它的意义。\")]),t._v(\" \"),t._m(36),t._v(\" \"),a(\"p\",[t._v(\"在集群负载均衡时，Dubbo 提供了多种均衡策略，默认为 \"),a(\"code\",[t._v(\"random\")]),t._v(\" 随机调用。可以自行扩展负载均衡策略，参见：\"),a(\"a\",{attrs:{href:\"https://dubbo.gitbooks.io/dubbo-dev-book/content/impls/load-balance.html\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"负载均衡扩展\"),a(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),a(\"p\",[t._v(\"备注:下面的图片来自于：尚硅谷2018Dubbo 视频。\")]),t._v(\" \"),t._m(37),t._v(\" \"),t._m(38),t._v(\" \"),t._m(39),t._v(\" \"),t._m(40),t._v(\" \"),t._m(41),t._v(\" \"),t._m(42),t._v(\" \"),t._m(43),t._v(\" \"),t._m(44),t._v(\" \"),t._m(45),t._v(\" \"),t._m(46),t._v(\" \"),t._m(47),t._v(\" \"),t._m(48),t._v(\" \"),a(\"p\",[t._v(\"服务端服务级别\")]),t._v(\" \"),t._m(49),a(\"p\",[t._v(\"客户端服务级别\")]),t._v(\" \"),t._m(50),a(\"p\",[t._v(\"服务端方法级别\")]),t._v(\" \"),t._m(51),a(\"p\",[t._v(\"客户端方法级别\")]),t._v(\" \"),t._m(52),t._m(53),t._v(\" \"),a(\"p\",[t._v(\"消费方基于基于注解的服务级别配置方式：\")]),t._v(\" \"),t._m(54),t._m(55),t._v(\" \"),a(\"p\",[t._v(\"zookeeper宕机与dubbo直连的情况在面试中可能会被经常问到，所以要引起重视。\")]),t._v(\" \"),a(\"p\",[t._v(\"在实际生产中，假如zookeeper注册中心宕掉，一段时间内服务消费方还是能够调用提供方的服务的，实际上它使用的本地缓存进行通讯，这只是dubbo健壮性的一种提现。\")]),t._v(\" \"),t._m(56),t._v(\" \"),t._m(57),t._v(\" \"),t._m(58),t._v(\" \"),t._m(59),t._v(\" \"),t._m(60),t._m(61),t._v(\" \"),t._m(62)])},[function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#%E4%B8%80-%E9%87%8D%E8%A6%81%E7%9A%84%E6%A6%82%E5%BF%B5\"}},[t._v(\"一 重要的概念\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#11-%E4%BB%80%E4%B9%88%E6%98%AF-dubbo\"}},[t._v(\"1.1 什么是 Dubbo?\")])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#12-%E4%BB%80%E4%B9%88%E6%98%AF-rpcrpc%E5%8E%9F%E7%90%86%E6%98%AF%E4%BB%80%E4%B9%88\"}},[t._v(\"1.2 什么是 RPC?RPC原理是什么?\")])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#13-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8-dubbo\"}},[t._v(\"1.3 为什么要用 Dubbo?\")])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#14-%E4%BB%80%E4%B9%88%E6%98%AF%E5%88%86%E5%B8%83%E5%BC%8F\"}},[t._v(\"1.4 什么是分布式?\")])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#15-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%88%86%E5%B8%83%E5%BC%8F\"}},[t._v(\"1.5 为什么要分布式?\")])])])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#%E4%BA%8C-dubbo-%E7%9A%84%E6%9E%B6%E6%9E%84\"}},[t._v(\"二 Dubbo 的架构\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#21-dubbo-%E7%9A%84%E6%9E%B6%E6%9E%84%E5%9B%BE%E8%A7%A3\"}},[t._v(\"2.1 Dubbo 的架构图解\")])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#22-dubbo-%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86\"}},[t._v(\"2.2 Dubbo 工作原理\")])])])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#%E4%B8%89-dubbo-%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5\"}},[t._v(\"三 Dubbo 的负载均衡策略\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#31-%E5%85%88%E6%9D%A5%E8%A7%A3%E9%87%8A%E4%B8%80%E4%B8%8B%E4%BB%80%E4%B9%88%E6%98%AF%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1\"}},[t._v(\"3.1 先来解释一下什么是负载均衡\")])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#32-%E5%86%8D%E6%9D%A5%E7%9C%8B%E7%9C%8B-dubbo-%E6%8F%90%E4%BE%9B%E7%9A%84%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E7%AD%96%E7%95%A5\"}},[t._v(\"3.2 再来看看 Dubbo 提供的负载均衡策略\")]),t._v(\" \"),a(\"ul\",[a(\"li\",[a(\"a\",{attrs:{href:\"#321-random-loadbalance%E9%BB%98%E8%AE%A4%E5%9F%BA%E4%BA%8E%E6%9D%83%E9%87%8D%E7%9A%84%E9%9A%8F%E6%9C%BA%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%BA%E5%88%B6\"}},[t._v(\"3.2.1  Random LoadBalance(默认，基于权重的随机负载均衡机制)\")])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#322-roundrobin-loadbalance%E4%B8%8D%E6%8E%A8%E8%8D%90%E5%9F%BA%E4%BA%8E%E6%9D%83%E9%87%8D%E7%9A%84%E8%BD%AE%E8%AF%A2%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E6%9C%BA%E5%88%B6\"}},[t._v(\"3.2.2  RoundRobin LoadBalance(不推荐，基于权重的轮询负载均衡机制)\")])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#323-leastactive-loadbalance\"}},[t._v(\"3.2.3 LeastActive LoadBalance\")])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#324-consistenthash-loadbalance\"}},[t._v(\"3.2.4  ConsistentHash LoadBalance\")])])])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#33-%E9%85%8D%E7%BD%AE%E6%96%B9%E5%BC%8F\"}},[t._v(\"3.3 配置方式\")])])])]),t._v(\" \"),a(\"li\",[a(\"a\",{attrs:{href:\"#%E5%9B%9B-zookeeper%E5%AE%95%E6%9C%BA%E4%B8%8Edubbo%E7%9B%B4%E8%BF%9E%E7%9A%84%E6%83%85%E5%86%B5\"}},[t._v(\"四 zookeeper宕机与dubbo直连的情况\")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"一-重要的概念\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#一-重要的概念\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 一 重要的概念\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_1-1-什么是-dubbo\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-1-什么是-dubbo\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 1.1 什么是 Dubbo?\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"我们上面说了  Dubbo 实际上是 RPC 框架，那么什么是 RPC呢？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_1-2-什么是-rpc-rpc原理是什么\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-2-什么是-rpc-rpc原理是什么\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 1.2 什么是 RPC?RPC原理是什么?\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"什么是 RPC？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"RPC原理是什么？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-6/37345851.jpg\",alt:\"RPC原理图\"}})])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ol\",[a(\"li\",[t._v(\"服务消费方（client）调用以本地调用方式调用服务；\")]),t._v(\" \"),a(\"li\",[t._v(\"client stub接收到调用后负责将方法、参数等组装成能够进行网络传输的消息体；\")]),t._v(\" \"),a(\"li\",[t._v(\"client stub找到服务地址，并将消息发送到服务端；\")]),t._v(\" \"),a(\"li\",[t._v(\"server stub收到消息后进行解码；\")]),t._v(\" \"),a(\"li\",[t._v(\"server stub根据解码结果调用本地的服务；\")]),t._v(\" \"),a(\"li\",[t._v(\"本地服务执行并将结果返回给server stub；\")]),t._v(\" \"),a(\"li\",[t._v(\"server stub将返回结果打包成消息并发送至消费方；\")]),t._v(\" \"),a(\"li\",[t._v(\"client stub接收到消息，并进行解码；\")]),t._v(\" \"),a(\"li\",[t._v(\"服务消费方得到最终结果。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-6/32527396.jpg\",alt:\"RPC原理时序图\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"说了这么多，我们为什么要用 Dubbo 呢？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_1-3-为什么要用-dubbo\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-3-为什么要用-dubbo\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 1.3 为什么要用 Dubbo?\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-26/43050183.jpg\",alt:\"为什么要用 Dubbo\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"如果你要开发分布式程序，你也可以直接基于 HTTP 接口进行通信，但是为什么要用 Dubbo呢？\")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ol\",[a(\"li\",[a(\"strong\",[t._v(\"负载均衡\")]),t._v(\"——同一个服务部署在不同的机器时该调用那一台机器上的服务\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"服务调用链路生成\")]),t._v(\"——随着系统的发展，服务越来越多，服务间依赖关系变得错踪复杂，甚至分不清哪个应用要在哪个应用之前启动，架构师都不能完整的描述应用的架构关系。Dubbo 可以为我们解决服务之间互相是如何调用的。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"服务访问压力以及时长统计、资源调度和治理\")]),t._v(\"——基于访问压力实时管理集群容量，提高集群利用率。\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"服务降级\")]),t._v(\"——某个服务挂掉之后调用备用服务\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"我们刚刚提到了分布式这个概念，下面再给大家介绍一下什么是分布式？为什么要分布式？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_1-4-什么是分布式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-4-什么是分布式\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 1.4 什么是分布式?\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_1-5-为什么要分布式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-5-为什么要分布式\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 1.5 为什么要分布式?\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"二-dubbo-的架构\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#二-dubbo-的架构\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 二 Dubbo 的架构\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_2-1-dubbo-的架构图解\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-1-dubbo-的架构图解\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 2.1 Dubbo 的架构图解\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-26/46816446.jpg\",alt:\"Dubbo 架构\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"上述节点简单说明：\")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"Provider：\")]),t._v(\"   暴露服务的服务提供方\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Consumer：\")]),t._v(\"  调用远程服务的服务消费方\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Registry：\")]),t._v(\"  服务注册与发现的注册中心\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Monitor：\")]),t._v(\"   统计服务的调用次数和调用时间的监控中心\")]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"Container：\")]),t._v(\"   服务运行容器\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"调用关系说明：\")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ol\",[a(\"li\",[t._v(\"服务容器负责启动，加载，运行服务提供者。\")]),t._v(\" \"),a(\"li\",[t._v(\"服务提供者在启动时，向注册中心注册自己提供的服务。\")]),t._v(\" \"),a(\"li\",[t._v(\"服务消费者在启动时，向注册中心订阅自己所需的服务。\")]),t._v(\" \"),a(\"li\",[t._v(\"注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。\")]),t._v(\" \"),a(\"li\",[t._v(\"服务消费者，从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。\")]),t._v(\" \"),a(\"li\",[t._v(\"服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"重要知识点总结：\")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"监控中心负责统计各服务调用次数，调用时间等，统计先在内存汇总后每分钟一次发送到监控中心服务器，并以报表展示\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"注册中心，服务提供者，服务消费者三者之间均为长连接，监控中心除外\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"注册中心通过长连接感知服务提供者的存在，服务提供者宕机，注册中心将立即推送事件通知消费者\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"注册中心和监控中心全部宕机，不影响已运行的提供者和消费者，消费者在本地缓存了提供者列表\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"注册中心和监控中心都是可选的，服务消费者可以直连服务提供者\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"服务提供者无状态，任意一台宕掉后，不影响使用\")])]),t._v(\" \"),a(\"li\",[a(\"strong\",[t._v(\"服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复\")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_2-2-dubbo-工作原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-2-dubbo-工作原理\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 2.2 Dubbo 工作原理\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-26/64702923.jpg\",alt:\"Dubbo 工作原理\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"各层说明\")]),this._v(\"：\")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ul\",[a(\"li\",[t._v(\"第一层：\"),a(\"strong\",[t._v(\"service层\")]),t._v(\"，接口层，给服务提供者和消费者来实现的\")]),t._v(\" \"),a(\"li\",[t._v(\"第二层：\"),a(\"strong\",[t._v(\"config层\")]),t._v(\"，配置层，主要是对dubbo进行各种配置的\")]),t._v(\" \"),a(\"li\",[t._v(\"第三层：\"),a(\"strong\",[t._v(\"proxy层\")]),t._v(\"，服务接口透明代理，生成服务的客户端 Stub 和服务器端 Skeleton\")]),t._v(\" \"),a(\"li\",[t._v(\"第四层：\"),a(\"strong\",[t._v(\"registry层\")]),t._v(\"，服务注册层，负责服务的注册与发现\")]),t._v(\" \"),a(\"li\",[t._v(\"第五层：\"),a(\"strong\",[t._v(\"cluster层\")]),t._v(\"，集群层，封装多个服务提供者的路由以及负载均衡，将多个实例组合成一个服务\")]),t._v(\" \"),a(\"li\",[t._v(\"第六层：\"),a(\"strong\",[t._v(\"monitor层\")]),t._v(\"，监控层，对rpc接口的调用次数和调用时间进行监控\")]),t._v(\" \"),a(\"li\",[t._v(\"第七层：\"),a(\"strong\",[t._v(\"protocol层\")]),t._v(\"，远程调用层，封装rpc调用\")]),t._v(\" \"),a(\"li\",[t._v(\"第八层：\"),a(\"strong\",[t._v(\"exchange层\")]),t._v(\"，信息交换层，封装请求响应模式，同步转异步\")]),t._v(\" \"),a(\"li\",[t._v(\"第九层：\"),a(\"strong\",[t._v(\"transport层\")]),t._v(\"，网络传输层，抽象mina和netty为统一接口\")]),t._v(\" \"),a(\"li\",[t._v(\"第十层：\"),a(\"strong\",[t._v(\"serialize层\")]),t._v(\"，数据序列化层。网络传输需要。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"三-dubbo-的负载均衡策略\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#三-dubbo-的负载均衡策略\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 三 Dubbo 的负载均衡策略\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_3-1-先来解释一下什么是负载均衡\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-1-先来解释一下什么是负载均衡\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 3.1 先来解释一下什么是负载均衡\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"先来个官方的解释。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"blockquote\",[e(\"p\",[this._v(\"维基百科对负载均衡的定义：负载均衡改善了跨多个计算资源（例如计算机，计算机集群，网络链接，中央处理单元或磁盘驱动的的工作负载分布。负载平衡旨在优化资源使用，最大化吞吐量，最小化响应时间，并避免任何单个资源的过载。使用具有负载平衡而不是单个组件的多个组件可以通过冗余提高可靠性和可用性。负载平衡通常涉及专用软件或硬件\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"上面讲的大家可能不太好理解，再用通俗的话给大家说一下。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_3-2-再来看看-dubbo-提供的负载均衡策略\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-再来看看-dubbo-提供的负载均衡策略\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 3.2 再来看看 Dubbo 提供的负载均衡策略\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"_3-2-1-random-loadbalance-默认，基于权重的随机负载均衡机制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-1-random-loadbalance-默认，基于权重的随机负载均衡机制\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 3.2.1  Random LoadBalance(默认，基于权重的随机负载均衡机制)\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[e(\"strong\",[this._v(\"随机，按权重设置随机概率。\")])]),this._v(\" \"),e(\"li\",[this._v(\"在一个截面上碰撞的概率高，但调用量越大分布越均匀，而且按概率使用权重后也比较均匀，有利于动态调整提供者权重。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-7/77722327.jpg\",alt:\"基于权重的随机负载均衡机制\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"_3-2-2-roundrobin-loadbalance-不推荐，基于权重的轮询负载均衡机制\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-2-roundrobin-loadbalance-不推荐，基于权重的轮询负载均衡机制\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 3.2.2  RoundRobin LoadBalance(不推荐，基于权重的轮询负载均衡机制)\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"轮循，按公约后的权重设置轮循比率。\")]),this._v(\" \"),e(\"li\",[this._v(\"存在慢的提供者累积请求的问题，比如：第二台机器很慢，但没挂，当请求调到第二台时就卡在那，久而久之，所有请求都卡在调到第二台上。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-7/97933247.jpg\",alt:\"基于权重的轮询负载均衡机制\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"_3-2-3-leastactive-loadbalance\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-3-leastactive-loadbalance\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 3.2.3 LeastActive LoadBalance\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"最少活跃调用数，相同活跃数的随机，活跃数指调用前后计数差。\")]),this._v(\" \"),e(\"li\",[this._v(\"使慢的提供者收到更少请求，因为越慢的提供者的调用前后计数差会越大。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"_3-2-4-consistenthash-loadbalance\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-2-4-consistenthash-loadbalance\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 3.2.4  ConsistentHash LoadBalance\")])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ul\",[a(\"li\",[a(\"strong\",[t._v(\"一致性 Hash，相同参数的请求总是发到同一提供者。(如果你需要的不是随机负载均衡，是要一类请求都到一个节点，那就走这个一致性hash策略。)\")])]),t._v(\" \"),a(\"li\",[t._v(\"当某一台提供者挂时，原本发往该提供者的请求，基于虚拟节点，平摊到其它提供者，不会引起剧烈变动。\")]),t._v(\" \"),a(\"li\",[t._v(\"算法参见：http://en.wikipedia.org/wiki/Consistent_hashing\")]),t._v(\" \"),a(\"li\",[t._v(\"缺省只对第一个参数 Hash，如果要修改，请配置 \"),a(\"code\",[t._v('<dubbo:parameter key=\"hash.arguments\" value=\"0,1\" />')])]),t._v(\" \"),a(\"li\",[t._v(\"缺省用 160 份虚拟节点，如果要修改，请配置 \"),a(\"code\",[t._v('<dubbo:parameter key=\"hash.nodes\" value=\"320\" />')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_3-3-配置方式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-3-配置方式\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 3.3 配置方式\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"xml 配置方式\")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"dubbo\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"service \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"...\"')]),t._v(\" loadbalance\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"roundrobin\"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"dubbo\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"reference \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"...\"')]),t._v(\" loadbalance\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"roundrobin\"')]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"dubbo\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"service \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"...\"')]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"dubbo\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"method name\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"...\"')]),t._v(\" loadbalance\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"roundrobin\"')]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"dubbo\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"service\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\")])])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"dubbo\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"reference \"),a(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"interface\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"...\"')]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n    \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),t._v(\"dubbo\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"method name\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"...\"')]),t._v(\" loadbalance\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"roundrobin\"')]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"/\")]),t._v(\"dubbo\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\":\")]),t._v(\"reference\"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\">\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"注解配置方式：\")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Reference\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"loadbalance \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"roundrobin\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"\\nHelloService helloService\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h2\",{attrs:{id:\"四-zookeeper宕机与dubbo直连的情况\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#四-zookeeper宕机与dubbo直连的情况\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 四 zookeeper宕机与dubbo直连的情况\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"dubbo的健壮性表现：\")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"ol\",[a(\"li\",[t._v(\"监控中心宕掉不影响使用，只是丢失部分采样数据\")]),t._v(\" \"),a(\"li\",[t._v(\"数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务\")]),t._v(\" \"),a(\"li\",[t._v(\"注册中心对等集群，任意一台宕掉后，将自动切换到另一台\")]),t._v(\" \"),a(\"li\",[t._v(\"注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯\")]),t._v(\" \"),a(\"li\",[t._v(\"服务提供者无状态，任意一台宕掉后，不影响使用\")]),t._v(\" \"),a(\"li\",[t._v(\"服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[this._v(\"我们前面提到过：注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小。所以，我们可以完全可以绕过注册中心——采用 \"),e(\"strong\",[this._v(\"dubbo 直连\")]),this._v(\" ，即在服务消费方配置服务提供方的位置信息。\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"xml配置方式：\")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"div\",{staticClass:\"language-xml extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-xml\"}},[a(\"code\",[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token tag\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"<\")]),a(\"span\",{pre:!0,attrs:{class:\"token namespace\"}},[t._v(\"dubbo:\")]),t._v(\"reference\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"id\")]),a(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"userService\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"interface\")]),a(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"com.zang.gmall.service.UserService\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token attr-name\"}},[t._v(\"url\")]),a(\"span\",{pre:!0,attrs:{class:\"token attr-value\"}},[a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"=\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')]),t._v(\"dubbo://localhost:20880\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v('\"')])]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"/>\")])]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"注解方式：\")])])},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a(\"div\",{staticClass:\"language-java extra-class\"},[a(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[a(\"code\",[t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token annotation punctuation\"}},[t._v(\"@Reference\")]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"url \"),a(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),a(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"127.0.0.1:20880\"')]),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\"   \\n HelloService helloService\"),a(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])}],!1,null,null,null);s.options.__file=\"dubbo.md\";e.default=s.exports}}]);","extractedComments":[]}