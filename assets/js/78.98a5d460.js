(window.webpackJsonp=window.webpackJsonp||[]).push([[78],{287:function(t,e,_){"use strict";_.r(e);var r=_(0),s=Object(r.a)({},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("div",{staticClass:"content"},[_("p",[t._v("下面这些问题都是一线大厂的真实面试问题，不论是对你面试还是说拓宽知识面都很有帮助。之前发过一篇"),_("a",{attrs:{href:"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484416&idx=1&sn=6ced00d65491ef8fd33151bdfa8895c9&chksm=fd985261caefdb779412974a6a7207c93d0c2da5b28489afb74acd2fee28505daebbadb018ff&token=177958022&lang=zh_CN#rd",target:"_blank",rel:"noopener noreferrer"}},[t._v("8 张图读懂大型网站技术架构"),_("OutboundLink")],1),t._v(" 可以作为不太了解大型网站系统技术架构朋友的入门文章。")]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),_("p",[t._v("现在大公司都在用并且未来的趋势都是 Spring Cloud，而阿里开源的 Spring Cloud Alibaba 也是 Spring Cloud 规范的实现 。")]),t._v(" "),_("p",[t._v("我们通常把 Spring Cloud 理解为一系列开源组件的集合，但是 Spring Cloud并不是等同于 Spring Cloud Netflix 的 Ribbon、Feign、Eureka（停止更新）、Hystrix 这一套组件，而是抽象了一套通用的开发模式。它的目的是通过抽象出这套通用的模式，让开发者更快更好地开发业务。但是这套开发模式运行时的实际载体，还是依赖于 RPC、网关、服务发现、配置管理、限流熔断、分布式链路跟踪等组件的具体实现。")]),t._v(" "),_("p",[t._v("Spring Cloud Alibaba 是官方认证的新一套 Spring Cloud 规范的实现,Spring Cloud Alibaba 是一套国产开源产品集合，后续还会有中文 reference 和一些原理分析文章，所以，这对于国内的开发者是非常棒的一件事。阿里的这一举动势必会推动国内微服务技术的发展，因为在没有 Spring Cloud Alibaba 之前，我们的第一选择是 Spring Cloud Netflix，但是它们的文档都是英文的，出问题后排查也比较困难， 在国内并不是有特别多的人精通。Spring Cloud Alibaba 由阿里开源组件和阿里云产品组件两部分组成，其致力于提供微服务一站式解决方案，方便开发者通过 Spring Cloud 编程模型轻松开发微服务应用。")]),t._v(" "),_("p",[t._v("另外，Apache Dubbo Ecosystem 是围绕 Apache Dubbo 打造的微服务生态，是经过生产验证的微服务的最佳实践组合。在阿里巴巴的微服务解决方案中，Dubbo、Nacos 和 Sentinel，以及后续将开源的微服务组件，都是 Dubbo EcoSystem 的一部分。阿里后续也会将 Dubbo EcoSystem 集成到 Spring Cloud 的生态中。")]),t._v(" "),t._m(8),t._v(" "),_("p",[t._v("具体可以看公众号-阿里巴巴中间件的这篇文章:"),_("a",{attrs:{href:"https://mp.weixin.qq.com/s/iNVctXw7tUGHhnF0hV84ww",target:"_blank",rel:"noopener noreferrer"}},[t._v("独家解读：Dubbo Ecosystem - 从微服务框架到微服务生态"),_("OutboundLink")],1)]),t._v(" "),_("p",[t._v("Dubbo 与 Spring Cloud 并不是竞争关系，Dubbo 作为成熟的 RPC 框架，其易用性、扩展性和健壮性已得到业界的认可。未来 Dubbo 将会作为 Spring Cloud Alibaba 的 RPC 组件，并与 Spring Cloud 原生的 Feign 以及 RestTemplate 进行无缝整合，实现“零”成本迁移。")]),t._v(" "),_("p",[t._v("在阿里巴巴的微服务解决方案中，Dubbo、Nacos 和 Sentinel，以及后续将开源的微服务组件，都是 Dubbo EcoSystem 的一部分。我们后续也会将 Dubbo EcoSystem 集成到 Spring Cloud 的生态中。")]),t._v(" "),t._m(9),t._v(" "),_("p",[t._v("性能测试指通过自动化的测试工具模拟多种正常、峰值以及异常负载条件来对系统的各项性能指标进行测试。性能测试是总称，通常细分为：")]),t._v(" "),t._m(10),t._v(" "),_("p",[t._v("后端程序员或者测试平常比较常用的测试工具是 JMeter（官网："),_("a",{attrs:{href:"https://jmeter.apache.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://jmeter.apache.org/"),_("OutboundLink")],1),t._v("）。Apache JMeter 是一款基于Java的压力测试工具(100％纯Java应用程序)，旨在加载测试功能行为和测量性能。它最初被设计用于 Web 应用测试但后来扩展到其他测试领域。")]),t._v(" "),t._m(11),t._v(" "),_("p",[t._v("这个时候就要考虑扩容了。《亿级流量网站架构核心技术》这本书上面介绍到我们可以考虑下面几步来解决这个问题：")]),t._v(" "),t._m(12),t._v(" "),_("p",[t._v("对于系统设计，理想的情况下应支持线性扩容和弹性扩容，即在系统瓶颈时，只需要增加机器就可以解决系统瓶颈，如降低延迟提升吞吐量，从而实现扩容需求。")]),t._v(" "),_("p",[t._v("如果你想扩容，则支持水平/垂直伸缩是前提。在进行拆分时，一定要清楚知道自己的目的是什么，拆分后带来的问题如何解决，拆分后如果没有得到任何收益就不要为了\n拆而拆，即不要过度拆分，要适合自己的业务。")]),t._v(" "),t._m(13),t._v(" "),_("p",[t._v("当MySQL单表记录数过大时，数据库的CRUD性能会明显下降，一些常见的优化措施如下：")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),t._m(17),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),_("p",[t._v("目前使用比较多的用来构建"),t._m(25),t._v("是阿里巴巴开源的"),_("strong",[t._v("Dubbo")]),t._v(".如果想深入了解Dubbo的可以看我写的关于Dubbo的这一篇文章："),_("strong",[t._v("《高性能优秀的服务框架-dubbo介绍》")]),t._v("："),_("a",{attrs:{href:"https://juejin.im/post/5acadeb1f265da2375072f9c",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://juejin.im/post/5acadeb1f265da2375072f9c"),_("OutboundLink")],1)]),t._v(" "),t._m(26),t._v(" "),_("p",[t._v("我们知道如果模块之间不存在直接调用，那么新增模块或者修改模块就对其他模块影响较小，这样系统的可扩展性无疑更好一些。")]),t._v(" "),t._m(27),t._v(" "),_("p",[t._v("消息接受者对消息进行过滤、处理、包装后，构造成一个新的消息类型，将消息继续发送出去，等待其他消息接受者订阅该消息。因此基于事件（消息对象）驱动的业务架构可以是一系列流程。")]),t._v(" "),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),_("p",[t._v("CAP仅适用于原子读写的NOSQL场景中，并不适合数据库系统。现在的分布式系统具有更多特性比如扩展性、可用性等等，在进行系统设计和开发时，我们不应该仅仅局限在CAP问题上。")]),t._v(" "),t._m(35),t._v(" "),_("p",[t._v("大部分人解释这一定律时，常常简单的表述为：“一致性、可用性、分区容忍性三者你只能同时达到其中两个，不可能同时达到”。实际上这是一个非常具有误导性质的说法，而且在CAP理论诞生12年之后，CAP之父也在2012年重写了之前的论文。")]),t._v(" "),t._m(36),t._v(" "),_("p",[t._v("我在网上找了很多文章想看一下有没有文章提到这个不是所谓的3选2，用百度半天没找到了一篇，用谷歌搜索找到一篇比较不错的，如果想深入学习一下CAP就看这篇文章把，我这里就不多BB了："),_("strong",[t._v("《分布式系统之CAP理论》 ：")]),t._v(" "),_("a",{attrs:{href:"http://www.cnblogs.com/hxsyl/p/4381980.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.cnblogs.com/hxsyl/p/4381980.html"),_("OutboundLink")],1)]),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),t._m(39),t._v(" "),t._m(40),t._v(" "),t._m(41),t._v(" "),t._m(42),t._v(" "),t._m(43),t._v(" "),t._m(44)])},[function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("a",{attrs:{href:"#1-%E4%BD%A0%E4%BD%BF%E7%94%A8%E8%BF%87%E5%93%AA%E4%BA%9B%E7%BB%84%E4%BB%B6%E6%88%96%E8%80%85%E6%96%B9%E6%B3%95%E6%9D%A5%E6%8F%90%E5%8D%87%E7%BD%91%E7%AB%99%E6%80%A7%E8%83%BD%E5%8F%AF%E7%94%A8%E6%80%A7%E4%BB%A5%E5%8F%8A%E5%B9%B6%E5%8F%91%E9%87%8F"}},[t._v("1. 你使用过哪些组件或者方法来提升网站性能,可用性以及并发量")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#2-%E8%AE%BE%E8%AE%A1%E9%AB%98%E5%8F%AF%E7%94%A8%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%B8%B8%E7%94%A8%E6%89%8B%E6%AE%B5"}},[t._v("2. 设计高可用系统的常用手段")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#3-%E7%8E%B0%E4%BB%A3%E4%BA%92%E8%81%94%E7%BD%91%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%80%9A%E5%B8%B8%E5%85%B7%E6%9C%89%E5%93%AA%E4%BA%9B%E7%89%B9%E7%82%B9"}},[t._v("3. 现代互联网应用系统通常具有哪些特点?")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#4-%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A2%86%E5%9F%9F%E7%9A%84%E4%BA%86%E8%A7%A3%E5%92%8C%E8%AE%A4%E8%AF%86"}},[t._v("4. 谈谈你对微服务领域的了解和认识")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#5-%E8%B0%88%E8%B0%88%E4%BD%A0%E5%AF%B9-dubbo-%E5%92%8C-spring-cloud-%E7%9A%84%E8%AE%A4%E8%AF%86%E4%B8%A4%E8%80%85%E5%85%B3%E7%B3%BB"}},[t._v("5. 谈谈你对 Dubbo 和 Spring Cloud 的认识(两者关系)")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#6-%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E4%BA%86%E8%A7%A3%E5%90%97%E8%AF%B4%E8%AF%B4%E4%BD%A0%E7%9F%A5%E9%81%93%E7%9A%84%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%B7%A5%E5%85%B7"}},[t._v("6. 性能测试了解吗?说说你知道的性能测试工具?")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#7-%E5%AF%B9%E4%BA%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E4%BD%93%E5%BA%94%E7%94%A8%E7%B3%BB%E7%BB%9F%E9%9A%8F%E7%9D%80%E4%BA%A7%E5%93%81%E4%BD%BF%E7%94%A8%E7%9A%84%E7%94%A8%E6%88%B7%E8%B6%8A%E6%9D%A5%E8%B6%8A%E5%A4%9A%E7%BD%91%E7%AB%99%E7%9A%84%E6%B5%81%E9%87%8F%E4%BC%9A%E5%A2%9E%E5%8A%A0%E6%9C%80%E7%BB%88%E5%8D%95%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E5%A4%84%E7%90%86%E9%82%A3%E4%B9%88%E5%A4%A7%E7%9A%84%E6%B5%81%E9%87%8F%E6%80%8E%E4%B9%88%E5%8A%9E"}},[t._v("7. 对于一个单体应用系统,随着产品使用的用户越来越多,网站的流量会增加,最终单台服务器无法处理那么大的流量怎么办?")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#8-%E5%A4%A7%E8%A1%A8%E4%BC%98%E5%8C%96%E7%9A%84%E5%B8%B8%E8%A7%81%E6%89%8B%E6%AE%B5"}},[t._v("8. 大表优化的常见手段")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#9-%E5%9C%A8%E7%B3%BB%E7%BB%9F%E4%B8%AD%E4%BD%BF%E7%94%A8%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E8%83%BD%E5%B8%A6%E6%9D%A5%E4%BB%80%E4%B9%88%E5%A5%BD%E5%A4%84"}},[t._v("9. 在系统中使用消息队列能带来什么好处?")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#1-%E9%80%9A%E8%BF%87%E5%BC%82%E6%AD%A5%E5%A4%84%E7%90%86%E6%8F%90%E9%AB%98%E7%B3%BB%E7%BB%9F%E6%80%A7%E8%83%BD"}},[t._v("1) 通过异步处理提高系统性能")])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#2-%E9%99%8D%E4%BD%8E%E7%B3%BB%E7%BB%9F%E8%80%A6%E5%90%88%E6%80%A7"}},[t._v("2) 降低系统耦合性")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#10-%E8%AF%B4%E8%AF%B4%E8%87%AA%E5%B7%B1%E5%AF%B9-cap-%E5%AE%9A%E7%90%86base-%E7%90%86%E8%AE%BA%E7%9A%84%E4%BA%86%E8%A7%A3"}},[t._v("10. 说说自己对 CAP 定理,BASE 理论的了解")]),t._v(" "),_("ul",[_("li",[_("a",{attrs:{href:"#cap-%E5%AE%9A%E7%90%86"}},[t._v("CAP 定理")])]),t._v(" "),_("li",[_("a",{attrs:{href:"#base-%E7%90%86%E8%AE%BA"}},[t._v("BASE 理论")])])])]),t._v(" "),_("li",[_("a",{attrs:{href:"#%E5%8F%82%E8%80%83"}},[t._v("参考")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-你使用过哪些组件或者方法来提升网站性能-可用性以及并发量"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-你使用过哪些组件或者方法来提升网站性能-可用性以及并发量","aria-hidden":"true"}},[this._v("#")]),this._v(" 1. 你使用过哪些组件或者方法来提升网站性能,可用性以及并发量")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[_("strong",[t._v("提高硬件能力、增加系统服务器")]),t._v("。（当服务器增加到某个程度的时候系统所能提供的并发访问量几乎不变，所以不能根本解决问题）")]),t._v(" "),_("li",[_("strong",[t._v("使用缓存")]),t._v("（本地缓存：本地可以使用JDK自带的 Map、Guava Cache.分布式缓存：Redis、Memcache.本地缓存不适用于提高系统并发量，一般是用处用在程序中。比如Spring是如何实现单例的呢？大家如果看过源码的话，应该知道，Spiring把已经初始过的变量放在一个Map中，下次再要使用这个变量的时候，先判断Map中有没有，这也就是系统中常见的单例模式的实现。）")]),t._v(" "),_("li",[_("strong",[t._v("消息队列")]),t._v(" （解耦+削峰+异步）")]),t._v(" "),_("li",[_("strong",[t._v("采用分布式开发")]),t._v(" （不同的服务部署在不同的机器节点上，并且一个服务也可以部署在多台机器上，然后利用 Nginx 负载均衡访问。这样就解决了单点部署(All In)的缺点，大大提高的系统并发量）")]),t._v(" "),_("li",[_("strong",[t._v("数据库分库（读写分离）、分表（水平分表、垂直分表）")])]),t._v(" "),_("li",[_("strong",[t._v("采用集群")]),t._v(" （多台机器提供相同的服务）")]),t._v(" "),_("li",[_("strong",[t._v("CDN 加速")]),t._v(" (将一些静态资源比如图片、视频等等缓存到离用户最近的网络节点)")]),t._v(" "),_("li",[_("strong",[t._v("浏览器缓存")])]),t._v(" "),_("li",[_("strong",[t._v("使用合适的连接池")]),t._v("（数据库连接池、线程池等等）")]),t._v(" "),_("li",[_("strong",[t._v("适当使用多线程进行开发。")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-设计高可用系统的常用手段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-设计高可用系统的常用手段","aria-hidden":"true"}},[this._v("#")]),this._v(" 2. 设计高可用系统的常用手段")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[_("strong",[t._v("降级：")]),t._v(" 服务降级是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。降级往往会指定不同的级别，面临不同的异常等级执行不同的处理。根据服务方式：可以拒接服务，可以延迟服务，也有时候可以随机服务。根据服务范围：可以砍掉某个功能，也可以砍掉某些模块。总之服务降级需要根据不同的业务需求采用不同的降级策略。主要的目的就是服务虽然有损但是总比没有好；")]),t._v(" "),_("li",[_("strong",[t._v("限流：")]),t._v(" 防止恶意请求流量、恶意攻击，或者防止流量超出系统峰值；")]),t._v(" "),_("li",[_("strong",[t._v("缓存：")]),t._v(" 避免大量请求直接落到数据库，将数据库击垮；")]),t._v(" "),_("li",[_("strong",[t._v("超时和重试机制：")]),t._v(" 避免请求堆积造成雪崩；")]),t._v(" "),_("li",[_("strong",[t._v("回滚机制：")]),t._v(" 快速修复错误版本。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_3-现代互联网应用系统通常具有哪些特点"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_3-现代互联网应用系统通常具有哪些特点","aria-hidden":"true"}},[this._v("#")]),this._v(" 3. 现代互联网应用系统通常具有哪些特点?")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[t._v("高并发，大流量；")]),t._v(" "),_("li",[t._v("高可用：系统7×24小时不间断服务；")]),t._v(" "),_("li",[t._v("海量数据：需要存储、管理海量数据，需要使用大量服务器；")]),t._v(" "),_("li",[t._v("用户分布广泛，网络情况复杂：许多大型互联网都是为全球用户提供服务的，用户分布范围广，各地网络情况千差万别；")]),t._v(" "),_("li",[t._v("安全环境恶劣：由于互联网的开放性，使得互联网更容易受到攻击，大型网站几乎每天都会被黑客攻击；")]),t._v(" "),_("li",[t._v("需求快速变更，发布频繁：和传统软件的版本发布频率不同，互联网产品为快速适应市场，满足用户需求，其产品发布频率是极高的；")]),t._v(" "),_("li",[t._v("渐进式发展：与传统软件产品或企业应用系统一开始就规划好全部的功能和非功能需求不同，几乎所有的大型互联网网站都是从一个小网站开始，渐进地发展起来。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_4-谈谈你对微服务领域的了解和认识"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_4-谈谈你对微服务领域的了解和认识","aria-hidden":"true"}},[this._v("#")]),this._v(" 4. 谈谈你对微服务领域的了解和认识")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_5-谈谈你对-dubbo-和-spring-cloud-的认识-两者关系"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_5-谈谈你对-dubbo-和-spring-cloud-的认识-两者关系","aria-hidden":"true"}},[this._v("#")]),this._v(" 5. 谈谈你对 Dubbo 和 Spring Cloud 的认识(两者关系)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_6-性能测试了解吗-说说你知道的性能测试工具"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_6-性能测试了解吗-说说你知道的性能测试工具","aria-hidden":"true"}},[this._v("#")]),this._v(" 6. 性能测试了解吗?说说你知道的性能测试工具?")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[_("strong",[t._v("基准测试：")]),t._v(" 在给系统施加较低压力时，查看系统的运行状况并记录相关数做为基础参考")]),t._v(" "),_("li",[t._v("**负载测试：**是指对系统不断地增加压力或增加一定压力下的持续时间，直到系统的某项或多项性能指标达到安全临界值，例如某种资源已经达到饱和状态等 。此时继续加压，系统处理能力会下降。")]),t._v(" "),_("li",[_("strong",[t._v("压力测试：")]),t._v(" 超过安全负载情况下，不断施加压力（增加并发请求），直到系统崩溃或无法处理任何请求，依此获得系统最大压力承受能力。")]),t._v(" "),_("li",[_("strong",[t._v("稳定性测试：")]),t._v(" 被测试系统在特定硬件、软件、网络环境下，加载一定业务压力（模拟生产环境不同时间点、不均匀请求，呈波浪特性）运行一段较长时间，以此检测系统是否稳定。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_7-对于一个单体应用系统-随着产品使用的用户越来越多-网站的流量会增加-最终单台服务器无法处理那么大的流量怎么办"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_7-对于一个单体应用系统-随着产品使用的用户越来越多-网站的流量会增加-最终单台服务器无法处理那么大的流量怎么办","aria-hidden":"true"}},[this._v("#")]),this._v(" 7. 对于一个单体应用系统,随着产品使用的用户越来越多,网站的流量会增加,最终单台服务器无法处理那么大的流量怎么办?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("第一步，可以考虑简单的扩容来解决问题。比如增加系统的服务器，提高硬件能力等等。")]),this._v(" "),e("li",[this._v("第二步，如果简单扩容搞不定，就需要水平拆分和垂直拆分数据／应用来提升系统的伸缩性，即通过扩容提升系统负载能力。")]),this._v(" "),e("li",[this._v("第三步，如果通过水平拆分／垂直拆分还是搞不定，那就需要根据现有系统特性，架构层面进行重构甚至是重新设计，即推倒重来。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_8-大表优化的常见手段"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_8-大表优化的常见手段","aria-hidden":"true"}},[this._v("#")]),this._v(" 8. 大表优化的常见手段")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[_("strong",[t._v("限定数据的范围：")]),t._v(" 务必禁止不带任何限制数据范围条件的查询语句。比如：我们当用户在查询订单历史的时候，我们可以控制在一个月的范围内。；")]),t._v(" "),_("li",[_("strong",[t._v("读/写分离：")]),t._v(" 经典的数据库拆分方案，主库负责写，从库负责读；")]),t._v(" "),_("li",[_("strong",[t._v("垂直分区：")]),t._v(" "),_("strong",[t._v("根据数据库里面数据表的相关性进行拆分。")]),t._v(" 例如，用户表中既有用户的登录信息又有用户的基本信息，可以将用户表拆分成两个单独的表，甚至放到单独的库做分库。"),_("strong",[t._v("简单来说垂直拆分是指数据表列的拆分，把一张列比较多的表拆分为多张表。")]),t._v(" 如下图所示，这样来说大家应该就更容易理解了。"),_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/16/164084354ba2e0fd?w=950&h=279&f=jpeg&s=26015",alt:""}}),_("strong",[t._v("垂直拆分的优点：")]),t._v(" 可以使得行数据变小，在查询时减少读取的Block数，减少I/O次数。此外，垂直分区可以简化表的结构，易于维护。"),_("strong",[t._v("垂直拆分的缺点：")]),t._v(" 主键会出现冗余，需要管理冗余列，并会引起Join操作，可以通过在应用层进行Join来解决。此外，垂直分区会让事务变得更加复杂；")]),t._v(" "),_("li",[_("strong",[t._v("水平分区：")]),t._v(" "),_("strong",[t._v("保持数据表结构不变，通过某种策略存储数据分片。这样每一片数据分散到不同的表或者库中，达到了分布式的目的。 水平拆分可以支撑非常大的数据量。")]),t._v(" 水平拆分是指数据表行的拆分，表的行数超过200万行时，就会变慢，这时可以把一张的表的数据拆成多张表来存放。举个例子：我们可以将用户信息表拆分成多个用户信息表，这样就可以避免单一表数据量过大对性能造成影响。"),_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/6/16/164084b7e9e423e3?w=690&h=271&f=jpeg&s=23119",alt:"数据库水平拆分"}}),t._v("水平拆分可以支持非常大的数据量。需要注意的一点是:分表仅仅是解决了单一表数据过大的问题，但由于表的数据还是在同一台机器上，其实对于提升MySQL并发能力没有什么意义，所以 "),_("strong",[t._v("水平拆分最好分库")]),t._v(" 。水平拆分能够 "),_("strong",[t._v("支持非常大的数据量存储，应用端改造也少")]),t._v("，但 "),_("strong",[t._v("分片事务难以解决")]),t._v("  ，跨界点Join性能较差，逻辑复杂。《Java工程师修炼之道》的作者推荐 "),_("strong",[t._v("尽量不要对数据进行分片，因为拆分会带来逻辑、部署、运维的各种复杂度")]),t._v(" ，一般的数据表在优化得当的情况下支撑千万以下的数据量是没有太大问题的。如果实在要分片，尽量选择客户端分片架构，这样可以减少一次和中间件的网络I/O。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("下面补充一下数据库分片的两种常见方案：")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("strong",[t._v("客户端代理：")]),t._v(" "),_("strong",[t._v("分片逻辑在应用端，封装在jar包中，通过修改或者封装JDBC层来实现。")]),t._v(" 当当网的 "),_("strong",[t._v("Sharding-JDBC")]),t._v(" 、阿里的TDDL是两种比较常用的实现。")]),t._v(" "),_("li",[_("strong",[t._v("中间件代理：")]),t._v(" "),_("strong",[t._v("在应用和数据中间加了一个代理层。分片逻辑统一维护在中间件服务中。")]),t._v(" 我们现在谈的 "),_("strong",[t._v("Mycat")]),t._v(" 、360的Atlas、网易的DDB等等都是这种架构的实现。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_9-在系统中使用消息队列能带来什么好处"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_9-在系统中使用消息队列能带来什么好处","aria-hidden":"true"}},[this._v("#")]),this._v(" 9. 在系统中使用消息队列能带来什么好处?")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("《大型网站技术架构》第四章和第七章均有提到消息队列对应用性能及扩展性的提升。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-通过异步处理提高系统性能"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-通过异步处理提高系统性能","aria-hidden":"true"}},[this._v("#")]),this._v(" 1) 通过异步处理提高系统性能")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/21/162e63a8e34ba534?w=910&h=350&f=jpeg&s=29123",alt:"通过异步处理提高系统性能"}}),this._v("\n如上图，"),e("strong",[this._v("在不使用消息队列服务器的时候，用户的请求数据直接写入数据库，在高并发的情况下数据库压力剧增，使得响应速度变慢。但是在使用消息队列之后，用户的请求数据发送给消息队列之后立即 返回，再由消息队列的消费者进程从消息队列中获取数据，异步写入数据库。由于消息队列服务器处理速度快于数据库（消息队列也比数据库有更好的伸缩性），因此响应速度得到大幅改善。")])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("通过以上分析我们可以得出"),_("strong",[t._v("消息队列具有很好的削峰作用的功能")]),t._v("——即"),_("strong",[t._v("通过异步处理，将短时间高并发产生的事务消息存储在消息队列中，从而削平高峰期的并发事务。")]),t._v(" 举例：在电子商务一些秒杀、促销活动中，合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击。如下图所示：\n"),_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/21/162e64583dd3ed01?w=780&h=384&f=jpeg&s=13550",alt:"合理使用消息队列可以有效抵御促销活动刚开始大量订单涌入对系统的冲击"}}),t._v("\n因为"),_("strong",[t._v("用户请求数据写入消息队列之后就立即返回给用户了，但是请求数据在后续的业务校验、写数据库等操作中可能失败")]),t._v("。因此使用消息队列进行异步处理之后，需要"),_("strong",[t._v("适当修改业务流程进行配合")]),t._v("，比如"),_("strong",[t._v("用户在提交订单之后，订单数据写入消息队列，不能立即返回用户订单提交成功，需要在消息队列的订单消费者进程真正处理完该订单之后，甚至出库后，再通过电子邮件或短信通知用户订单成功")]),t._v("，以免交易纠纷。这就类似我们平时手机订火车票和电影票。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-降低系统耦合性"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-降低系统耦合性","aria-hidden":"true"}},[this._v("#")]),this._v(" 2) 降低系统耦合性")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("我们知道模块分布式部署以后聚合方式通常有两种：1."),e("strong",[this._v("分布式消息队列")]),this._v("和2."),e("strong",[this._v("分布式服务")]),this._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[e("strong",[this._v("先来简单说一下分布式服务：")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("strong",[this._v("SOA（Service Oriented Architecture面向服务体系结构）"),e("strong",[this._v("的")]),this._v("分布式服务框架")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[e("strong",[this._v("再来谈我们的分布式消息队列：")])])])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[t._v("我们最常见的"),_("strong",[t._v("事件驱动架构")]),t._v("类似生产者消费者模式，在大型网站中通常用利用消息队列实现事件驱动结构。如下图所示：\n"),_("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/4/21/162e6665fa394b3b?w=790&h=290&f=jpeg&s=14946",alt:"利用消息队列实现事件驱动结构"}}),t._v(" "),_("strong",[t._v("消息队列使利用发布-订阅模式工作，消息发送者（生产者）发布消息，一个或多个消息接受者（消费者）订阅消息。")]),t._v(" 从上图可以看到"),_("strong",[t._v("消息发送者（生产者）和消息接受者（消费者）之间没有直接耦合")]),t._v("，消息发送者将消息发送至分布式消息队列即结束对消息的处理，消息接受者从分布式消息队列获取该消息后进行后续处理，并不需要知道该消息从何而来。"),_("strong",[t._v("对新增业务，只要对该类消息感兴趣，即可订阅该消息，对原有系统和业务没有任何影响，从而实现网站业务的可扩展性设计")]),t._v("。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("另外为了避免消息队列服务器宕机造成消息丢失，会将成功发送到消息队列的消息存储在消息生产者服务器上，等消息真正被消费者服务器处理后才删除消息。在消息队列服务器宕机后，生产者服务器会选择分布式消息队列服务器集群中的其他服务器发布消息。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("备注：")]),this._v(" 不要认为消息队列只能利用发布-订阅模式工作，只不过在解耦这个特定业务环境下是使用发布-订阅模式的，"),e("strong",[this._v("比如在我们的ActiveMQ消息队列中还有点对点工作模式")]),this._v("，具体的会在后面的文章给大家详细介绍，这一篇文章主要还是让大家对消息队列有一个更透彻的了解。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("这个问题一般会在上一个问题问完之后，紧接着被问到。“使用消息队列会带来什么问题？”这个问题要引起重视，一般我们都会考虑使用消息队列会带来的好处而忽略它带来的问题！")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_10-说说自己对-cap-定理-base-理论的了解"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_10-说说自己对-cap-定理-base-理论的了解","aria-hidden":"true"}},[this._v("#")]),this._v(" 10. 说说自己对 CAP 定理,BASE 理论的了解")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"cap-定理"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#cap-定理","aria-hidden":"true"}},[this._v("#")]),this._v(" CAP 定理")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/24/163912e973ecb93c?w=624&h=471&f=png&s=32984",alt:"CAP定理"}}),this._v("\n在理论计算机科学中，CAP定理（CAP theorem），又被称作布鲁尔定理（Brewer's theorem），它指出对于一个分布式计算系统来说，不可能同时满足以下三点：")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ul",[_("li",[_("strong",[t._v("一致性（Consistence）")]),t._v(" :所有节点访问同一份最新的数据副本")]),t._v(" "),_("li",[_("strong",[t._v("可用性（Availability）")]),t._v(":每次请求都能获取到非错的响应——但是不保证获取的数据为最新数据")]),t._v(" "),_("li",[_("strong",[t._v("分区容错性（Partition tolerance）")]),t._v(" : 分布式系统在遇到某节点或网络分区故障的时候，仍然能够对外提供满足一致性和可用性的服务。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("注意：不是所谓的3选2（不要被网上大多数文章误导了）:")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("当发生网络分区的时候，如果我们要继续服务，那么强一致性和可用性只能2选1。也就是说当网络分区之后P是前提，决定了P之后才有C和A的选择。也就是说分区容错性（Partition tolerance）我们是必须要实现的。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"base-理论"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#base-理论","aria-hidden":"true"}},[this._v("#")]),this._v(" BASE 理论")])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("p",[_("strong",[t._v("BASE")]),t._v(" 是 "),_("strong",[t._v("Basically Available（基本可用）")]),t._v(" 、"),_("strong",[t._v("Soft-state（软状态）")]),t._v(" 和 "),_("strong",[t._v("Eventually Consistent（最终一致性）")]),t._v(" 三个短语的缩写。BASE理论是对CAP中一致性和可用性权衡的结果，其来源于对大规模互联网系统分布式实践的总结，是基于CAP定理逐步演化而来的，它大大降低了我们对系统的要求。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("BASE理论的核心思想：")]),this._v(" 即使无法做到强一致性，但每个应用都可以根据自身业务特点，采用适当的方式来使系统达到最终一致性。也就是牺牲数据的一致性来满足系统的高可用性，系统中一部分数据不可用或者不一致时，仍需要保持系统整体“主要可用”。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("BASE理论三要素：")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/24/163914806d9e15c6?w=612&h=461&f=png&s=39129",alt:"BASE理论三要素"}})])},function(){var t=this,e=t.$createElement,_=t._self._c||e;return _("ol",[_("li",[_("strong",[t._v("基本可用：")]),t._v(" 基本可用是指分布式系统在出现不可预知故障的时候，允许损失部分可用性。但是，这绝不等价于系统不可用。 比如： "),_("strong",[t._v("①响应时间上的损失")]),t._v(":正常情况下，一个在线搜索引擎需要在0.5秒之内返回给用户相应的查询结果，但由于出现故障，查询结果的响应时间增加了1~2秒；"),_("strong",[t._v("②系统功能上的损失")]),t._v("：正常情况下，在一个电子商务网站上进行购物的时候，消费者几乎能够顺利完成每一笔订单，但是在一些节日大促购物高峰的时候，由于消费者的购物行为激增，为了保护购物系统的稳定性，部分消费者可能会被引导到一个降级页面；")]),t._v(" "),_("li",[_("strong",[t._v("软状态：")]),t._v(" 软状态指允许系统中的数据存在中间状态，并认为该中间状态的存在不会影响系统的整体可用性，即允许系统在不同节点的数据副本之间进行数据同步的过程存在延时；")]),t._v(" "),_("li",[_("strong",[t._v("最终一致性：")]),t._v(" 最终一致性强调的是系统中所有的数据副本，在经过一段时间的同步后，最终能够达到一个一致的状态。因此，最终一致性的本质是需要系统保证最终数据能够达到一致，而不需要实时保证系统数据的强一致性。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"参考"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 参考")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("《大型网站技术架构》")]),this._v(" "),e("li",[this._v("《亿级流量网站架构核心技术》")]),this._v(" "),e("li",[this._v("《Java工程师修炼之道》")]),this._v(" "),e("li",[this._v("https://www.cnblogs.com/puresoul/p/5456855.html")])])}],!1,null,null,null);e.default=s.exports}}]);