(window.webpackJsonp=window.webpackJsonp||[]).push([[82],{225:function(t,e,r){"use strict";r.r(e);var a=r(0),s=Object(a.a)({},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),r("p",[t._v("这部分参考了 《RabbitMQ实战指南》这本书的第 1 章和第 2 章。")]),t._v(" "),t._m(3),t._v(" "),r("p",[t._v("RabbitMQ 是采用 Erlang 语言实现 AMQP(Advanced Message Queuing Protocol，高级消息队列协议）的消息中间件，它最初起源于金融系统，用于在分布式系统中存储转发消息。")]),t._v(" "),r("p",[t._v("RabbitMQ 发展到今天，被越来越多的人认可，这和它在易用性、扩展性、可靠性和高可用性等方面的卓著表现是分不开的。RabbitMQ 的具体特点可以概括为以下几点：")]),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),r("p",[t._v("RabbitMQ 整体上是一个生产者与消费者模型，主要负责接收、存储和转发消息。可以把消息传递的过程想象成：当你将一个包裹送到邮局，邮局会暂存并最终将邮件通过邮递员送到收件人的手上，RabbitMQ就好比由邮局、邮箱和邮递员组成的一个系统。从计算机术语层面来说，RabbitMQ 模型更像是一种交换机模型。")]),t._v(" "),r("p",[t._v("下面再来看看图1—— RabbitMQ 的整体模型架构。")]),t._v(" "),t._m(6),t._v(" "),r("p",[t._v("下面我会一一介绍上图中的一些概念。")]),t._v(" "),t._m(7),t._v(" "),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),r("p",[t._v("Exchange(交换器) 示意图如下：")]),t._v(" "),t._m(14),t._v(" "),t._m(15),t._v(" "),t._m(16),t._v(" "),r("p",[t._v("Binding(绑定) 示意图：")]),t._v(" "),t._m(17),t._v(" "),r("p",[t._v("生产者将消息发送给交换器时，需要一个RoutingKey,当 BindingKey 和 RoutingKey 相匹配时，消息会被路由到对应的队列中。在绑定多个队列到同一个交换器的时候，这些绑定允许使用相同的 BindingKey。BindingKey 并不是在所有的情况下都生效，它依赖于交换器类型，比如fanout类型的交换器就会无视，而是将消息路由到所有绑定到该交换器的队列中。")]),t._v(" "),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),t._m(23),t._v(" "),r("p",[t._v("对于 RabbitMQ 来说，一个 RabbitMQ Broker 可以简单地看作一个 RabbitMQ 服务节点，或者RabbitMQ服务实例。大多数情况下也可以将一个 RabbitMQ Broker 看作一台 RabbitMQ 服务器。")]),t._v(" "),r("p",[t._v("下图展示了生产者将消息存入 RabbitMQ Broker,以及消费者从Broker中消费数据的整个流程。")]),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),t._m(27),t._v(" "),t._m(28),t._v(" "),r("p",[t._v("fanout 类型的Exchange路由规则非常简单，它会把所有发送到该Exchange的消息路由到所有与它绑定的Queue中，不需要做任何判断操作，所以 fanout 类型是所有的交换机类型里面速度最快的。fanout 类型常用来广播消息。")]),t._v(" "),t._m(29),t._v(" "),r("p",[t._v("direct 类型的Exchange路由规则也很简单，它会把消息路由到那些 Bindingkey 与 RoutingKey 完全匹配的 Queue 中。")]),t._v(" "),t._m(30),t._v(" "),r("p",[t._v('以上图为例，如果发送消息的时候设置路由键为“warning”,那么消息会路由到 Queue1 和 Queue2。如果在发送消息的时候设置路由键为"Info”或者"debug”，消息只会路由到Queue2。如果以其他的路由键发送消息，则消息不会路由到这两个队列中。')]),t._v(" "),r("p",[t._v("direct 类型常用在处理有优先级的任务，根据任务的优先级把消息发送到对应的队列，这样可以指派更多的资源去处理高优先级的队列。")]),t._v(" "),t._m(31),t._v(" "),r("p",[t._v("前面讲到direct类型的交换器路由规则是完全匹配 BindingKey 和 RoutingKey ，但是这种严格的匹配方式在很多情况下不能满足实际业务的需求。topic类型的交换器在匹配规则上进行了扩展，它与 direct 类型的交换器相似，也是将消息路由到 BindingKey 和 RoutingKey 相匹配的队列中，但这里的匹配规则有些不同，它约定：")]),t._v(" "),t._m(32),t._v(" "),t._m(33),t._v(" "),r("p",[t._v("以上图为例：")]),t._v(" "),t._m(34),t._v(" "),t._m(35),t._v(" "),r("p",[t._v("headers 类型的交换器不依赖于路由键的匹配规则来路由消息，而是根据发送的消息内容中的 headers 属性进行匹配。在绑定队列和交换器时制定一组键值对，当发送消息到交换器时，RabbitMQ会获取到该消息的 headers（也是一个键值对的形式)'对比其中的键值对是否完全匹配队列和交换器绑定时指定的键值对，如果完全匹配则消息会路由到该队列，否则不会路由到该队列。headers 类型的交换器性能会很差，而且也不实用，基本上不会看到它的存在。")]),t._v(" "),t._m(36),t._v(" "),r("p",[t._v("通过 Docker 安装非常方便，只需要几条命令就好了，我这里是只说一下常规安装方法。")]),t._v(" "),r("p",[t._v("前面提到了 RabbitMQ 是由 Erlang语言编写的，也正因如此，在安装RabbitMQ 之前需要安装 Erlang。")]),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),r("p",[t._v("在官网下载然后上传到 Linux 上或者直接使用下面的命令下载对应的版本。")]),t._v(" "),t._m(39),r("p",[t._v("erlang 官网下载："),r("a",{attrs:{href:"http://www.erlang.org/downloads",target:"_blank",rel:"noopener noreferrer"}},[t._v("http://www.erlang.org/downloads"),r("OutboundLink")],1)]),t._v(" "),t._m(40),t._v(" "),t._m(41),t._m(42),t._v(" "),t._m(43),t._m(44),t._v(" "),t._m(45),t._m(46),t._v(" "),r("p",[t._v("新建一个文件夹")]),t._v(" "),t._m(47),r("p",[t._v("对 erlang 进行安装环境的配置")]),t._v(" "),t._m(48),t._m(49),t._v(" "),t._m(50),t._m(51),t._v(" "),t._m(52),r("p",[t._v("运行下面的语句输出“hello world”")]),t._v(" "),t._m(53),t._m(54),t._v(" "),r("p",[t._v("大功告成，我们的 erlang 已经安装完成。")]),t._v(" "),t._m(55),t._v(" "),t._m(56),r("p",[t._v("追加下列环境变量到文件末尾")]),t._v(" "),t._m(57),t._m(58),t._v(" "),t._m(59),r("p",[t._v("输入 erl 查看 erlang 环境变量是否配置正确")]),t._v(" "),t._m(60),t._m(61),t._v(" "),t._m(62),t._v(" "),t._m(63),t._v(" "),t._m(64),r("p",[t._v("或者直接在官网下载")]),t._v(" "),r("p",[t._v("https://www.rabbitmq.com/install-rpm.html"),r("a",{attrs:{href:"https://www.rabbitmq.com/install-rpm.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("enter link description here"),r("OutboundLink")],1)]),t._v(" "),t._m(65),t._v(" "),t._m(66),r("p",[t._v("紧接着执行：")]),t._v(" "),t._m(67),r("p",[t._v('中途需要你输入"y"才能继续安装。')]),t._v(" "),t._m(68),t._v(" "),t._m(69),t._m(70),t._v(" "),t._m(71),t._m(72),t._v(" "),t._m(73),t._m(74),t._v(" "),t._m(75),t._m(76),t._v(" "),r("p",[t._v("浏览器访问：http://你的ip地址:15672/")]),t._v(" "),r("p",[t._v("默认用户名和密码： guest/guest;但是需要注意的是：guestuest用户只是被容许从localhost访问。官网文档描述如下：")]),t._v(" "),t._m(77),t._m(78),t._v(" "),r("p",[t._v("新建用户并授权")]),t._v(" "),t._m(79),r("p",[t._v("再次访问:http://你的ip地址:15672/ ,输入用户名和密码：root root")]),t._v(" "),t._m(80)])},[function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("a",{attrs:{href:"#%E4%B8%80%E6%96%87%E6%90%9E%E6%87%82-rabbitmq-%E7%9A%84%E9%87%8D%E8%A6%81%E6%A6%82%E5%BF%B5%E4%BB%A5%E5%8F%8A%E5%AE%89%E8%A3%85"}},[t._v("一文搞懂 RabbitMQ 的重要概念以及安装")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E4%B8%80-rabbitmq-%E4%BB%8B%E7%BB%8D"}},[t._v("一 RabbitMQ 介绍")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#11-rabbitmq-%E7%AE%80%E4%BB%8B"}},[t._v("1.1 RabbitMQ 简介")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#12-rabbitmq-%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5"}},[t._v("1.2 RabbitMQ 核心概念")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#121-producer%E7%94%9F%E4%BA%A7%E8%80%85-%E5%92%8C-consumer%E6%B6%88%E8%B4%B9%E8%80%85"}},[t._v("1.2.1 Producer(生产者) 和 Consumer(消费者)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#122-exchange%E4%BA%A4%E6%8D%A2%E5%99%A8"}},[t._v("1.2.2 Exchange(交换器)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#123-queue%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97"}},[t._v("1.2.3 Queue(消息队列)")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#124-broker%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6%E7%9A%84%E6%9C%8D%E5%8A%A1%E8%8A%82%E7%82%B9"}},[t._v("1.2.4 Broker（消息中间件的服务节点）")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#125-exchange-types%E4%BA%A4%E6%8D%A2%E5%99%A8%E7%B1%BB%E5%9E%8B"}},[t._v("1.2.5 Exchange Types(交换器类型)")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#%E2%91%A0-fanout"}},[t._v("① fanout")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E2%91%A1-direct"}},[t._v("② direct")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E2%91%A2-topic"}},[t._v("③ topic")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E2%91%A3-headers%E4%B8%8D%E6%8E%A8%E8%8D%90"}},[t._v("④ headers(不推荐)")])])])])])])])]),t._v(" "),r("li",[r("a",{attrs:{href:"#%E4%BA%8C-%E5%AE%89%E8%A3%85-rabbitmq"}},[t._v("二 安装 RabbitMq")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"#21-%E5%AE%89%E8%A3%85-erlang"}},[t._v("2.1 安装 erlang")])]),t._v(" "),r("li",[r("a",{attrs:{href:"#22-%E5%AE%89%E8%A3%85-rabbitmq"}},[t._v("2.2 安装 RabbitMQ")])])])])])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"一文搞懂-rabbitmq-的重要概念以及安装"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一文搞懂-rabbitmq-的重要概念以及安装","aria-hidden":"true"}},[this._v("#")]),this._v(" 一文搞懂 RabbitMQ 的重要概念以及安装")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"一-rabbitmq-介绍"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#一-rabbitmq-介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" 一 RabbitMQ 介绍")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-1-rabbitmq-简介"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-rabbitmq-简介","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.1 RabbitMQ 简介")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[r("strong",[t._v("可靠性：")]),t._v(" RabbitMQ使用一些机制来保证消息的可靠性，如持久化、传输确认及发布确认等。")]),t._v(" "),r("li",[r("strong",[t._v("灵活的路由：")]),t._v(" 在消息进入队列之前，通过交换器来路由消息。对于典型的路由功能，RabbitMQ 己经提供了一些内置的交换器来实现。针对更复杂的路由功能，可以将多个交换器绑定在一起，也可以通过插件机制来实现自己的交换器。这个后面会在我们将 RabbitMQ 核心概念的时候详细介绍到。")]),t._v(" "),r("li",[r("strong",[t._v("扩展性：")]),t._v(" 多个RabbitMQ节点可以组成一个集群，也可以根据实际业务情况动态地扩展集群中节点。")]),t._v(" "),r("li",[r("strong",[t._v("高可用性：")]),t._v(" 队列可以在集群中的机器上设置镜像，使得在部分节点出现问题的情况下队列仍然可用。")]),t._v(" "),r("li",[r("strong",[t._v("支持多种协议：")]),t._v(" RabbitMQ 除了原生支持 AMQP 协议，还支持 STOMP、MQTT 等多种消息中间件协议。")]),t._v(" "),r("li",[r("strong",[t._v("多语言客户端：")]),t._v(" RabbitMQ几乎支持所有常用语言，比如 Java、Python、Ruby、PHP、C#、JavaScript等。")]),t._v(" "),r("li",[r("strong",[t._v("易用的管理界面：")]),t._v(" RabbitMQ提供了一个易用的用户界面，使得用户可以监控和管理消息、集群中的节点等。在安装 RabbitMQ 的时候会介绍到，安装好 RabbitMQ 就自带管理界面。")]),t._v(" "),r("li",[r("strong",[t._v("插件机制：")]),t._v(" RabbitMQ 提供了许多插件，以实现从多方面进行扩展，当然也可以编写自己的插件。感觉这个有点类似 Dubbo 的 SPI机制。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_1-2-rabbitmq-核心概念"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-rabbitmq-核心概念","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2 RabbitMQ 核心概念")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/96388546.jpg",alt:"图1-RabbitMQ 的整体模型架构"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-2-1-producer-生产者-和-consumer-消费者"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-1-producer-生产者-和-consumer-消费者","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2.1 Producer(生产者) 和 Consumer(消费者)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[e("strong",[this._v("Producer(生产者)")]),this._v(" :生产消息的一方（邮件投递者）")]),this._v(" "),e("li",[e("strong",[this._v("Consumer(消费者)")]),this._v(" :消费消息的一方（邮件收件人）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("消息一般由 2 部分组成："),e("strong",[this._v("消息头")]),this._v("（或者说是标签 Label）和 "),e("strong",[this._v("消息体")]),this._v("。消息体也可以称为 payLoad ,消息体是不透明的，而消息头则由一系列的可选属性组成，这些属性包括 routing-key（路由键）、priority（相对于其他消息的优先权）、delivery-mode（指出该消息可能需要持久性存储）等。生产者把消息交由 RabbitMQ 后，RabbitMQ 会根据消息头把消息发送给感兴趣的 Consumer(消费者)。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-2-2-exchange-交换器"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-2-exchange-交换器","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2.2 Exchange(交换器)")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("在 RabbitMQ 中，消息并不是直接被投递到 "),r("strong",[t._v("Queue(消息队列)")]),t._v(" 中的，中间还必须经过 "),r("strong",[t._v("Exchange(交换器)")]),t._v(" 这一层，"),r("strong",[t._v("Exchange(交换器)")]),t._v(" 会把我们的消息分配到对应的 "),r("strong",[t._v("Queue(消息队列)")]),t._v(" 中。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Exchange(交换器)")]),this._v(" 用来接收生产者发送的消息并将这些消息路由给服务器中的队列中，如果路由不到，或许会返回给 "),e("strong",[this._v("Producer(生产者)")]),this._v(" ，或许会被直接丢弃掉 。这里可以将RabbitMQ中的交换器看作一个简单的实体。")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[r("strong",[t._v("RabbitMQ 的 Exchange(交换器) 有4种类型，不同的类型对应着不同的路由策略")]),t._v("："),r("strong",[t._v("direct(默认)")]),t._v("，"),r("strong",[t._v("fanout")]),t._v(", "),r("strong",[t._v("topic")]),t._v(", 和 "),r("strong",[t._v("headers")]),t._v("，不同类型的Exchange转发消息的策略有所区别。这个会在介绍 "),r("strong",[t._v("Exchange Types(交换器类型)")]),t._v(" 的时候介绍到。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/24007899.jpg",alt:"Exchange(交换器) 示意图"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("生产者将消息发给交换器的时候，一般会指定一个 "),e("strong",[this._v("RoutingKey(路由键)")]),this._v("，用来指定这个消息的路由规则，而这个 "),e("strong",[this._v("RoutingKey 需要与交换器类型和绑定键(BindingKey)联合使用才能最终生效")]),this._v("。")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("RabbitMQ 中通过 "),r("strong",[t._v("Binding(绑定)")]),t._v(" 将 "),r("strong",[t._v("Exchange(交换器)")]),t._v(" 与 "),r("strong",[t._v("Queue(消息队列)")]),t._v(" 关联起来，在绑定的时候一般会指定一个 "),r("strong",[t._v("BindingKey(绑定建)")]),t._v(" ,这样 RabbitMQ 就知道如何正确将消息路由到队列了,如下图所示。一个绑定就是基于路由键将交换器和消息队列连接起来的路由规则，所以可以将交换器理解成一个由绑定构成的路由表。Exchange 和 Queue 的绑定可以是多对多的关系。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/70553134.jpg",alt:"Binding(绑定) 示意图"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-2-3-queue-消息队列"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-3-queue-消息队列","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2.3 Queue(消息队列)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("Queue(消息队列)")]),this._v(" 用来保存消息直到发送给消费者。它是消息的容器，也是消息的终点。一个消息可投入一个或多个队列。消息一直在队列里面，等待消费者连接到这个队列将其取走。")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[r("strong",[t._v("RabbitMQ")]),t._v(" 中消息只能存储在 "),r("strong",[t._v("队列")]),t._v(" 中，这一点和 "),r("strong",[t._v("Kafka")]),t._v(" 这种消息中间件相反。Kafka 将消息存储在 "),r("strong",[t._v("topic（主题）")]),t._v(" 这个逻辑层面，而相对应的队列逻辑只是topic实际存储文件中的位移标识。 RabbitMQ 的生产者生产消息并最终投递到队列中，消费者可以从队列中获取消息并消费。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("多个消费者可以订阅同一个队列")]),this._v("，这时队列中的消息会被平均分摊（Round-Robin，即轮询）给多个消费者进行处理，而不是每个消费者都收到所有的消息并处理，这样避免的消息被重复消费。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("RabbitMQ")]),this._v(" 不支持队列层面的广播消费,如果有广播消费的需求，需要在其上进行二次开发,这样会很麻烦，不建议这样做。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-2-4-broker（消息中间件的服务节点）"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-4-broker（消息中间件的服务节点）","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2.4 Broker（消息中间件的服务节点）")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/67952922.jpg",alt:"消息队列的运转过程"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("这样图1中的一些关于 RabbitMQ 的基本概念我们就介绍完毕了，下面再来介绍一下 "),e("strong",[this._v("Exchange Types(交换器类型)")]),this._v(" 。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"_1-2-5-exchange-types-交换器类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-5-exchange-types-交换器类型","aria-hidden":"true"}},[this._v("#")]),this._v(" 1.2.5 Exchange Types(交换器类型)")])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("p",[t._v("RabbitMQ 常用的 Exchange Type 有 "),r("strong",[t._v("fanout")]),t._v("、"),r("strong",[t._v("direct")]),t._v("、"),r("strong",[t._v("topic")]),t._v("、"),r("strong",[t._v("headers")]),t._v(" 这四种（AMQP规范里还提到两种 Exchange Type，分别为 system 与 自定义，这里不予以描述）。")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"①-fanout"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#①-fanout","aria-hidden":"true"}},[this._v("#")]),this._v(" ① fanout")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"②-direct"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#②-direct","aria-hidden":"true"}},[this._v("#")]),this._v(" ② direct")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/37008021.jpg",alt:"direct 类型交换器"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"③-topic"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#③-topic","aria-hidden":"true"}},[this._v("#")]),this._v(" ③ topic")])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("RoutingKey 为一个点号“．”分隔的字符串（被点号“．”分隔开的每一段独立的字符串称为一个单词），如 “com.rabbitmq.client”、“java.util.concurrent”、“com.hidden.client”;")]),this._v(" "),e("li",[this._v("BindingKey 和 RoutingKey 一样也是点号“．”分隔的字符串；")]),this._v(" "),e("li",[this._v("BindingKey 中可以存在两种特殊字符串“*”和“#”，用于做模糊匹配，其中“#”用于匹配一个单词，“#”用于匹配多规格单词(可以是零个)。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-16/73843.jpg",alt:"topic 类型交换器"}})])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ul",[r("li",[t._v("路由键为 “com.rabbitmq.client” 的消息会同时路由到 Queuel 和 Queue2;")]),t._v(" "),r("li",[t._v("路由键为 “com.hidden.client” 的消息只会路由到 Queue2 中；")]),t._v(" "),r("li",[t._v("路由键为 “com.hidden.demo” 的消息只会路由到 Queue2 中；")]),t._v(" "),r("li",[t._v("路由键为 “java.rabbitmq.demo” 的消息只会路由到Queuel中；")]),t._v(" "),r("li",[t._v("路由键为 “java.util.concurrent” 的消息将会被丢弃或者返回给生产者（需要设置 mandatory 参数），因为它没有匹配任何路由键。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h5",{attrs:{id:"④-headers-不推荐"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#④-headers-不推荐","aria-hidden":"true"}},[this._v("#")]),this._v(" ④ headers(不推荐)")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h2",{attrs:{id:"二-安装-rabbitmq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#二-安装-rabbitmq","aria-hidden":"true"}},[this._v("#")]),this._v(" 二 安装 RabbitMq")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-1-安装-erlang"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-安装-erlang","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.1 安装 erlang")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("1 下载 erlang 安装包")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb local]#wget http://erlang.org/download/otp_src_19.3.tar.gz\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("2 解压 erlang 安装包")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb local]#tar -xvzf otp_src_19.3.tar.gz\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("3 删除 erlang 安装包")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb local]#rm -rf otp_src_19.3.tar.gz\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("4 安装 erlang 的依赖工具")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb local]#yum -y install make gcc gcc-c++ kernel-devel m4 ncurses-devel openssl-devel unixODBC-devel\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("5 进入erlang 安装包解压文件对 erlang 进行安装环境的配置")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb local]# mkdir erlang\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb otp_src_19.3]# \n./configure --prefix=/usr/local/erlang --without-javac\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("6 编译安装")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb otp_src_19.3]# \nmake && make install\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("7 验证一下 erlang 是否安装成功了")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb otp_src_19.3]# ./bin/erl\n")])])])},function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("div",{staticClass:"language-erlang extra-class"},[r("pre",{pre:!0,attrs:{class:"language-erlang"}},[r("code",[t._v(" "),r("span",{pre:!0,attrs:{class:"token atom"}},[t._v("io")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello world~n"')]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-12/49570541.jpg",alt:"输出“hello world”"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("8 配置  erlang 环境变量")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb etc]# vim profile\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("#erlang\nERL_HOME=/usr/local/erlang\nPATH=$ERL_HOME/bin:$PATH\nexport ERL_HOME PATH\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[this._v("运行下列命令使配置文件"),e("code",[this._v("profile")]),this._v("生效")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb etc]# source /etc/profile\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("[root@SnailClimb etc]# erl\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-12/62504246.jpg",alt:"输入 erl 查看 erlang 环境变量是否配置正确"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"_2-2-安装-rabbitmq"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-安装-rabbitmq","aria-hidden":"true"}},[this._v("#")]),this._v(" 2.2 安装 RabbitMQ")])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("1. 下载rpm")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("wget https://www.rabbitmq.com/releases/rabbitmq-server/v3.6.8/rabbitmq-server-3.6.8-1.el7.noarch.rpm\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("2. 安装rpm")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("rpm --import https://www.rabbitmq.com/rabbitmq-release-signing-key.asc\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("yum install rabbitmq-server-3.6.8-1.el7.noarch.rpm\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("3 开启 web 管理插件")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("rabbitmq-plugins enable rabbitmq_management\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("4 设置开机启动")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("chkconfig rabbitmq-server on\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("4. 启动服务")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("service rabbitmq-server start\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("5. 查看服务状态")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("service rabbitmq-server status\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("6. 访问 RabbitMQ 控制台")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v("“guest” user can only connect via localhost\n")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("strong",[this._v("解决远程访问 RabbitMQ 远程访问密码错误")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language-shell extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('[root@SnailClimb rabbitmq]# rabbitmqctl add_user root root\nCreating user "root" ...\n[root@SnailClimb rabbitmq]# rabbitmqctl set_user_tags root administrator\n\nSetting tags for user "root" to [administrator] ...\n[root@SnailClimb rabbitmq]# \n[root@SnailClimb rabbitmq]# rabbitmqctl set_permissions -p / root ".*" ".*" ".*"\nSetting permissions for user "root" in vhost "/" ...\n\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("p",[e("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-12/45835332.jpg",alt:"RabbitMQ控制台"}})])}],!1,null,null,null);e.default=s.exports}}]);