{"remainingRequest":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/elegant-code.md?vue&type=template&id=2d6693da&","dependencies":[{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/elegant-code.md","mtime":1549463072799},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><p>代码怎么写？怎样才能写出更优雅的代码？\n<!-- more -->\n最近领导review了下我的代码，顿时觉得自己写的代码简直就是一坨翔，因此总结一些好的写码方式，以此共勉！</p>\n<h2 id=\"_1-函数优化（函数是js的一等公民）\"><a class=\"header-anchor\" href=\"#_1-函数优化（函数是js的一等公民）\" aria-hidden=\"true\">#</a> 1. 函数优化（函数是js的一等公民）</h2>\n<ol>\n<li>善用<strong>纯函数</strong></li>\n</ol>\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">概念：</p>\n<p>一个函数的返回结果只依赖于它的参数，并且在执行过程里面没有副作用，我们就把这个函数叫做纯函数。</p>\n</div>\n<ol start=\"2\">\n<li>尽量减少<strong>参数</strong></li>\n</ol>\n<p>保持函数的单一性，避免副作用，可以使用高阶函数。</p>\n<h2 id=\"_2-多用配置结构\"><a class=\"header-anchor\" href=\"#_2-多用配置结构\" aria-hidden=\"true\">#</a> 2. 多用配置结构</h2>\n<p>json具有天然的key-value配置属性，比if-else的性能要高，比switch更优雅（性能相近）。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> dateMethods <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">Y</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'FullYear'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">M</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Month'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token constant\">D</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Date'</span><span class=\"token punctuation\">,</span>\n  h<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hours'</span><span class=\"token punctuation\">,</span>\n  m<span class=\"token punctuation\">:</span> <span class=\"token string\">'Minutes'</span><span class=\"token punctuation\">,</span>\n  s<span class=\"token punctuation\">:</span> <span class=\"token string\">'Seconds'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Object map</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseExpires1</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> expires <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> lastCh <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> method <span class=\"token operator\">=</span> dateMethods<span class=\"token punctuation\">[</span>lastCh<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    expires<span class=\"token punctuation\">[</span><span class=\"token string\">'set'</span> <span class=\"token operator\">+</span> method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>expires<span class=\"token punctuation\">[</span><span class=\"token string\">'get'</span> <span class=\"token operator\">+</span> method<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    expires <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> expires<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Switch style</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseExpires2</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> expires <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> lastCh <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>lastCh<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'Y'</span><span class=\"token punctuation\">:</span> expires<span class=\"token punctuation\">.</span><span class=\"token function\">setFullYear</span><span class=\"token punctuation\">(</span>expires<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'M'</span><span class=\"token punctuation\">:</span> expires<span class=\"token punctuation\">.</span><span class=\"token function\">setMonth</span><span class=\"token punctuation\">(</span>expires<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'D'</span><span class=\"token punctuation\">:</span> expires<span class=\"token punctuation\">.</span><span class=\"token function\">setDate</span><span class=\"token punctuation\">(</span>expires<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'h'</span><span class=\"token punctuation\">:</span> expires<span class=\"token punctuation\">.</span><span class=\"token function\">setHours</span><span class=\"token punctuation\">(</span>expires<span class=\"token punctuation\">.</span><span class=\"token function\">getHours</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'m'</span><span class=\"token punctuation\">:</span> expires<span class=\"token punctuation\">.</span><span class=\"token function\">setMinutes</span><span class=\"token punctuation\">(</span>expires<span class=\"token punctuation\">.</span><span class=\"token function\">getMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">:</span> expires<span class=\"token punctuation\">.</span><span class=\"token function\">setSeconds</span><span class=\"token punctuation\">(</span>expires<span class=\"token punctuation\">.</span><span class=\"token function\">getSeconds</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token punctuation\">:</span> expires <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> expires<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'switch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">parseExpires2</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ss'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'switch'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// switch: 0.119873046875ms</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">time</span><span class=\"token punctuation\">(</span><span class=\"token string\">'map'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">parseExpires1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ss'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">timeEnd</span><span class=\"token punctuation\">(</span><span class=\"token string\">'map'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// map: 0.0927734375ms</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_3-抽象方法\"><a class=\"header-anchor\" href=\"#_3-抽象方法\" aria-hidden=\"true\">#</a> 3. 抽象方法</h2>\n<p>一个方法尽量只干一件事，把具有共同特征的逻辑抽离出来写一个方法，可以通过参数进行重载，做到灵活可复用。</p>\n<h2 id=\"_4-多用return\"><a class=\"header-anchor\" href=\"#_4-多用return\" aria-hidden=\"true\">#</a> 4. 多用return</h2>\n<ol>\n<li>逆向思维可以很好的进行return，逻辑条理，避免执行无用代码。</li>\n</ol>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>loading<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><ol start=\"2\">\n<li>避免超长代码</li>\n</ol>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token operator\">...</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">)</span><span class=\"token operator\">...</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_5-合理注释\"><a class=\"header-anchor\" href=\"#_5-合理注释\" aria-hidden=\"true\">#</a> 5. 合理注释</h2>\n<p>尤其是复杂的逻辑之前要加合理注释，提高可读性和可维护性。</p>\n<h2 id=\"_6-慎用if-else\"><a class=\"header-anchor\" href=\"#_6-慎用if-else\" aria-hidden=\"true\">#</a> 6. 慎用if else</h2>\n<p>结合return考虑，写的多了看到if-else总是感觉不爽，可以想办法重构掉,例如三元表达式。</p>\n<h2 id=\"_7-命名即思维\"><a class=\"header-anchor\" href=\"#_7-命名即思维\" aria-hidden=\"true\">#</a> 7. 命名即思维</h2>\n<p>代码中的命名应该做到见名知意，好的命名可以事半功倍，阅读代码和维护代码都很方便。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 方法名以动词开头，比如 </span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 布尔值以is开头</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isEven</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 驼峰大小写和下划线不要混用，比如</span>\nwhatTheHell和what_the_hell\n<span class=\"token comment\">// 下划线只有在私有对象属性时使用</span>\n<span class=\"token comment\">// 方法内部变量尽可能短</span>\n<span class=\"token comment\">// eslint现已规定必须使用驼峰来命名变量</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_8-去除重复代码\"><a class=\"header-anchor\" href=\"#_8-去除重复代码\" aria-hidden=\"true\">#</a> 8. 去除重复代码</h2>\n<p>重复代码在 Bad Smell 中排在第一位，所以，竭尽你的全力去避免重复代码。因为它意味着当你需要修改一些逻辑时会有多个地方需要修改。重复代码通常是因为两个或多个稍微不同的东西，它们共享大部分，但是它们的不同之处迫使你使用两个或更多独立的函数来处理大部分相同的东西。移除重复代码意味着创建一个可以处理这些不同之处的抽象的函数/模块/类。</p>\n<h2 id=\"_9-善用babel和eslint\"><a class=\"header-anchor\" href=\"#_9-善用babel和eslint\" aria-hidden=\"true\">#</a> 9. 善用Babel和ESLint</h2>\n<p>ESLint可以很好的规范代码，强制遵守一些规范，有了Babel，可以大胆的使用ES6，让代码变得更简洁。</p>\n<h2 id=\"_10-善用-try-catch\"><a class=\"header-anchor\" href=\"#_10-善用-try-catch\" aria-hidden=\"true\">#</a> 10. 善用 try{} catch {}</h2>\n<p>eg:服务端经常会返回一些数据需要JSON.parse()处理一下，我们最终想要json格式的数据。</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// null</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Uncaught SyntaxError: Unexpected token o in JSON at position 1</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// Uncaught SyntaxError: Unexpected end of JSON input</span>\n<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// {}</span>\n\n<span class=\"token comment\">// 对于不确定的数据最好利用try...catch来处理，一旦报错，就会影响之后的代码执行，后果严重；</span>\n<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">err</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> \n<span class=\"token comment\">// SyntaxError: Unexpected token o in JSON at position 1</span>\n<span class=\"token comment\">// at JSON.parse (&lt;anonymous>)</span>\n<span class=\"token comment\">// at &lt;anonymous>:2:7</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_10-code-review\"><a class=\"header-anchor\" href=\"#_10-code-review\" aria-hidden=\"true\">#</a> 10. Code Review</h2>\n<p>找领导同事帮你Code Review，这是学习经验、共同提高最快的办法。</p>\n<h2 id=\"_11-强烈建议看一下《代码大全》、《javascript设计模式》-等书\"><a class=\"header-anchor\" href=\"#_11-强烈建议看一下《代码大全》、《javascript设计模式》-等书\" aria-hidden=\"true\">#</a> 11. 强烈建议看一下《代码大全》、《JavaScript设计模式》 等书</h2>\n<p>学习前人留下的经验，可以使自己少走弯路，进步更快。</p>\n<h3 id=\"有经验的可以分享下，欢迎评论！\"><a class=\"header-anchor\" href=\"#有经验的可以分享下，欢迎评论！\" aria-hidden=\"true\">#</a> <code>有经验的可以分享下，欢迎评论！</code></h3>\n</div>\n",null]}