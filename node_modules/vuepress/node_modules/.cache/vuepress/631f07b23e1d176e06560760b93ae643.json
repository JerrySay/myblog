{"remainingRequest":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/node-study.md?vue&type=template&id=1b6feb38&","dependencies":[{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/node-study.md","mtime":1549463072833},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><p>总结一些 Node 的学习笔记。。。\n<!-- more --></p>\n<h2 id=\"_1-请求头中content-type的常用类型\"><a class=\"header-anchor\" href=\"#_1-请求头中content-type的常用类型\" aria-hidden=\"true\">#</a> 1. 请求头中Content-Type的常用类型</h2>\n<blockquote>\n<p>在http协议消息头中，使用Content-Type来表示具体请求中的媒体类型信息。</p>\n</blockquote>\n<h3 id=\"常见的媒体格式类型如下：\"><a class=\"header-anchor\" href=\"#常见的媒体格式类型如下：\" aria-hidden=\"true\">#</a> 常见的媒体格式类型如下：</h3>\n<ul>\n<li>text/html  ( HTML格式)</li>\n<li>text/plain  (纯文本格式  )</li>\n<li>text/xml  (  XML格式)</li>\n<li>image/gif  (gif图片格式)</li>\n<li>image/jpeg  (jpg图片格式)</li>\n<li>image/png (png图片格式)</li>\n</ul>\n<h3 id=\"以application开头的媒体格式类型：\"><a class=\"header-anchor\" href=\"#以application开头的媒体格式类型：\" aria-hidden=\"true\">#</a> 以application开头的媒体格式类型：</h3>\n<ul>\n<li>application/xhtml+xml      (XHTML格式)</li>\n<li>application/xml            (XML数据格式)</li>\n<li>application/atom+xml       (Atom XML聚合格式)</li>\n<li>application/json           (JSON数据格式)</li>\n<li>application/pdf            (pdf格式)</li>\n<li>application/msword         (Word文档格式)</li>\n<li>application/octet-stream   （二进制流数据如常见的文件下载）</li>\n<li>application/x-www-form-urlencoded  （表单默认的提交数据的格式）</li>\n</ul>\n<h3 id=\"另外一种常见的媒体格式是上传文件之时使用的：\"><a class=\"header-anchor\" href=\"#另外一种常见的媒体格式是上传文件之时使用的：\" aria-hidden=\"true\">#</a> 另外一种常见的媒体格式是上传文件之时使用的：</h3>\n<ul>\n<li>multipart/form-data  (需要在表单中进行文件上传时，就需要使用该格式)</li>\n</ul>\n<h2 id=\"_2-创建子进程的方法\"><a class=\"header-anchor\" href=\"#_2-创建子进程的方法\" aria-hidden=\"true\">#</a> 2. 创建子进程的方法</h2>\n<blockquote>\n<p>child_process模块给予node可以随意创建子进程的能力，它提供了四个方法用于创建子进程。</p>\n</blockquote>\n<ul>\n<li>spawn() : 启动一个子进程来执行命令；</li>\n<li>exec() : 启动一个子进程来执行命令，与spawn不同的是其接口不同，它有一个回调函数获取子进程的状况；</li>\n<li>execFile() : 启动一个子进程来执行可执行文件；</li>\n<li>fork() : 与spawn类似，不同点在于它创建的子进程只需要指定要执行的JavaScript文件模块即可；</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> cp <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'child_process'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncp<span class=\"token punctuation\">.</span><span class=\"token function\">spawn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'work.js'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncp<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'node work.js'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// doSomeThing</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncp<span class=\"token punctuation\">.</span><span class=\"token function\">execFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'work.js'</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> stdout<span class=\"token punctuation\">,</span> stderr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// doSomeThing</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ncp<span class=\"token punctuation\">.</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./work.js'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"warning custom-block\"><p class=\"custom-block-title\">差异：</p>\n<p>spawn与exec/execFile不同的是，后两者创建时可以指定timeout属性设置超时时间，一旦创建的进程运行超过设定时间将会被杀死；</p>\n<p>exec与execFile不同的是，exec适合执行已有的指令，execFile适合执行文件；</p>\n<p>这里的可执行文件是指可以直接执行的文件，如果是JavaScript文件通过execFile()运行时，它的首行内容必须添加如下代码：\n<strong>#!/usr/bin/env node</strong></p>\n</div>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">类型</th>\n<th style=\"text-align:center\">回调</th>\n<th style=\"text-align:center\">进程类型</th>\n<th style=\"text-align:center\">执行类型</th>\n<th style=\"text-align:center\">可设置超时</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">spawn</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">任意</td>\n<td style=\"text-align:center\">命令</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">exec</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">任意</td>\n<td style=\"text-align:center\">命令</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">execFile</td>\n<td style=\"text-align:center\">✅</td>\n<td style=\"text-align:center\">任意</td>\n<td style=\"text-align:center\">可执行文件</td>\n<td style=\"text-align:center\">✅</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">spawn</td>\n<td style=\"text-align:center\">❌</td>\n<td style=\"text-align:center\">Node</td>\n<td style=\"text-align:center\">JavaScript文件</td>\n<td style=\"text-align:center\">❌</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"_3-写入文件\"><a class=\"header-anchor\" href=\"#_3-写入文件\" aria-hidden=\"true\">#</a> 3. 写入文件</h2>\n<blockquote>\n<p>fs.writeFile(file, data[, options], callback)</p>\n</blockquote>\n<p>参数说明：</p>\n<ul>\n<li>file - 文件名或文件描述符</li>\n<li>data - 要写入文件的数据，可以是 String(字符串) 或 Buffer(流) 对象</li>\n<li>options - 该参数是一个对象，包含 {encoding, mode, flag}。默认编码为 utf8, 模式为 0666 ， flag 为 'w'，*如果是一个字符串，则它指定了字符编码</li>\n<li>callback - 回调函数</li>\n<li>以追加模式往README.me写入字符串Hello Node.js</li>\n</ul>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>fs<span class=\"token punctuation\">.</span><span class=\"token function\">writeFile</span><span class=\"token punctuation\">(</span><span class=\"token string\">'README.md'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Hello Node.js'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>flag<span class=\"token punctuation\">:</span> <span class=\"token string\">'a+'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> err\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'It\\'s saved!'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这里我们介绍下flags ：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Flag</th>\n<th style=\"text-align:center\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">r</td>\n<td style=\"text-align:center\">以读取模式打开文件。如果文件不存在抛出异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">r+</td>\n<td style=\"text-align:center\">以读写模式打开文件。如果文件不存在抛出异常。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rs</td>\n<td style=\"text-align:center\">以同步的方式读取文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">rs+</td>\n<td style=\"text-align:center\">以同步的方式读取和写入文件。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w</td>\n<td style=\"text-align:center\">以写入模式打开文件，如果文件不存在则创建。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wx</td>\n<td style=\"text-align:center\">类似 'w'，但是如果文件路径存在，则文件写入失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">w+</td>\n<td style=\"text-align:center\">以读写模式打开文件，如果文件不存在则创建。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">wx+</td>\n<td style=\"text-align:center\">类似 'w+'， 但是如果文件路径存在，则文件读写失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a</td>\n<td style=\"text-align:center\">以追加模式打开文件，如果文件不存在则创建。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ax</td>\n<td style=\"text-align:center\">类似 'a'， 但是如果文件路径存在，则文件追加失败。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">a+</td>\n<td style=\"text-align:center\">以读取追加模式打开文件，如果文件不存在则创建。</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">ax+</td>\n<td style=\"text-align:center\">类似 'a+'， 但是如果文件路径存在，则文件读取追加失败。</td>\n</tr>\n</tbody>\n</table>\n</div>\n",null]}