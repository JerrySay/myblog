{"remainingRequest":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/node-code-standard.md?vue&type=template&id=5475ede4&","dependencies":[{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/node-code-standard.md","mtime":1549463072808},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><p>记录一些简单的 Node 编码规范（本文来源于深入浅出nodejs）。。。</p>\n<!-- more -->\n<blockquote>\n<p>JavaScript 作为一门编程语言，在语法上可谓是最为灵活的语言了。有人喜欢它的灵活，也有人讨厌它的混乱。无论它的灵活也好，混乱也罢，都离不开其诞生的历史。早年的 JavaScript 编写十分混乱。它的灵活性和容忍度都非常高，使得开发者可以毫无顾忌地编码，最终导致它在一定程度上臭名昭著。尽管 JavaScript 规范已经相当成熟，利用 JSLint 能够解决大部分问题，但是随着 Node 的流行，带来了一些新的变化，这些需要引起我们注意。</p>\n</blockquote>\n<h2 id=\"_1-空格与格式\"><a class=\"header-anchor\" href=\"#_1-空格与格式\" aria-hidden=\"true\">#</a> 1. 空格与格式</h2>\n<h4 id=\"_1-缩进\"><a class=\"header-anchor\" href=\"#_1-缩进\" aria-hidden=\"true\">#</a> 1. 缩进</h4>\n<p>采用 2 个空格缩进，而不是 tab 缩进。 空格在编辑器中与字符是等宽的，而 tab 可能因编辑器的设置不同。2 个空格会让代码看起来更紧凑、明快。</p>\n<h4 id=\"_2-变量声明\"><a class=\"header-anchor\" href=\"#_2-变量声明\" aria-hidden=\"true\">#</a> 2. 变量声明</h4>\n<p>永远用 var 声明变量，不加 var 时会将其变成全局变量，这样可能会意外污染上下文，或是被意外污染。 在 ECMAScript 5 的 strict 模式下，未声明的变量将会直接抛出 ReferenceError 异常。</p>\n<p>需要说明的是，每行声明都应该带上 var，而不是只有一个 var，示例代码如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"assert\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> fork <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child_process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> EventEmitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"events\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>EventEmitter<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>错误示例如下所示：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> assert <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"assert\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  fork <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"child_process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fork<span class=\"token punctuation\">,</span>\n  net <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"net\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  EventEmitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"events\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>EventEmitter<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_3-空格\"><a class=\"header-anchor\" href=\"#_3-空格\" aria-hidden=\"true\">#</a> 3. 空格</h4>\n<p>在操作符前后需要加空格，比如+、-、*、%、=等操作符前后都应该存在一个空格，示例如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token operator\">+</span>baz<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>错误的示例如下所示：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span> <span class=\"token operator\">+</span> baz<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>此外，在小括号前后应该存在空格，如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>错误的示例如下所示：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_4-单双引号的使用\"><a class=\"header-anchor\" href=\"#_4-单双引号的使用\" aria-hidden=\"true\">#</a> 4. 单双引号的使用</h4>\n<p>由于双引号在别的场景下使用较多，在 Node 中使用字符串时尽量使用单引号，这样无需转义，如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> html <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;a href=\"http://cnodejs.org\">CNode&lt;/a>'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>而在 JSON 中，严格的规范是要求字符串用双引号，内容中出现双引号时，需要转义。</p>\n<h4 id=\"_5-大括号的位置\"><a class=\"header-anchor\" href=\"#_5-大括号的位置\" aria-hidden=\"true\">#</a> 5. 大括号的位置</h4>\n<p>一般情况下，大括号无需另起一行，如</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>错误的示例如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_6-逗号\"><a class=\"header-anchor\" href=\"#_6-逗号\" aria-hidden=\"true\">#</a> 6. 逗号</h4>\n<p>逗号用于变量声明的分隔或是元素的分隔。如果逗号不在行结尾，前面需要一个空格。此外，逗号不允许出现在行首，比如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>\n  bar <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或是</span>\n<span class=\"token keyword\">var</span> hello <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token string\">\"world\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或是</span>\n<span class=\"token keyword\">var</span> world <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>错误示例如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span>\n<span class=\"token punctuation\">,</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">\"world\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或是</span>\n<span class=\"token keyword\">var</span> hello <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">\"hello\"</span>\n  <span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 或是</span>\n<span class=\"token keyword\">var</span> world <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">\"hello\"</span>\n  <span class=\"token punctuation\">,</span> <span class=\"token string\">\"world\"</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_7-分号\"><a class=\"header-anchor\" href=\"#_7-分号\" aria-hidden=\"true\">#</a> 7. 分号</h4>\n<p>给表达式结尾添加分号。尽管 JavaScript 编译器会自动给行尾添加分号，但还是会带来一些误解，示例如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span>\n    a <span class=\"token operator\">+</span> b\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>将会得到 undefined 的返回值。因为自动加入分号后会变成如下的样子：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>后续的 a + b 将不会执行。</p>\n<p>而如下的代码：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>x <span class=\"token operator\">=</span> <span class=\"token function\">y</span>\n<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>\n\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>执行时会得到：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>x <span class=\"token operator\">=</span> <span class=\"token function\">y</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"warning custom-block\"><p class=\"custom-block-title\">注意⚠️</p>\n<p>由于自动添加分号可能带来未预期的结果，<strong>所以添加上分号有助于避免误会。</strong></p>\n</div>\n<h2 id=\"_2-命名规范\"><a class=\"header-anchor\" href=\"#_2-命名规范\" aria-hidden=\"true\">#</a> 2. 命名规范</h2>\n<blockquote>\n<p>在编码过程中，命名是重头戏。好的命名可以令代码赏心悦目，带来愉悦的阅读享受，令代码具有良好的可维护性。命令的主要范畴有变量、常量、方法、类、文件、包等。</p>\n</blockquote>\n<h4 id=\"_1-变量命名\"><a class=\"header-anchor\" href=\"#_1-变量命名\" aria-hidden=\"true\">#</a> 1. 变量命名</h4>\n<p>变量名都采用小驼峰式命名，即除了第一个单词的首字母不大写外，每个单词的首字母都大写，词与词之间没有任何符号，如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> adminUser <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>错误的示例如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> admin_user <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_2-方法命名\"><a class=\"header-anchor\" href=\"#_2-方法命名\" aria-hidden=\"true\">#</a> 2. 方法命名</h4>\n<p>方法命名与变量命名一样，采用小驼峰式命名。与变量不同的是，方法名尽量采用动词或判断性词汇，如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">getUser</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">isAdmin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nUser<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getInfo</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>错误示例如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">get_user</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> <span class=\"token function-variable function\">is_admin</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nUser<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">get_info</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_3-类命名\"><a class=\"header-anchor\" href=\"#_3-类命名\" aria-hidden=\"true\">#</a> 3. 类命名</h4>\n<p>类名采用大驼峰式命名，即所有单词的首字母都大写，如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> User <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_4-常量命名\"><a class=\"header-anchor\" href=\"#_4-常量命名\" aria-hidden=\"true\">#</a> 4. 常量命名</h4>\n<p>作为常量时，单词的所有字母都大写，并用下划线分割，如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token constant\">PINK_COLOR</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"pink\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_5-文件命名\"><a class=\"header-anchor\" href=\"#_5-文件命名\" aria-hidden=\"true\">#</a> 5. 文件命名</h4>\n<p>命名文件时，请尽量采用下划线分割单词，比如child_process.js和string_decode.js。如果你不想将文件暴露给其他用户，可以约定以下划线开头，如_linklist.js。</p>\n<h4 id=\"_6-包名\"><a class=\"header-anchor\" href=\"#_6-包名\" aria-hidden=\"true\">#</a> 6. 包名</h4>\n<p>也许你有贡献模块并将其打包发布到NPM上。在包名中，尽量不要包含js或node的字样，它是重复的。包名应当适当短且有意义的，如：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_3-比较操作\"><a class=\"header-anchor\" href=\"#_3-比较操作\" aria-hidden=\"true\">#</a> 3. 比较操作</h2>\n<p>在比较操作中，如果是无容忍的场景，请尽量使用===代替==，否则你会遇到下面这样不符合逻辑的结果：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token string\">'0'</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">''</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">'0'</span> <span class=\"token operator\">===</span> <span class=\"token string\">''</span> <span class=\"token comment\">// false</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>此外，当判断容忍假值时，可以无需使用===或==。在下面的代码中，当foo是0、undefined、null、false、''时，都会进入分支：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// some code</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_4-字面量\"><a class=\"header-anchor\" href=\"#_4-字面量\" aria-hidden=\"true\">#</a> 4. 字面量</h2>\n<p>请尽量使用{}、[]代替new Object()、new Array()，不要使用string、bool、number对象类型，即不要调用new String、new Boolean和new Number。</p>\n<h2 id=\"_5-作用域\"><a class=\"header-anchor\" href=\"#_5-作用域\" aria-hidden=\"true\">#</a> 5. 作用域</h2>\n<p>在JavaScript中，需要注意一个关键字和一个方法，它们是with和eval()，容易引起作用域混乱。</p>\n<h4 id=\"_1-慎用with\"><a class=\"header-anchor\" href=\"#_1-慎用with\" aria-hidden=\"true\">#</a> 1. 慎用with</h4>\n<p>示例代码如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">with</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  foo <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>它的结果有可能是如下四种之一：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>obj<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">;</span>\nobj<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> bar<span class=\"token punctuation\">;</span>\nfoo <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>bar<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这些结果取决于它的作用域。如果作用域链上没有导致冲突的变量存在，使用它则是安全的。但在多人合作的项目中，这并不容易保证，所以要慎用with。</p>\n<h4 id=\"_2-慎用eval\"><a class=\"header-anchor\" href=\"#_2-慎用eval\" aria-hidden=\"true\">#</a> 2. 慎用eval()</h4>\n<p>慎用eval()的原因与with相同。如果不影响作用域上已存在的变量，用它是安全的。另外，利用eval()的这个特性，也可以玩出一些好玩的特性来，比如wind.js利用它实现了流程控制，详见第4章。在大多数情况下，基本上轮不到eval()来完成特殊使命。示例代码如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n  bar<span class=\"token punctuation\">:</span> <span class=\"token string\">'world'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> key <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'foo'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> <span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">'(obj.'</span> <span class=\"token operator\">+</span> key <span class=\"token operator\">+</span> <span class=\"token string\">')'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上述代码多出现在新手中，实际只要如下一行代码即可完成：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> value <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_6-数组与对象\"><a class=\"header-anchor\" href=\"#_6-数组与对象\" aria-hidden=\"true\">#</a> 6. 数组与对象</h2>\n<p>在JavaScript中，数组其实也是对象，但是两者在使用时有些细节需要注意。</p>\n<h4 id=\"_1-字面量格式\"><a class=\"header-anchor\" href=\"#_1-字面量格式\" aria-hidden=\"true\">#</a> 1. 字面量格式</h4>\n<p>创建对象或者数组时，注意在结尾用逗号分隔。如果分行，一行只能一个元素，示例代码如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  hello<span class=\"token punctuation\">:</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span>\n  pretty<span class=\"token punctuation\">:</span> <span class=\"token string\">'code'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>错误示例如下所示：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">,</span>\n<span class=\"token string\">'world'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  hello<span class=\"token punctuation\">:</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">,</span> pretty<span class=\"token punctuation\">:</span> <span class=\"token string\">'code'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_2-for-in循环\"><a class=\"header-anchor\" href=\"#_2-for-in循环\" aria-hidden=\"true\">#</a> 2. for in循环</h4>\n<p>使用for in循环时，请对对象使用，不要对数组使用，示例代码如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">[</span><span class=\"token number\">100</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> foo<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>在上述代码中，第一个循环只打印一次，而第二个循环则打印0~100，这并不满足预期值。</p>\n<h4 id=\"_3-不要把数组当做对象使用\"><a class=\"header-anchor\" href=\"#_3-不要把数组当做对象使用\" aria-hidden=\"true\">#</a> 3. 不要把数组当做对象使用</h4>\n<p>尽管在JavaScript内部实现中可以把数组当做对象来使用，如下所示：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nfoo<span class=\"token punctuation\">[</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'world'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这在for in迭代时，会得到所有值：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token keyword\">in</span> foo<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>也许你只是想得到hello而已。</p>\n<h2 id=\"_7-异步\"><a class=\"header-anchor\" href=\"#_7-异步\" aria-hidden=\"true\">#</a> 7. 异步</h2>\n<p>在Node中，异步使用非常广泛并且在实践过程中形成了一些约定，这是以往不曾在意的点。</p>\n<h4 id=\"_1-异步回调函数的第一个参数应该是错误指示\"><a class=\"header-anchor\" href=\"#_1-异步回调函数的第一个参数应该是错误指示\" aria-hidden=\"true\">#</a> 1. 异步回调函数的第一个参数应该是错误指示</h4>\n<p>并不是所有回调函数都需要将第一个参数设计为错误对象。但是一旦涉及异步，将会导致try catch无法捕获到异步回调期的异常。将第一个参数设计为错误对象，告知调用方是一个不错的约定。示例代码如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>这个约定被很多流程控制库所采用。遵循这个约定，可以享受社区流程控制库带来的业务编写便利。</p>\n<h4 id=\"_2-执行传入的回调函数\"><a class=\"header-anchor\" href=\"#_2-执行传入的回调函数\" aria-hidden=\"true\">#</a> 2. 执行传入的回调函数</h4>\n<p>在异步方法中一旦有回调函数传入，就一定要执行它，且不能多次执行。如果不执行，可能造成调用一直等待不结束，多次执行也可能会造成未期望的结果。</p>\n<h2 id=\"_8-类与模块\"><a class=\"header-anchor\" href=\"#_8-类与模块\" aria-hidden=\"true\">#</a> 8. 类与模块</h2>\n<p>关于如何在JavaScript中实现继承，有各种各样的方式，但在Node中我们只推荐一种，那就是类继承的方式。另外，在Node中，如果要将一个类作为一个模块，就需要在意它的导出 方式。</p>\n<h4 id=\"_1-类继承\"><a class=\"header-anchor\" href=\"#_1-类继承\" aria-hidden=\"true\">#</a> 1. 类继承</h4>\n<p>一般情况下，我们采用Node推荐的类继承方式，示例代码如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token function\">Socket</span><span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  stream<span class=\"token punctuation\">.</span>Stream<span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\nutil<span class=\"token punctuation\">.</span><span class=\"token function\">inherits</span><span class=\"token punctuation\">(</span>Socket<span class=\"token punctuation\">,</span> stream<span class=\"token punctuation\">.</span>Stream<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_2-导出\"><a class=\"header-anchor\" href=\"#_2-导出\" aria-hidden=\"true\">#</a> 2. 导出</h4>\n<p>所有供外部调用的方法或变量均需挂载在exports变量上。当需要将文件当做一个类导出时，需要通过如下的方式挂载：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>module<span class=\"token punctuation\">.</span>exprots <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>而不是通过</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>exports <span class=\"token operator\">=</span> Class<span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>私有方法无需因为测试等原因导出给外部，所以无须挂载。</p>\n<h2 id=\"_9-注解规范\"><a class=\"header-anchor\" href=\"#_9-注解规范\" aria-hidden=\"true\">#</a> 9. 注解规范</h2>\n<p>一般情况下，我们会对每个方法编写注释，这里采用dox的推荐注释，示例如下：</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">/**\n\n* Queries some records\n\n* Examples:\n\n* ```\n\n* query('SELECT * FROM table', function (err, data) {\n* // some code\n* });\n* ```\n* @param {String} sql Queries\n* @param {Function} callback Callback\n*/</span>\n\nexports<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">query</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>sql<span class=\"token punctuation\">,</span> callback<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>dox的注释规范源自于JSDoc。可以通过注释生成对应的API文档。</p>\n<h4 id=\"细致的编码规范有很多，有争议的也少，但这并不阻碍我们找到更好的方式来写好代码，也可以给编辑器设置检测工具，或者在版本控制中的hook中设置钩子，如在precommit这样的钩子脚本中，通过在提交时实现代码质量的检查。如果质量不达标，将停止提交。\"><a class=\"header-anchor\" href=\"#细致的编码规范有很多，有争议的也少，但这并不阻碍我们找到更好的方式来写好代码，也可以给编辑器设置检测工具，或者在版本控制中的hook中设置钩子，如在precommit这样的钩子脚本中，通过在提交时实现代码质量的检查。如果质量不达标，将停止提交。\" aria-hidden=\"true\">#</a> <em>细致的编码规范有很多，有争议的也少，但这并不阻碍我们找到更好的方式来写好代码，也可以给编辑器设置检测工具，或者在版本控制中的hook中设置钩子，如在precommit这样的钩子脚本中，通过在提交时实现代码质量的检查。如果质量不达标，将停止提交。</em></h4>\n<h4 id=\"代码质量关乎产品的质量，最容易改进的地方即是编码规范，收效也是最高的，它远比单元测试要容易付诸实践。一旦团队制定了编码规范，就应该严格执行，严格杜绝团队中编码规范拖后腿的现象。\"><a class=\"header-anchor\" href=\"#代码质量关乎产品的质量，最容易改进的地方即是编码规范，收效也是最高的，它远比单元测试要容易付诸实践。一旦团队制定了编码规范，就应该严格执行，严格杜绝团队中编码规范拖后腿的现象。\" aria-hidden=\"true\">#</a> <em>代码质量关乎产品的质量，最容易改进的地方即是编码规范，收效也是最高的，它远比单元测试要容易付诸实践。一旦团队制定了编码规范，就应该严格执行，严格杜绝团队中编码规范拖后腿的现象。</em></h4>\n<h4 id=\"如果你还采用非编译式javascript来编写你的应用，请记住这些编码规范。尽管因为历史原因无法一步到位改进这些缺点，但是既然知晓何为优秀，何为糟粕，就应该将优秀当做一种习惯。\"><a class=\"header-anchor\" href=\"#如果你还采用非编译式javascript来编写你的应用，请记住这些编码规范。尽管因为历史原因无法一步到位改进这些缺点，但是既然知晓何为优秀，何为糟粕，就应该将优秀当做一种习惯。\" aria-hidden=\"true\">#</a> <em>如果你还采用非编译式JavaScript来编写你的应用，请记住这些编码规范。尽管因为历史原因无法一步到位改进这些缺点，但是既然知晓何为优秀，何为糟粕，就应该将优秀当做一种习惯。</em></h4>\n</div>\n",null]}