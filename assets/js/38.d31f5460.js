(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{261:function(t,a,s){"use strict";s.r(a);var e=s(0),n=Object(e.a)({},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),t._m(1),t._v(" "),t._m(2),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("所以就有了 HashMap 的线程安全版本—— ConcurrentHashMap 的诞生。在ConcurrentHashMap中，无论是读操作还是写操作都能保证很高的性能：在进行读操作时(几乎)不需要加锁，而在写操作时通过锁分段技术只对所操作的段加锁而不影响客户端对其它段的访问。")]),t._v(" "),s("p",[t._v("关于 ConcurrentHashMap 相关问题，我在 "),s("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/%E8%BF%99%E5%87%A0%E9%81%93Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E9%9D%A2%E8%AF%95%E9%A2%98%E5%87%A0%E4%B9%8E%E5%BF%85%E9%97%AE.md",target:"_blank",rel:"noopener noreferrer"}},[t._v("《这几道Java集合框架面试题几乎必问》"),s("OutboundLink")],1),t._v(" 这篇文章中已经提到过。下面梳理一下关于 ConcurrentHashMap 比较重要的问题：")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/%E8%BF%99%E5%87%A0%E9%81%93Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E9%9D%A2%E8%AF%95%E9%A2%98%E5%87%A0%E4%B9%8E%E5%BF%85%E9%97%AE.md#concurrenthashmap-%E5%92%8C-hashtable-%E7%9A%84%E5%8C%BA%E5%88%AB",target:"_blank",rel:"noopener noreferrer"}},[t._v("ConcurrentHashMap 和 Hashtable 的区别"),s("OutboundLink")],1)]),t._v(" "),s("li",[s("a",{attrs:{href:"https://github.com/Snailclimb/JavaGuide/blob/master/Java%E7%9B%B8%E5%85%B3/%E8%BF%99%E5%87%A0%E9%81%93Java%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E9%9D%A2%E8%AF%95%E9%A2%98%E5%87%A0%E4%B9%8E%E5%BF%85%E9%97%AE.md#concurrenthashmap%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0%E6%96%B9%E5%BC%8F%E5%BA%95%E5%B1%82%E5%85%B7%E4%BD%93%E5%AE%9E%E7%8E%B0",target:"_blank",rel:"noopener noreferrer"}},[t._v("ConcurrentHashMap线程安全的具体实现方式/底层具体实现"),s("OutboundLink")],1)])]),t._v(" "),t._m(6),t._v(" "),t._m(7),t._v(" "),t._m(8),s("p",[t._v("在很多应用场景中，读操作可能会远远大于写操作。由于读操作根本不会修改原有的数据，因此对于每次读取都进行加锁其实是一种资源浪费。我们应该允许多个线程同时访问List的内部数据，毕竟读取操作是安全的。")]),t._v(" "),t._m(9),t._v(" "),t._m(10),t._v(" "),t._m(11),t._v(" "),t._m(12),t._v(" "),t._m(13),t._v(" "),t._m(14),t._v(" "),s("p",[t._v("读取操作没有任何同步控制和锁操作，理由就是内部数组 array 不会发生修改，只会被另外一个 array 替换，因此可以保证数据安全。")]),t._v(" "),t._m(15),t._m(16),t._v(" "),s("p",[t._v("CopyOnWriteArrayList 写入操作 add() 方法在添加集合的时候加了锁，保证了同步，避免了多线程写的时候会 copy 出多个副本出来。")]),t._v(" "),t._m(17),t._m(18),t._v(" "),t._m(19),t._v(" "),t._m(20),t._v(" "),s("p",[t._v("ConcurrentLinkedQueue 内部代码我们就不分析了，大家知道ConcurrentLinkedQueue 主要使用 CAS 非阻塞算法来实现线程安全就好了。")]),t._v(" "),s("p",[t._v("ConcurrentLinkedQueue 适合在对性能要求相对较高，同时对队列的读写存在多个线程同时进行的场景，即如果对队列加锁的成本较高则适合使用无锁的ConcurrentLinkedQueue来替代。")]),t._v(" "),t._m(21),t._v(" "),t._m(22),t._v(" "),s("p",[t._v("上面我们己经提到了 ConcurrentLinkedQueue 作为高性能的非阻塞队列。下面我们要讲到的是阻塞队列——BlockingQueue。阻塞队列（BlockingQueue）被广泛使用在“生产者-消费者”问题中，其原因是BlockingQueue提供了可阻塞的插入和移除的方法。当队列容器已满，生产者线程会被阻塞，直到队列未满；当队列容器为空时，消费者线程会被阻塞，直至队列非空时为止。")]),t._v(" "),s("p",[t._v("BlockingQueue 是一个接口，继承自 Queue，所以其实现类也可以作为 Queue 的实现来使用，而 Queue 又继承自 Collection 接口。下面是 BlockingQueue 的相关实现类：")]),t._v(" "),t._m(23),t._v(" "),t._m(24),t._v(" "),t._m(25),t._v(" "),t._m(26),t._v(" "),s("p",[t._v("ArrayBlockingQueue 默认情况下不能保证线程访问队列的公平性，所谓公平性是指严格按照线程等待的绝对时间顺序，即最先等待的线程能够最先访问到 ArrayBlockingQueue。而非公平性则是指访问 ArrayBlockingQueue 的顺序不是遵守严格的时间顺序，有可能存在，当 ArrayBlockingQueue 可以被访问时，长时间阻塞的线程依然无法访问到 ArrayBlockingQueue。如果保证公平性，通常会降低吞吐量。如果需要获得公平性的 ArrayBlockingQueue，可采用如下代码：")]),t._v(" "),t._m(27),t._m(28),t._v(" "),t._m(29),t._v(" "),t._m(30),t._v(" "),t._m(31),t._m(32),t._v(" "),t._m(33),t._v(" "),t._m(34),t._v(" "),s("p",[t._v("简单地说，它就是 PriorityQueue 的线程安全版本。不可以插入 null 值，同时，插入队列的对象必须是可比较大小的（comparable），否则报 ClassCastException 异常。它的插入操作 put 方法不会 block，因为它是无界队列（take 方法在队列为空的时候会阻塞）。")]),t._v(" "),t._m(35),t._v(" "),s("p",[t._v("《解读 Java 并发队列 BlockingQueue》")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://javadoop.com/post/java-concurrent-queue",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://javadoop.com/post/java-concurrent-queue"),s("OutboundLink")],1)]),t._v(" "),t._m(36),t._v(" "),s("p",[t._v("下面这部分内容参考了极客时间专栏"),s("a",{attrs:{href:"https://time.geekbang.org/column/intro/126?code=zl3GYeAsRI4rEJIBNu5B/km7LSZsPDlGWQEpAYw5Vu0=&utm_term=SPoster",target:"_blank",rel:"noopener noreferrer"}},[t._v("《数据结构与算法之美》"),s("OutboundLink")],1),t._v("以及《实战Java高并发程序设计》。")]),t._v(" "),t._m(37),t._v(" "),t._m(38),t._v(" "),s("p",[t._v("跳表的本质是同时维护了多个链表，并且链表是分层的，")]),t._v(" "),t._m(39),t._v(" "),s("p",[t._v("最低层的链表维护了跳表内所有的元素，每上面一层链表都是下面一层的子集。")]),t._v(" "),s("p",[t._v("跳表内的所有链表的元素都是排序的。查找时，可以从顶级链表开始找。一旦发现被查找的元素大于当前链表中的取值，就会转入下一层链表继续找。这也就是说在查找过程中，搜索是跳跃式的。如上图所示，在跳表中查找元素18。")]),t._v(" "),t._m(40),t._v(" "),s("p",[t._v("查找18 的时候原来需要遍历 18 次，现在只需要 7 次即可。针对链表长度比较大的时候，构建索引查找效率的提升就会非常明显。")]),t._v(" "),t._m(41),t._v(" "),s("p",[t._v("使用跳表实现Map 和使用哈希算法实现Map的另外一个不同之处是：哈希并不会保存元素的顺序，而跳表内所有的元素都是排序的。因此在对跳表进行遍历时，你会得到一个有序的结果。所以，如果你的应用需要有序性，那么跳表就是你不二的选择。JDK 中实现这一数据结构的类是ConcurrentSkipListMap。")]),t._v(" "),t._m(42),t._v(" "),t._m(43)])},[function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ul",[s("li",[s("a",{attrs:{href:"#%E4%B8%80-jdk-%E6%8F%90%E4%BE%9B%E7%9A%84%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8%E6%80%BB%E7%BB%93"}},[t._v("一 JDK 提供的并发容器总结")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%8C-concurrenthashmap"}},[t._v("二 ConcurrentHashMap")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%89-copyonwritearraylist"}},[t._v("三 CopyOnWriteArrayList")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#31-copyonwritearraylist-%E7%AE%80%E4%BB%8B"}},[t._v("3.1 CopyOnWriteArrayList 简介")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#32-copyonwritearraylist-%E6%98%AF%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E7%9A%84%EF%BC%9F"}},[t._v("3.2 CopyOnWriteArrayList 是如何做到的？")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#33-copyonwritearraylist-%E8%AF%BB%E5%8F%96%E5%92%8C%E5%86%99%E5%85%A5%E6%BA%90%E7%A0%81%E7%AE%80%E5%8D%95%E5%88%86%E6%9E%90"}},[t._v("3.3 CopyOnWriteArrayList 读取和写入源码简单分析")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#331-copyonwritearraylist-%E8%AF%BB%E5%8F%96%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[t._v("3.3.1 CopyOnWriteArrayList 读取操作的实现")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#332-copyonwritearraylist-%E5%86%99%E5%85%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%AE%9E%E7%8E%B0"}},[t._v("3.3.2 CopyOnWriteArrayList 写入操作的实现")])])])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E5%9B%9B-concurrentlinkedqueue"}},[t._v("四 ConcurrentLinkedQueue")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%BA%94-blockingqueue"}},[t._v("五 BlockingQueue")]),t._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"#51-blockingqueue-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D"}},[t._v("5.1 BlockingQueue 简单介绍")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#52-arrayblockingqueue"}},[t._v("5.2 ArrayBlockingQueue")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#53-linkedblockingqueue"}},[t._v("5.3 LinkedBlockingQueue")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#54-priorityblockingqueue"}},[t._v("5.4 PriorityBlockingQueue")])])])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E5%85%AD-concurrentskiplistmap"}},[t._v("六 ConcurrentSkipListMap")])]),t._v(" "),s("li",[s("a",{attrs:{href:"#%E4%B8%83-%E5%8F%82%E8%80%83"}},[t._v("七 参考")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"一-jdk-提供的并发容器总结"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一-jdk-提供的并发容器总结","aria-hidden":"true"}},[this._v("#")]),this._v(" 一 JDK 提供的并发容器总结")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("JDK提供的这些容器大部分在 "),a("code",[this._v("java.util.concurrent")]),this._v(" 包中。")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ul",[s("li",[s("strong",[t._v("ConcurrentHashMap：")]),t._v(" 线程安全的HashMap")]),t._v(" "),s("li",[s("strong",[t._v("CopyOnWriteArrayList:")]),t._v(" 线程安全的List，在读多写少的场合性能非常好，远远好于Vector.")]),t._v(" "),s("li",[t._v("**ConcurrentLinkedQueue：**高效的并发队列，使用链表实现。可以看做一个线程安全的 LinkedList，这是一个非阻塞队列。")]),t._v(" "),s("li",[s("strong",[t._v("BlockingQueue:")]),t._v(" 这是一个接口，JDK内部通过链表、数组等方式实现了这个接口。表示阻塞队列，非常适合用于作为数据共享的通道。")]),t._v(" "),s("li",[s("strong",[t._v("ConcurrentSkipListMap:")]),t._v(" 跳表的实现。这是一个Map，使用跳表的数据结构进行快速查找。")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"二-concurrenthashmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二-concurrenthashmap","aria-hidden":"true"}},[this._v("#")]),this._v(" 二 ConcurrentHashMap")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("我们知道 HashMap 不是线程安全的，在并发场景下如果要保证一种可行的方式是使用 "),a("code",[this._v("Collections.synchronizedMap()")]),this._v(" 方法来包装我们的 HashMap。但这是通过使用一个全局的锁来同步不同线程间的并发访问，因此会带来不可忽视的性能问题。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"三-copyonwritearraylist"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三-copyonwritearraylist","aria-hidden":"true"}},[this._v("#")]),this._v(" 三 CopyOnWriteArrayList")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"_3-1-copyonwritearraylist-简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-copyonwritearraylist-简介","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.1 CopyOnWriteArrayList 简介")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("CopyOnWriteArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("implements")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RandomAccess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Cloneable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Serializable")]),t._v("\n")])])])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("p",[t._v("这和我们之前在多线程章节讲过 "),s("code",[t._v("ReentrantReadWriteLock")]),t._v(" 读写锁的思想非常类似，也就是读读共享、写写互斥、读写互斥、写读互斥。JDK中提供了 "),s("code",[t._v("CopyOnWriteArrayList")]),t._v(" 类比相比于在读写锁的思想又更进一步。为了将读取的性能发挥到极致，"),s("code",[t._v("CopyOnWriteArrayList")]),t._v(" 读取是完全不用加锁的，并且更厉害的是：写入也不会阻塞读取操作。只有写入和写入之间需要进行同步等待。这样一来，读操作的性能就会大幅度提升。"),s("strong",[t._v("那它是怎么做的呢？")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"_3-2-copyonwritearraylist-是如何做到的？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-copyonwritearraylist-是如何做到的？","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.2 CopyOnWriteArrayList 是如何做到的？")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("code",[this._v("CopyOnWriteArrayList")]),this._v(" 类的所有可变操作（add，set等等）都是通过创建底层数组的新副本来实现的。当 List 需要被修改的时候，我并不修改原有内容，而是对原有数据进行一次复制，将修改的内容写入副本。写完之后，再将修改完的副本替换原来的数据，这样就可以保证写操作不会影响读操作了。")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("p",[t._v("从 "),s("code",[t._v("CopyOnWriteArrayList")]),t._v(" 的名字就能看出"),s("code",[t._v("CopyOnWriteArrayList")]),t._v(" 是满足"),s("code",[t._v("CopyOnWrite")]),t._v(" 的ArrayList，所谓"),s("code",[t._v("CopyOnWrite")]),t._v(" 也就是说：在计算机，如果你想要对一块内存进行修改时，我们不在原有内存块中进行写操作，而是将内存拷贝一份，在新的内存中进行写操作，写完之后呢，就将指向原来内存指针指向新的内存，原来的内存就可以被回收掉了。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"_3-3-copyonwritearraylist-读取和写入源码简单分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-copyonwritearraylist-读取和写入源码简单分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.3 CopyOnWriteArrayList 读取和写入源码简单分析")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h4",{attrs:{id:"_3-3-1-copyonwritearraylist-读取操作的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-1-copyonwritearraylist-读取操作的实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.3.1 CopyOnWriteArrayList 读取操作的实现")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** The array, accessed only via getArray/setArray. */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("transient")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("volatile")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@SuppressWarnings")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"unchecked"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" a"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("index"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" array"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h4",{attrs:{id:"_3-3-2-copyonwritearraylist-写入操作的实现"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-2-copyonwritearraylist-写入操作的实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 3.3.2 CopyOnWriteArrayList 写入操作的实现")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     * Appends the specified element to the end of this list.\n     *\n     * @param e element to be appended to this list\n     * @return {@code true} (as specified by {@link Collection#add})\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ReentrantLock")]),t._v(" lock "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("lock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//加锁")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" elements "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" newElements "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Arrays")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("copyOf")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("elements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//拷贝新数组")]),t._v("\n            newElements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("len"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setArray")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newElements"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            lock"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("unlock")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//释放锁")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"四-concurrentlinkedqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四-concurrentlinkedqueue","aria-hidden":"true"}},[this._v("#")]),this._v(" 四 ConcurrentLinkedQueue")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("Java提供的线程安全的 Queue 可以分为"),a("strong",[this._v("阻塞队列")]),this._v("和"),a("strong",[this._v("非阻塞队列")]),this._v("，其中阻塞队列的典型例子是 BlockingQueue，非阻塞队列的典型例子是ConcurrentLinkedQueue，在实际应用中要根据实际需要选用阻塞队列或者非阻塞队列。 "),a("strong",[this._v("阻塞队列可以通过加锁来实现，非阻塞队列可以通过 CAS 操作实现。")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("从名字可以看出，"),a("code",[this._v("ConcurrentLinkedQueue")]),this._v("这个队列使用链表作为其数据结构．ConcurrentLinkedQueue 应该算是在高并发环境中性能最好的队列了。它之所有能有很好的性能，是因为其内部复杂的实现。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"五-blockingqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#五-blockingqueue","aria-hidden":"true"}},[this._v("#")]),this._v(" 五 BlockingQueue")])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"_5-1-blockingqueue-简单介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-1-blockingqueue-简单介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" 5.1 BlockingQueue 简单介绍")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-9/51622268.jpg",alt:"BlockingQueue 的实现类"}})])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("strong",[this._v("下面主要介绍一下:ArrayBlockingQueue、LinkedBlockingQueue、PriorityBlockingQueue，这三个 BlockingQueue 的实现类。")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"_5-2-arrayblockingqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-2-arrayblockingqueue","aria-hidden":"true"}},[this._v("#")]),this._v(" 5.2 ArrayBlockingQueue")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("strong",[this._v("ArrayBlockingQueue")]),this._v(" 是 BlockingQueue 接口的有界队列实现类，底层采用"),a("strong",[this._v("数组")]),this._v("来实现。ArrayBlockingQueue一旦创建，容量不能改变。其并发控制采用可重入锁来控制，不管是插入操作还是读取操作，都需要获取到锁才能进行操作。当队列容量满时，尝试将元素放入队列将导致操作阻塞;尝试从一个空队列中取一个元素也会同样阻塞。")])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" blockingQueue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"_5-3-linkedblockingqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-3-linkedblockingqueue","aria-hidden":"true"}},[this._v("#")]),this._v(" 5.3 LinkedBlockingQueue")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("strong",[this._v("LinkedBlockingQueue")]),this._v(" 底层基于"),a("strong",[this._v("单向链表")]),this._v("实现的阻塞队列，可以当做无界队列也可以当做有界队列来使用，同样满足FIFO的特性，与ArrayBlockingQueue 相比起来具有更高的吞吐量，为了防止 LinkedBlockingQueue 容量迅速增，损耗大量内存。通常在创建LinkedBlockingQueue 对象时，会指定其大小，如果未指定，容量等于Integer.MAX_VALUE。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("strong",[this._v("相关构造方法:")])])},function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     *某种意义上的无界队列\n     * Creates a {@code LinkedBlockingQueue} with a capacity of\n     * {@link Integer#MAX_VALUE}.\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n     *有界队列\n     * Creates a {@code LinkedBlockingQueue} with the given (fixed) capacity.\n     *\n     * @param capacity the capacity of this queue\n     * @throws IllegalArgumentException if {@code capacity} is not greater\n     *         than zero\n     */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("IllegalArgumentException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capacity "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" capacity"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        last "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" head "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h3",{attrs:{id:"_5-4-priorityblockingqueue"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-4-priorityblockingqueue","aria-hidden":"true"}},[this._v("#")]),this._v(" 5.4 PriorityBlockingQueue")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("strong",[this._v("PriorityBlockingQueue")]),this._v(" 是一个支持优先级的无界阻塞队列。默认情况下元素采用自然顺序进行排序，也可以通过自定义类实现 "),a("code",[this._v("compareTo()")]),this._v(" 方法来指定元素排序规则，或者初始化时通过构造器参数 "),a("code",[this._v("Comparator")]),this._v(" 来指定排序规则。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("PriorityBlockingQueue 并发控制采用的是 "),a("strong",[this._v("ReentrantLock")]),this._v("，队列为无界队列（ArrayBlockingQueue 是有界队列，LinkedBlockingQueue 也可以通过在构造函数中传入 capacity 指定队列最大的容量，但是 PriorityBlockingQueue 只能指定初始的队列大小，后面插入元素的时候，"),a("strong",[this._v("如果空间不够的话会自动扩容")]),this._v("）。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("strong",[this._v("推荐文章：")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"六-concurrentskiplistmap"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#六-concurrentskiplistmap","aria-hidden":"true"}},[this._v("#")]),this._v(" 六 ConcurrentSkipListMap")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("strong",[this._v("为了引出ConcurrentSkipListMap，先带着大家简单理解一下跳表。")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("对于一个单链表，即使链表是有序的，如果我们想要在其中查找某个数据，也只能从头到尾遍历链表，这样效率自然就会很低，跳表就不一样了。跳表是一种可以用来快速查找的数据结构，有点类似于平衡树。它们都可以对元素进行快速的查找。但一个重要的区别是：对平衡树的插入和删除往往很可能导致平衡树进行一次全局的调整。而对跳表的插入和删除只需要对整个数据结构的局部进行操作即可。这样带来的好处是：在高并发的情况下，你会需要一个全局锁来保证整个平衡树的线程安全。而对于跳表，你只需要部分锁即可。这样，在高并发环境下，你就可以拥有更好的性能。而就查询的性能而言，跳表的时间复杂度也是 "),a("strong",[this._v("O(logn)")]),this._v(" 所以在并发数据结构中，JDK 使用跳表来实现一个 Map。")])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-9/93666217.jpg",alt:"2级索引跳表"}})])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[a("img",{attrs:{src:"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-12-9/32005738.jpg",alt:"在跳表中查找元素18"}})])},function(){var t=this.$createElement,a=this._self._c||t;return a("p",[this._v("从上面很容易看出，"),a("strong",[this._v("跳表是一种利用空间换时间的算法。")])])},function(){var t=this.$createElement,a=this._self._c||t;return a("h2",{attrs:{id:"七-参考"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#七-参考","aria-hidden":"true"}},[this._v("#")]),this._v(" 七 参考")])},function(){var t=this.$createElement,a=this._self._c||t;return a("ul",[a("li",[this._v("《实战Java高并发程序设计》")]),this._v(" "),a("li",[this._v("https://javadoop.com/post/java-concurrent-queue")]),this._v(" "),a("li",[this._v("https://juejin.im/post/5aeebd02518825672f19c546")])])}],!1,null,null,null);a.default=n.exports}}]);