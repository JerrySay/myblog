{"remainingRequest":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/javaScript-error-type.md?vue&type=template&id=2c9a1935&","dependencies":[{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/javaScript-error-type.md","mtime":1549463072802},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><p>JavaScript 中常见的错误类型。</p>\n<!-- more -->\n<div class=\"warning custom-block\"><p class=\"custom-block-title\">ECMA-262 定义了 7 种错误类型：</p>\n<ol>\n<li>\n<p>Error</p>\n</li>\n<li>\n<p>EvalError</p>\n</li>\n<li>\n<p>RangeError</p>\n</li>\n<li>\n<p>ReferenceError</p>\n</li>\n<li>\n<p>SyntaxError</p>\n</li>\n<li>\n<p>TypeError</p>\n</li>\n<li>\n<p>URIError</p>\n</li>\n</ol>\n<blockquote>\n<p>其中，Error 是基类型(其他六种类型的父类型)，其他类型继承自它。Error 类型很少见，一般由浏览器抛出的。这个基类型主要用于开发人员抛出自定义错误。</p>\n</blockquote>\n</div>\n<h2 id=\"_1-syntaxerror-语法错误-：\"><a class=\"header-anchor\" href=\"#_1-syntaxerror-语法错误-：\" aria-hidden=\"true\">#</a> 1. SyntaxError (语法错误)：</h2>\n<p>1.1 变量名不符合规范</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> <span class=\"token number\">1</span> <span class=\"token comment\">// Uncaught SyntaxError: Unexpected number</span>\n<span class=\"token keyword\">var</span> <span class=\"token number\">1</span>a <span class=\"token comment\">// Uncaught SyntaxError: Invalid or unexpected token</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>1.2 给关键字赋值</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">function</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token comment\">// Uncaught SyntaxError: Unexpected token =</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_2-uncaught-referenceerror（引用错误）：\"><a class=\"header-anchor\" href=\"#_2-uncaught-referenceerror（引用错误）：\" aria-hidden=\"true\">#</a> 2. Uncaught ReferenceError（引用错误）：</h2>\n<blockquote>\n<p>引用一个不存在的变量时发生的错误。将一个值分配给无法分配的对象，比如对函数的运行结果或者函数赋值。</p>\n</blockquote>\n<p>2.1 引用了不存在的变量</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">a</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: a is not defined</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: b is not defined</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>2.2 给一个无法被赋值的对象赋值</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token comment\">// Uncaught ReferenceError: Invalid left-hand side in assignment</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_3-rangeerror（范围错误）：\"><a class=\"header-anchor\" href=\"#_3-rangeerror（范围错误）：\" aria-hidden=\"true\">#</a> 3. RangeError（范围错误）：</h2>\n<blockquote>\n<p>RangeError 是当一个只超出有效范围时发生的错误。主要的有几种情况，第一是数组长度为负数，第二是 Number 对象的方法参数超出范围，以及函数堆栈超过最大值。</p>\n</blockquote>\n<p>3.1 数组长度为负数</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught RangeError: Invalid array length</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>3.2 Number 对象的方法参数超出范围</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> num <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">12.34</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught RangeError: toFixed() digits argument must be between 0 and 20 at Number.toFixed</span>\n<span class=\"token comment\">// 说明: toFixed方法的作用是将数字四舍五入为指定小数位数的数字,参数是小数点后的位数,范围为0-20.</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_4-typeerror（类型错误）：\"><a class=\"header-anchor\" href=\"#_4-typeerror（类型错误）：\" aria-hidden=\"true\">#</a> 4. TypeError（类型错误）：</h2>\n<blockquote>\n<p>变量或参数不是预期类型时发生的错误。比如使用 new 字符串、布尔值等原始类型和调用对象不存在的方法就会抛出这种错误，因为 new 命令的参数应该是一个构造函数。</p>\n</blockquote>\n<p>4.1 调用不存在的方法</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token number\">123</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: 123 is not a function</span>\n<span class=\"token keyword\">var</span> o <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\no<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: o.run is not a function</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>4.2 new 关键字后接基本类型</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">456</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: 456 is not a constructor</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"_5-urierror（url-错误）：\"><a class=\"header-anchor\" href=\"#_5-urierror（url-错误）：\" aria-hidden=\"true\">#</a> 5. URIError（URL 错误）：</h2>\n<blockquote>\n<p>主要是相关函数的参数不正确。</p>\n</blockquote>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token function\">decodeURI</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught URIError: URI malformed at decodeURI</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"tip custom-block\"><p class=\"custom-block-title\">提醒：</p>\n<p>URI 相关参数不正确时抛出的错误，主要涉及 encodeURI、decodeURI()、encodeURIComponent()、decodeURIComponent()、escape()和 unescape(）六个函数。</p>\n</div>\n<h2 id=\"_6-evalerror-eval-（函数执行错误）：\"><a class=\"header-anchor\" href=\"#_6-evalerror-eval-（函数执行错误）：\" aria-hidden=\"true\">#</a> 6. EvalError eval()（函数执行错误）：</h2>\n<blockquote>\n<p>在 ES5 以下的 JavaScript 中，当 eval()函数没有被正确执行时，会抛出 evalError 错误。例如下面的情况：</p>\n</blockquote>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">var</span> myEval <span class=\"token operator\">=</span> eval<span class=\"token punctuation\">;</span>\n<span class=\"token function\">myEval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"alert('call eval')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n需要注意的是：<span class=\"token constant\">ES5</span>以上的JavaScript中已经不再抛出该错误，但依然可以通过<span class=\"token keyword\">new</span>关键字来自定义该类型的错误提示。\n</code></pre>\n<!--beforeend--></div><!--afterend--><div class=\"warning custom-block\"><p class=\"custom-block-title\">善用 try-catch</p>\n<p>在明明知道某个地方会产生错误，可以通过修改代码来解决的地方，是不适合用 try-catch 的。或者是那种不同浏览器兼容性错误导致错误的也不太适合，因为可以通过判断浏览器或者判断这款浏览器是否存在此属性和方法来解决。</p>\n</div>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出错了！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">RangeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出错了，变量超出有效范围！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">TypeError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"出错了，变量类型无效！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><p>上面代码表示新建错误对象的实例，实质就是手动抛出错误。可以看到，错误对象的构造函数接受一个参数，代表错误提示信息（message）。</p>\n<h3 id=\"熟知这些基本的错误类型，在发生错误时可以快速定位解决问题。\"><a class=\"header-anchor\" href=\"#熟知这些基本的错误类型，在发生错误时可以快速定位解决问题。\" aria-hidden=\"true\">#</a> <em>熟知这些基本的错误类型，在发生错误时可以快速定位解决问题。</em></h3>\n</div>\n",null]}