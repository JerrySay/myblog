{"remainingRequest":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js??ref--1-1!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js??ref--1-2!/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/mobile-hack.md?vue&type=template&id=31d5c388&","dependencies":[{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/docs/blog/mobile-hack.md","mtime":1549463072807},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vue-loader/lib/index.js","mtime":499162500000},{"path":"/Users/jerry/Development/WEB/webWorkSpace/LIJIATING/vuepressBlog/node_modules/vuepress/lib/webpack/markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><p>这里总结记录一些移动端的坑！\n<!-- more --></p>\n<h2 id=\"_1-flex兼容性\"><a class=\"header-anchor\" href=\"#_1-flex兼容性\" aria-hidden=\"true\">#</a> 1. flex兼容性</h2>\n<h2 id=\"_2-app内嵌h5页面调试\"><a class=\"header-anchor\" href=\"#_2-app内嵌h5页面调试\" aria-hidden=\"true\">#</a> 2. APP内嵌H5页面调试</h2>\n<h4 id=\"_1、-chrome模拟真机调试android-app里的webview\"><a class=\"header-anchor\" href=\"#_1、-chrome模拟真机调试android-app里的webview\" aria-hidden=\"true\">#</a> 1、 Chrome模拟真机调试Android APP里的webview</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>1.通过修改代码，在APP内设置允许远程调试;\n\n2.开启当前Android设备的USB调试;\n\n3.在PC或MAC上安装chrome浏览器（版本&gt;=32）和对应的Android设备驱动;\n\n4.用USB线连接Android设备，在PC或MAC上的chrome地址栏输入 chrome://inspect 然后回车，或通过菜单图标→工具→检查设备，进入调试界面;\n\n5.勾选界面中的 Discover USB devices ，直到搜索到你的Android设备;\n\n6.在移动设备上弹出的是否允许远程调试上，选择“允许”;\n\n7.在页面列表（将展示已在Android上的chrome中打开的页面），点击对应的 inspect 开始调试;\n\n8.此时将在桌面版Chrome上弹出一个新的标签页，即为调试界面；如果很久都没用响应，请翻墙后再试;\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_2、-eruda或vconsole调试\"><a class=\"header-anchor\" href=\"#_2、-eruda或vconsole调试\" aria-hidden=\"true\">#</a> 2、 eruda或vConsole调试</h4>\n<!--beforebegin--><div class=\"language-javascript extra-class\"><!--afterbegin--><pre v-pre class=\"language-javascript\"><code><span class=\"token number\">1.</span>eruda调试时，直接在页面中插入以下代码，页面中会有悬浮按钮，类似iOS上的辅助触控；\n\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.bootcss.com/eruda/1.4.2/eruda.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span>eruda<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n\n<span class=\"token number\">2.</span>vConsole调试时，直接在页面中插入以下代码，页面中会有绿色的调试按钮；\n\n<span class=\"token operator\">&lt;</span>script src<span class=\"token operator\">=</span><span class=\"token string\">\"https://cdn.bootcss.com/vConsole/3.2.0/vconsole.min.js\"</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span><span class=\"token keyword\">var</span> vConsole <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">VConsole</span><span class=\"token punctuation\">(</span>option<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>script<span class=\"token operator\">></span>\n<span class=\"token comment\">// option可以传配置参数，也可以啥也不传</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_3、调试ios上的safari\"><a class=\"header-anchor\" href=\"#_3、调试ios上的safari\" aria-hidden=\"true\">#</a> 3、调试iOS上的Safari</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>1.在iOS设备上打开允许调试：设置→Safari→高级→打开”web检查器“;\n\n2.在MAC上打开Safari的开发菜单：顶部菜单栏“Safari”→偏好设置→高级→打开”在菜单栏中显示“开发”菜单;\n\n3.在iOS设备上的Safari浏览器中打开要调试的页面，然后切换到MAC的Safari，在顶部菜单栏选择“开发”→找到你的iOS设备名称→右边二级菜单选择需要调试的对应标签页，即可开始远程调试;\n\n4.如果没有iOS设备，也可以在Xcode中模拟一台，点击顶部“Xcode”→“Open Developer Tool”→“iOS Simulator”即可打开一个iOS设备的模拟器，并且模拟器里面Safari打开的页面，也是能通过上个步骤中MAC上的Safari调试;\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"_4、fiddler或charles代理转发\"><a class=\"header-anchor\" href=\"#_4、fiddler或charles代理转发\" aria-hidden=\"true\">#</a> 4、fiddler或charles代理转发</h4>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>fiddler或charles都是利用相同的原理，同一局域网下保持手机设置代理到本机上，从线上代理到本地服务，这个难度是最大的，但是是最真实的调试，一般需要分别设置html、css、js、img的代理；\n\n1.regex:https://www.baidu.com/index.html =&gt; https://XX.baidu.com/index.html\n\n2.regex:https://www.baidu.com/js/(\\w+\\.js) =&gt; https://XX.baidu.com/js/$1\n\n3.regex:https://www.baidu.com/css/([\\w-]+\\.css) =&gt; https://XX.baidu.com/css/$1\n\n4.regex:https://www.baidu.com/img/(\\w+\\.png) =&gt; https://XX.baidu.com/img/$1\n</code></pre>\n<!--beforeend--></div><!--afterend--><h3 id=\"持续更新中。。。\"><a class=\"header-anchor\" href=\"#持续更新中。。。\" aria-hidden=\"true\">#</a> <em>持续更新中。。。</em></h3>\n</div>\n",null]}