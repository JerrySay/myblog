{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[90],{196:function(t,e,s){\"use strict\";s.r(e);var n=s(0),r=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"content\"},[t._m(0),t._v(\" \"),t._m(1),t._v(\" \"),t._m(2),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484573&idx=1&sn=8c5965d4a3710d405d8e8cc10c7b0ce5&chksm=fd9852fccaefdbea8dfe0bc40188b7579f1cddb1e8905dc981669a3f21d2a04cadceafa9023f&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【备战春招/秋招系列1】程序员的简历就该这样写\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484578&idx=1&sn=eea72d80a2325257f00aaed21d5b226f&chksm=fd9852c3caefdbd52dd8a537cc723ed1509314401b3a669a253ef5bc0360b6fddef48b9c2e94&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【备战春招/秋招系列2】初出茅庐的程序员该如何准备面试？\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484592&idx=1&sn=6d9731ce7401be49e97c1af6ed384ecc&chksm=fd9852d1caefdbc720a361ae65a8ad9d53cfb4800b15a7c68cbdc630b313215c6c52e0934ec2&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【备战春招/秋招系列3】Java程序员必备书单\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),s(\"p\",[t._v(\"这是我总结的美团面经的基础篇，后面还有进阶和终结篇哦！下面只是我从很多份美团面经中总结的在面试中一些常见的问题。不同于个人面经，这份面经具有普适性。每次面试必备的自我介绍、项目介绍这些东西，大家可以自己私下好好思考。我在前面的文章中也提到了应该怎么做自我介绍与项目介绍，详情可以查看这篇文章：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484578&idx=1&sn=eea72d80a2325257f00aaed21d5b226f&chksm=fd9852c3caefdbd52dd8a537cc723ed1509314401b3a669a253ef5bc0360b6fddef48b9c2e94&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【备战春招/秋招系列2】初出茅庐的程序员该如何准备面试？\"),s(\"OutboundLink\")],1),t._v(\"。\")]),t._v(\" \"),t._m(3),t._v(\" \"),s(\"p\",[t._v(\"正确答案：11.\")]),t._v(\" \"),t._m(4),t._v(\" \"),t._m(5),t._v(\" \"),s(\"p\",[t._v(\"共同点：两者都可做逻辑运算符。它们都表示运算符的两边都是true时，结果为true；\")]),t._v(\" \"),s(\"p\",[t._v(\"不同点: &也是位运算符。& 表示在运算时两边都会计算，然后再判断；&&表示先运算符号左边的东西，然后判断是否为true，是true就继续运算右边的然后判断并输出，是false就停下来直接输出不会再运行后面的东西。\")]),t._v(\" \"),t._m(6),t._v(\" \"),s(\"p\",[t._v(\"共同点：两者都可做逻辑运算符。它们都表示运算符的两边任意一边为true，结果为true，两边都不是true，结果就为false；\")]),t._v(\" \"),s(\"p\",[t._v(\"不同点：|也是位运算符。| 表示两边都会运算，然后再判断结果；|| 表示先运算符号左边的东西，然后判断是否为true，是true就停下来直接输出不会再运行后面的东西，是false就继续运算右边的然后判断并输出。\")]),t._v(\" \"),t._m(7),t._v(\" \"),s(\"p\",[t._v(\"3 | 9=0011（二进制） | 1001（二进制）=1011（二进制）=11（十进制）\")]),t._v(\" \"),t._m(8),t._v(\" \"),t._m(9),t._v(\" \"),t._m(10),t._v(\" \"),t._m(11),t._m(12),t._v(\" \"),t._m(13),t._v(\" \"),t._m(14),t._v(\" \"),s(\"p\",[t._v(\"图解（图片来源：《图解HTTP》）：\")]),t._v(\" \"),t._m(15),t._v(\" \"),s(\"p\",[t._v(\"总体来说分为以下几个过程:\")]),t._v(\" \"),t._m(16),t._v(\" \"),s(\"p\",[t._v(\"具体可以参考下面这篇文章：\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"https://segmentfault.com/a/1190000006879700\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://segmentfault.com/a/1190000006879700\"),s(\"OutboundLink\")],1)])]),t._v(\" \"),t._m(17),t._v(\" \"),s(\"p\",[t._v(\"为了准确无误地把数据送达目标处，TCP协议采用了三次握手策略。\")]),t._v(\" \"),t._m(18),t._v(\" \"),t._m(19),t._v(\" \"),t._m(20),t._v(\" \"),t._m(21),t._v(\" \"),t._m(22),t._v(\" \"),t._m(23),t._v(\" \"),s(\"p\",[t._v(\"第一次握手：Client 什么都不能确认；Server 确认了对方发送正常，自己接收正常。\")]),t._v(\" \"),s(\"p\",[t._v(\"第二次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己接收正常，对方发送正常\")]),t._v(\" \"),s(\"p\",[t._v(\"第三次握手：Client 确认了：自己发送、接收正常，对方发送、接收正常；Server 确认了：自己发送、接收正常，对方发送接收正常\")]),t._v(\" \"),s(\"p\",[t._v(\"所以三次握手就能确认双发收发功能都正常，缺一不可。\")]),t._v(\" \"),t._m(24),t._v(\" \"),s(\"p\",[t._v(\"接收端传回发送端所发送的 SYN 是为了告诉发送端，我接收到的信息确实就是你所发送的信号了。\")]),t._v(\" \"),t._m(25),t._v(\" \"),t._m(26),t._v(\" \"),s(\"p\",[t._v(\"双方通信无误必须是两者互相发送信息都无误。传了 SYN，证明发送方（主动关闭方）到接收方（被动关闭方）的通道没有问题，但是接收方到发送方的通道还需要 ACK 信号来进行验证。\")]),t._v(\" \"),t._m(27),t._v(\" \"),s(\"p\",[t._v(\"断开一个 TCP 连接则需要“四次挥手”：\")]),t._v(\" \"),t._m(28),t._v(\" \"),t._m(29),t._v(\" \"),s(\"p\",[t._v(\"任何一方都可以在数据传送结束后发出连接释放的通知，待对方确认后进入半关闭状态。当另一方也没有数据再发送的时候，则发出连接释放通知，对方确认后就完全关闭了TCP连接。\")]),t._v(\" \"),s(\"p\",[t._v(\"举个例子：A 和 B 打电话，通话即将结束后，A 说“我没啥要说的了”，B回答“我知道了”，但是 B 可能还会有要说的话，A 不能要求 B 跟着自己的节奏结束通话，于是 B 可能又巴拉巴拉说了一通，最后 B 说“我说完了”，A 回答“知道了”，这样通话才算结束。\")]),t._v(\" \"),s(\"p\",[t._v(\"上面讲的比较概括，推荐一篇讲的比较细致的文章：\"),s(\"a\",{attrs:{href:\"https://blog.csdn.net/qzcsu/article/details/72861891\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://blog.csdn.net/qzcsu/article/details/72861891\"),s(\"OutboundLink\")],1)]),t._v(\" \"),t._m(30),t._v(\" \"),s(\"p\",[t._v(\"参考：\"),s(\"a\",{attrs:{href:\"https://blog.csdn.net/guoweimelon/article/details/50858597\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://blog.csdn.net/guoweimelon/article/details/50858597\"),s(\"OutboundLink\")],1)]),t._v(\" \"),s(\"p\",[t._v(\"IP地址是指互联网协议地址（Internet Protocol Address）IP Address的缩写。IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址，以此来屏蔽物理地址的差异。\")]),t._v(\" \"),s(\"p\",[t._v(\"MAC 地址又称为物理地址、硬件地址，用来定义网络设备的位置。网卡的物理地址通常是由网卡生产厂家写入网卡的，具有全球唯一性。MAC地址用于在网络中唯一标示一个网卡，一台电脑会有一或多个网卡，每个网卡都需要有一个唯一的MAC地址。\")]),t._v(\" \"),t._m(31),t._v(\" \"),s(\"p\",[t._v(\"HTTP请求报文主要由请求行、请求头部、请求正文3部分组成\")]),t._v(\" \"),s(\"p\",[t._v(\"HTTP响应报文主要由状态行、响应头部、响应正文3部分组成\")]),t._v(\" \"),s(\"p\",[t._v(\"详细内容可以参考：\"),s(\"a\",{attrs:{href:\"https://blog.csdn.net/a19881029/article/details/14002273\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"https://blog.csdn.net/a19881029/article/details/14002273\"),s(\"OutboundLink\")],1)]),t._v(\" \"),t._m(32),t._v(\" \"),t._m(33),t._v(\" \"),t._m(34),t._v(\" \"),t._m(35),t._v(\" \"),t._m(36),t._v(\" \"),t._m(37),t._v(\" \"),s(\"p\",[t._v(\"将无序的数据变成相对有序的数据（就像查目录一样）\")]),t._v(\" \"),t._m(38),t._v(\" \"),t._m(39),t._v(\" \"),t._m(40),t._v(\" \"),t._m(41),t._v(\" \"),s(\"p\",[t._v(\"更多关于索引的内容可以查看我的这篇文章：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484486&idx=1&sn=215450f11e042bca8a58eac9f4a97686&chksm=fd985227caefdb3117b8375f150676f5824aa20d1ebfdbcfb93ff06e23e26efbafae6cf6b48e&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"【思维导图-索引篇】搞定数据库索引就是这么简单\"),s(\"OutboundLink\")],1)]),t._v(\" \"),t._m(42),t._v(\" \"),s(\"p\",[t._v(\"如果一个索引包含（或者说覆盖）所有需要查询的字段的值，我们就称\\n之为“覆盖索引”。我们知道在InnoDB存储引擎中，如果不是主键索引，叶子节点存储的是主键+列值。最终还是要“回表”，也就是要通过主键再查找一次,这样就会比较慢。覆盖索引就是把要查询出的列和索引是对应的，不做回表操作！\")]),t._v(\" \"),t._m(43),t._v(\" \"),t._m(44),t._v(\" \"),s(\"p\",[t._v(\"线程与进程相似，但线程是一个比进程更小的执行单位。一个进程在其执行的过程中可以产生多个线程。与进程不同的是同类的多个线程共享同一块内存空间和一组系统资源，所以系统在产生一个线程，或是在各个线程之间作切换工作时，负担要比进程小得多，也正因为如此，线程也被称为轻量级进程。另外，也正是因为共享资源，所以线程中执行时一般都要进行同步和互斥。总的来说，进程和线程的主要差别在于它们是不同的操作系统资源管理方式。\")]),t._v(\" \"),t._m(45),t._v(\" \"),t._m(46),t._v(\" \"),t._m(47),t._v(\" \"),s(\"p\",[t._v(\"1、锁机制\")]),t._v(\" \"),t._m(48),t._v(\" \"),s(\"p\",[t._v(\"2、信号量机制：包括无名线程信号量与有名线程信号量\")]),t._v(\" \"),s(\"p\",[t._v(\"3、信号机制：类似于进程间的信号处理。\")]),t._v(\" \"),s(\"p\",[t._v(\"线程间通信的主要目的是用于线程同步，所以线程没有象进程通信中用于数据交换的通信机制。\")]),t._v(\" \"),t._m(49),t._v(\" \"),t._m(50),t._v(\" \"),t._m(51),t._v(\" \"),t._m(52),t._v(\" \"),t._m(53),t._m(54),t._v(\" \"),s(\"p\",[t._v(\"静态内部实现的单例是懒加载的且线程安全。\")]),t._v(\" \"),s(\"p\",[t._v(\"只有通过显式调用 getInstance 方法时，才会显式装载 SingletonHolder 类，从而实例化 instance（只有第一次使用这个单例的实例的时候才加载，同时不会有线程安全问题）。\")]),t._v(\" \"),t._m(55),t._m(56),t._v(\" \"),s(\"p\",[t._v(\"在 Spring 中，那些组成应用程序的主体及由 Spring IOC 容器所管理的对象，被称之为 bean。简单地讲，bean 就是由 IOC 容器初始化、装配及管理的对象，除此之外，bean 就与应用程序中的其他对象没有什么区别了。而 bean 的定义以及 bean 相互间的依赖关系将通过配置元数据来描述。\")]),t._v(\" \"),s(\"p\",[t._v(\"Spring中的bean默认都是单例的，这些单例Bean在多线程程序下如何保证线程安全呢？ 例如对于Web应用来说，Web容器对于每个用户请求都创建一个单独的Sevlet线程来处理请求，引入Spring框架之后，每个Action都是单例的，那么对于Spring托管的单例Service Bean，如何保证其安全呢？ Spring的单例是基于BeanFactory也就是Spring容器的，单例Bean在此容器内只有一个，Java的单例是基于 JVM，每个 JVM 内只有一个实例。\")]),t._v(\" \"),t._m(57),t._v(\" \"),s(\"p\",[t._v(\"Spring的bean的生命周期以及更多内容可以查看：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484400&idx=2&sn=7201eb365102fce017f89cb3527fb0bc&chksm=fd985591caefdc872a2fac897288119f94c345e4e12150774f960bf5f816b79e4b9b46be3d7f&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"一文轻松搞懂Spring中bean的作用域与生命周期\"),s(\"OutboundLink\")],1)]),t._v(\" \"),t._m(58),t._v(\" \"),t._m(59),t._v(\" \"),s(\"p\",[t._v(\"事务传播行为（为了解决业务层方法之间互相调用的事务问题）：\\n当事务方法被另一个事务方法调用时，必须指定事务应该如何传播。例如：方法可能继续在现有事务中运行，也可能开启一个新事务，并在自己的事务中运行。在TransactionDefinition定义中包括了如下几个表示传播行为的常量：\")]),t._v(\" \"),t._m(60),t._v(\" \"),t._m(61),t._v(\" \"),t._m(62),t._v(\" \"),t._m(63),t._v(\" \"),t._m(64),t._v(\" \"),t._m(65),t._v(\" \"),t._m(66),t._v(\" \"),s(\"p\",[t._v(\"TransactionDefinition 接口中定义了五个表示隔离级别的常量：\")]),t._v(\" \"),t._m(67),t._v(\" \"),t._m(68),t._v(\" \"),t._m(69),t._v(\" \"),s(\"p\",[t._v(\"客户端发送请求-> 前端控制器 DispatcherServlet 接受客户端请求 -> 找到处理器映射 HandlerMapping 解析请求对应的 Handler-> HandlerAdapter 会根据 Handler 来调用真正的处理器开处理请求，并处理相应的业务逻辑 -> 处理器返回一个模型视图 ModelAndView -> 视图解析器进行解析 -> 返回一个视图对象->前端控制器 DispatcherServlet 渲染数据（Model）->将得到视图对象返回给用户\")]),t._v(\" \"),s(\"p\",[t._v(\"关于 SpringMVC 原理更多内容可以查看我的这篇文章：\"),s(\"a\",{attrs:{href:\"https://mp.weixin.qq.com/s?__biz=MzU4NDQ4MzU5OA==&mid=2247484496&idx=1&sn=5472ffa687fe4a05f8900d8ee6726de4&chksm=fd985231caefdb27fc75b44ecf76b6f43e4617e0b01b3c040f8b8fab32e51dfa5118eed1d6ad&token=1990180468&lang=zh_CN#rd\",target:\"_blank\",rel:\"noopener noreferrer\"}},[t._v(\"SpringMVC 工作原理详解\"),s(\"OutboundLink\")],1)]),t._v(\" \"),t._m(70),t._v(\" \"),s(\"p\",[t._v(\"过了秋招挺长一段时间了，说实话我自己也忘了如何简要概括 Spring AOP IOC 实现原理，就在网上找了一个较为简洁的答案，下面分享给各位。\")]),t._v(\" \"),t._m(71),t._v(\" \"),t._m(72)])},[function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#1-systemoutprintln3-%7C-9%E8%BE%93%E5%87%BA%E4%BB%80%E4%B9%88\"}},[t._v(\"1.  \"),s(\"code\",[t._v(\"System.out.println(3 | 9);\")]),t._v(\"输出什么？\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#2-%E8%AF%B4%E4%B8%80%E4%B8%8B%E8%BD%AC%E5%8F%91forward%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91redirect%E7%9A%84%E5%8C%BA%E5%88%AB\"}},[t._v(\"2. 说一下转发(Forward)和重定向(Redirect)的区别\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#3-%E5%9C%A8%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E8%BE%93%E5%85%A5url%E5%9C%B0%E5%9D%80%E5%88%B0%E6%98%BE%E7%A4%BA%E4%B8%BB%E9%A1%B5%E7%9A%84%E8%BF%87%E7%A8%8B%E6%95%B4%E4%B8%AA%E8%BF%87%E7%A8%8B%E4%BC%9A%E4%BD%BF%E7%94%A8%E5%93%AA%E4%BA%9B%E5%8D%8F%E8%AE%AE\"}},[t._v(\"3.  在浏览器中输入url地址到显示主页的过程,整个过程会使用哪些协议\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#4-tcp-%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E5%92%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B\"}},[t._v(\"4.  TCP 三次握手和四次挥手\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B\"}},[t._v(\"为什么要三次握手\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BC%A0%E5%9B%9E-syn\"}},[t._v(\"为什么要传回 SYN\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%BC%A0%E4%BA%86-syn%E4%B8%BA%E5%95%A5%E8%BF%98%E8%A6%81%E4%BC%A0-ack\"}},[t._v(\"传了 SYN,为啥还要传 ACK\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B\"}},[t._v(\"为什么要四次挥手\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#5-ip%E5%9C%B0%E5%9D%80%E4%B8%8Emac%E5%9C%B0%E5%9D%80%E7%9A%84%E5%8C%BA%E5%88%AB\"}},[t._v(\"5. IP地址与MAC地址的区别\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#6-http%E8%AF%B7%E6%B1%82%E5%93%8D%E5%BA%94%E6%8A%A5%E6%96%87%E6%A0%BC%E5%BC%8F\"}},[t._v(\"6. HTTP请求、响应报文格式\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#7-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E7%B4%A2%E5%BC%95%E8%BF%99%E4%B9%88%E5%A4%9A%E4%BC%98%E7%82%B9%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%AF%B9%E8%A1%A8%E4%B8%AD%E7%9A%84%E6%AF%8F%E4%B8%80%E4%B8%AA%E5%88%97%E5%88%9B%E5%BB%BA%E4%B8%80%E4%B8%AA%E7%B4%A2%E5%BC%95%E5%91%A2%E7%B4%A2%E5%BC%95%E6%98%AF%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E6%9F%A5%E8%AF%A2%E9%80%9F%E5%BA%A6%E7%9A%84%E8%AF%B4%E4%B8%80%E4%B8%8B%E4%BD%BF%E7%94%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9mysql%E7%B4%A2%E5%BC%95%E4%B8%BB%E8%A6%81%E4%BD%BF%E7%94%A8%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%BB%80%E4%B9%88%E6%98%AF%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95\"}},[t._v(\"7. 为什么要使用索引？索引这么多优点，为什么不对表中的每一个列创建一个索引呢？索引是如何提高查询速度的？说一下使用索引的注意事项？Mysql索引主要使用的两种数据结构？什么是覆盖索引?\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#8-%E8%BF%9B%E7%A8%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B%E7%9A%84%E5%8C%BA%E5%88%AB%E6%98%AF%E4%BB%80%E4%B9%88%E8%BF%9B%E7%A8%8B%E9%97%B4%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E8%AF%B4%E4%B8%80%E4%B8%8B%E7%BA%BF%E7%A8%8B%E9%97%B4%E7%9A%84%E5%87%A0%E7%A7%8D%E9%80%9A%E4%BF%A1%E6%96%B9%E5%BC%8F%E7%9F%A5%E9%81%93%E4%B8%8D\"}},[t._v(\"8.  进程与线程的区别是什么？进程间的几种通信方式说一下？线程间的几种通信方式知道不？\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#9-%E4%B8%BA%E4%BB%80%E4%B9%88%E8%A6%81%E7%94%A8%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%E6%89%8B%E5%86%99%E5%87%A0%E7%A7%8D%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F\"}},[t._v(\"9. 为什么要用单例模式？手写几种线程安全的单例模式？\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#10-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D%E4%B8%80%E4%B8%8Bbean%E7%9F%A5%E9%81%93spring%E7%9A%84bean%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F%E4%B8%8E%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%90%97\"}},[t._v(\"10. 简单介绍一下bean。知道Spring的bean的作用域与生命周期吗？\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#11-spring-%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA%E4%BA%86%E8%A7%A3%E5%90%97transactiondefinition-%E6%8E%A5%E5%8F%A3%E4%B8%AD%E5%93%AA%E4%BA%94%E4%B8%AA%E8%A1%A8%E7%A4%BA%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB%E7%9A%84%E5%B8%B8%E9%87%8F\"}},[t._v(\"11. Spring 中的事务传播行为了解吗？TransactionDefinition 接口中哪五个表示隔离级别的常量？\")]),t._v(\" \"),s(\"ul\",[s(\"li\",[s(\"a\",{attrs:{href:\"#%E4%BA%8B%E5%8A%A1%E4%BC%A0%E6%92%AD%E8%A1%8C%E4%B8%BA\"}},[t._v(\"事务传播行为\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB\"}},[t._v(\"隔离级别\")])])])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#12-springmvc-%E5%8E%9F%E7%90%86%E4%BA%86%E8%A7%A3%E5%90%97\"}},[t._v(\"12. SpringMVC 原理了解吗？\")])]),t._v(\" \"),s(\"li\",[s(\"a\",{attrs:{href:\"#13-spring-aop-ioc-%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86\"}},[t._v(\"13. Spring AOP IOC 实现原理\")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"http://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-11-10/3586727.jpg\",alt:\"备战春招/秋招系列】美团面经总结基础篇 （附详解答案）\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"系列文章：\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_1-system-out-println-3-9-输出什么？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_1-system-out-println-3-9-输出什么？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 1.  \"),e(\"code\",[this._v(\"System.out.println(3 | 9);\")]),this._v(\"输出什么？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"考察知识点：&和&&；|和||\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"&和&&：\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"|和||：\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"回到本题：\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_2-说一下转发-forward-和重定向-redirect-的区别\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_2-说一下转发-forward-和重定向-redirect-的区别\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 2. 说一下转发(Forward)和重定向(Redirect)的区别\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"转发是服务器行为，重定向是客户端行为。\")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"p\",[s(\"strong\",[t._v(\"转发（Forword）\")]),t._v(\" 通过RequestDispatcher对象的\"),s(\"code\",[t._v(\"forward（HttpServletRequest request,HttpServletResponse response）\")]),t._v(\"方法实现的。\"),s(\"code\",[t._v(\"RequestDispatcher\")]),t._v(\" 可以通过\"),s(\"code\",[t._v(\"HttpServletRequest\")]),t._v(\" 的 \"),s(\"code\",[t._v(\"getRequestDispatcher()\")]),t._v(\"方法获得。例如下面的代码就是跳转到 login_success.jsp 页面。\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[t._v(\"request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getRequestDispatcher\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token string\"}},[t._v('\"login_success.jsp\"')]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"forward\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"request\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\",\")]),t._v(\" response\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"重定向（Redirect）\")]),this._v(\" 是利用服务器返回的状态吗来实现的。客户端浏览器请求服务器的时候，服务器会返回一个状态码。服务器通过HttpServletRequestResponse的setStatus(int status)方法设置状态码。如果服务器返回301或者302，则浏览器会到新的网址重新请求该资源。\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"从地址栏显示来说:\")]),t._v(\" forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址. redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"从数据共享来说:\")]),t._v(\" forward:转发页面和转发到的页面可以共享request里面的数据. redirect:不能共享数据.\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"从运用地方来说:\")]),t._v(\" forward:一般用于用户登陆的时候,根据角色转发到相应的模块. redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"从效率来说:\")]),t._v(\" forward:高. redirect:低.\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_3-在浏览器中输入url地址到显示主页的过程-整个过程会使用哪些协议\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_3-在浏览器中输入url地址到显示主页的过程-整个过程会使用哪些协议\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 3. 在浏览器中输入url地址到显示主页的过程,整个过程会使用哪些协议\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/4/19/162db5e985aabdbe?imageView2/0/w/1280/h/960/format/webp/ignore-error/1\",alt:\"状态码\"}})])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ol\",[s(\"li\",[t._v(\"DNS解析\")]),t._v(\" \"),s(\"li\",[t._v(\"TCP连接\")]),t._v(\" \"),s(\"li\",[t._v(\"发送HTTP请求\")]),t._v(\" \"),s(\"li\",[t._v(\"服务器处理请求并返回HTTP报文\")]),t._v(\" \"),s(\"li\",[t._v(\"浏览器解析渲染页面\")]),t._v(\" \"),s(\"li\",[t._v(\"连接结束\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_4-tcp-三次握手和四次挥手\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_4-tcp-三次握手和四次挥手\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 4. TCP 三次握手和四次挥手\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"漫画图解：\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[this._v(\"图片来源：《图解HTTP》\\n\"),e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/5/8/1633e127396541f1?w=864&h=439&f=png&s=226095\",alt:\"TCP三次握手\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"简单示意图：\")]),this._v(\" \"),e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/5/8/1633e14233d95972?w=542&h=427&f=jpeg&s=15088\",alt:\"TCP三次握手\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"客户端–发送带有 SYN 标志的数据包–一次握手–服务端\")]),this._v(\" \"),e(\"li\",[this._v(\"服务端–发送带有 SYN/ACK 标志的数据包–二次握手–客户端\")]),this._v(\" \"),e(\"li\",[this._v(\"客户端–发送带有带有 ACK 标志的数据包–三次握手–服务端\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"为什么要三次握手\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要三次握手\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 为什么要三次握手\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"三次握手的目的是建立可靠的通信信道，说到通讯，简单来说就是数据的发送与接收，而三次握手最主要的目的就是双方确认自己与对方的发送与接收是正常的。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"为什么要传回-syn\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要传回-syn\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 为什么要传回 SYN\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"blockquote\",[e(\"p\",[this._v(\"SYN 是 TCP/IP 建立连接时使用的握手信号。在客户机和服务器之间建立正常的 TCP 网络连接时，客户机首先发出一个 SYN 消息，服务器使用 SYN-ACK 应答表示接收到了这个消息，最后客户机再以 ACK(Acknowledgement[汉译：确认字符 ,在数据通信传输中，接收站发给发送站的一种传输控制字符。它表示确认发来的数据已经接受无误。 ]）消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"传了-syn-为啥还要传-ack\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#传了-syn-为啥还要传-ack\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 传了 SYN,为啥还要传 ACK\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/5/8/1633e1676e2ac0a3?w=500&h=340&f=jpeg&s=13406\",alt:\"TCP四次挥手\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"客户端-发送一个 FIN，用来关闭客户端到服务器的数据传送\")]),this._v(\" \"),e(\"li\",[this._v(\"服务器-收到这个 FIN，它发回一 个 ACK，确认序号为收到的序号加1 。和 SYN 一样，一个 FIN 将占用一个序号\")]),this._v(\" \"),e(\"li\",[this._v(\"服务器-关闭与客户端的连接，发送一个FIN给客户端\")]),this._v(\" \"),e(\"li\",[this._v(\"客户端-发回 ACK 报文确认，并将确认序号设置为收到序号加1\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"为什么要四次挥手\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#为什么要四次挥手\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 为什么要四次挥手\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_5-ip地址与mac地址的区别\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_5-ip地址与mac地址的区别\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 5. IP地址与MAC地址的区别\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_6-http请求-响应报文格式\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_6-http请求-响应报文格式\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 6. HTTP请求,响应报文格式\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_7-为什么要使用索引？索引这么多优点，为什么不对表中的每一个列创建一个索引呢？索引是如何提高查询速度的？说一下使用索引的注意事项？mysql索引主要使用的两种数据结构？什么是覆盖索引\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_7-为什么要使用索引？索引这么多优点，为什么不对表中的每一个列创建一个索引呢？索引是如何提高查询速度的？说一下使用索引的注意事项？mysql索引主要使用的两种数据结构？什么是覆盖索引\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 7. 为什么要使用索引？索引这么多优点，为什么不对表中的每一个列创建一个索引呢？索引是如何提高查询速度的？说一下使用索引的注意事项？Mysql索引主要使用的两种数据结构？什么是覆盖索引?\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"为什么要使用索引？\")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ol\",[s(\"li\",[t._v(\"通过创建唯一性索引，可以保证数据库表中每一行数据的唯一性。\")]),t._v(\" \"),s(\"li\",[t._v(\"可以大大加快 数据的检索速度（大大减少的检索的数据量）,  这也是创建索引的最主要的原因。\")]),t._v(\" \"),s(\"li\",[t._v(\"帮助服务器避免排序和临时表\")]),t._v(\" \"),s(\"li\",[t._v(\"将随机IO变为顺序IO\")]),t._v(\" \"),s(\"li\",[t._v(\"可以加速表和表之间的连接，特别是在实现数据的参考完整性方面特别有意义。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"索引这么多优点，为什么不对表中的每一个列创建一个索引呢？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ol\",[e(\"li\",[this._v(\"当对表中的数据进行增加、删除和修改的时候，索引也要动态的维护，这样就降低了数据的维护速度。\")]),this._v(\" \"),e(\"li\",[this._v(\"索引需要占物理空间，除了数据表占数据空间之外，每一个索引还要占一定的物理空间，如果要建立聚簇索引，那么需要的空间就会更大。\")]),this._v(\" \"),e(\"li\",[this._v(\"创建索引和维护索引要耗费时间，这种时间随着数据量的增加而增加。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"索引是如何提高查询速度的？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"说一下使用索引的注意事项\")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ol\",[s(\"li\",[t._v(\"避免 where 子句中对字段施加函数，这会造成无法命中索引。\")]),t._v(\" \"),s(\"li\",[t._v(\"在使用InnoDB时使用与业务无关的自增主键作为主键，即使用逻辑主键，而不要使用业务主键。\")]),t._v(\" \"),s(\"li\",[t._v(\"将打算加索引的列设置为 NOT NULL ，否则将导致引擎放弃使用索引而进行全表扫描\")]),t._v(\" \"),s(\"li\",[t._v(\"删除长期未使用的索引，不用的索引的存在会造成不必要的性能损耗 MySQL 5.7 可以通过查询 sys 库的 chema_unused_indexes 视图来查询哪些索引从未被使用\")]),t._v(\" \"),s(\"li\",[t._v(\"在使用 limit offset 查询缓慢时，可以借助索引来提高性能\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"Mysql索引主要使用的哪两种数据结构？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"哈希索引：对于哈希索引来说，底层的数据结构就是哈希表，因此在绝大多数需求为单条记录查询的时候，可以选择哈希索引，查询性能最快；其余大部分场景，建议选择BTree索引。\")]),this._v(\" \"),e(\"li\",[this._v(\"BTree索引：Mysql的BTree索引使用的是B树中的B+Tree。但对于主要的两种存储引擎（MyISAM和InnoDB）的实现方式是不同的。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"什么是覆盖索引?\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_8-进程与线程的区别是什么？进程间的几种通信方式说一下？线程间的几种通信方式知道不？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_8-进程与线程的区别是什么？进程间的几种通信方式说一下？线程间的几种通信方式知道不？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 8.  进程与线程的区别是什么？进程间的几种通信方式说一下？线程间的几种通信方式知道不？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"进程与线程的区别是什么？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"进程间的几种通信方式说一下？\")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ol\",[s(\"li\",[s(\"strong\",[t._v(\"管道（pipe）\")]),t._v(\"：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有血缘关系的进程间使用。进程的血缘关系通常指父子进程关系。管道分为pipe（无名管道）和fifo（命名管道）两种，有名管道也是半双工的通信方式，但是它允许无亲缘关系进程间通信。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"信号量（semophore）\")]),t._v(\"：信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它通常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"消息队列（message queue）\")]),t._v(\"：消息队列是由消息组成的链表，存放在内核中 并由消息队列标识符标识。消息队列克服了信号传递信息少，管道只能承载无格式字节流以及缓冲区大小受限等缺点。消息队列与管道通信相比，其优势是对每个消息指定特定的消息类型，接收的时候不需要按照队列次序，而是可以根据自定义条件接收特定类型的消息。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"信号（signal）\")]),t._v(\"：信号是一种比较复杂的通信方式，用于通知接收进程某一事件已经发生。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"共享内存（shared memory）\")]),t._v(\"：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问，共享内存是最快的IPC方式，它是针对其他进程间的通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号量配合使用，来实现进程间的同步和通信。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"套接字（socket）\")]),t._v(\"：socket，即套接字是一种通信机制，凭借这种机制，客户/服务器（即要进行通信的进程）系统的开发工作既可以在本地单机上进行，也可以跨网络进行。也就是说它可以让不在同一台计算机但通过网络连接计算机上的进程进行通信。也因为这样，套接字明确地将客户端和服务器区分开来。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"线程间的几种通信方式知道不？\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"互斥锁：提供了以排它方式阻止数据结构被并发修改的方法。\")]),this._v(\" \"),e(\"li\",[this._v(\"读写锁：允许多个线程同时读共享数据，而对写操作互斥。\")]),this._v(\" \"),e(\"li\",[this._v(\"条件变量：可以以原子的方式阻塞进程，直到某个特定条件为真为止。对条件测试是在互斥锁的保护下进行的。条件变量始终与互斥锁一起使用。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_9-为什么要用单例模式？手写几种线程安全的单例模式？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_9-为什么要用单例模式？手写几种线程安全的单例模式？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 9. 为什么要用单例模式？手写几种线程安全的单例模式？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"简单来说使用单例模式可以带来下面几个好处:\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"对于频繁使用的对象，可以省略创建对象所花费的时间，这对于那些重量级对象而言，是非常可观的一笔系统开销；\")]),this._v(\" \"),e(\"li\",[this._v(\"由于 new 操作的次数减少，因而对系统内存的使用频率也会降低，这将减轻 GC 压力，缩短 GC 停顿时间。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"懒汉式(双重检查加锁版本)\")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//volatile保证，当uniqueInstance变量被初始化成Singleton实例时，多个线程可以正确处理uniqueInstance变量\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"volatile\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" Singleton uniqueInstance\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"Singleton\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" Singleton \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getInstance\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n       \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//检查实例，如果不存在，就进入同步代码块\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"uniqueInstance \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" null\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//只有第一次才彻底执行这里的代码\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"synchronized\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"Singleton\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n               \"),s(\"span\",{pre:!0,attrs:{class:\"token comment\"}},[t._v(\"//进入同步代码块后，再检查一次，如果仍是null，才创建实例\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"if\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),t._v(\"uniqueInstance \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"==\")]),t._v(\" null\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"\\n                    uniqueInstance \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n                \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n            \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n        \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" uniqueInstance\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"\\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"\\n\")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"静态内部类方式\")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"div\",{staticClass:\"language-java extra-class\"},[s(\"pre\",{pre:!0,attrs:{class:\"language-java\"}},[s(\"code\",[s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"class\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"SingletonHolder\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" Singleton INSTANCE \"),s(\"span\",{pre:!0,attrs:{class:\"token operator\"}},[t._v(\"=\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"new\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token class-name\"}},[t._v(\"Singleton\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"private\")]),t._v(\" Singleton \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"public\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"static\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"final\")]),t._v(\" Singleton \"),s(\"span\",{pre:!0,attrs:{class:\"token function\"}},[t._v(\"getInstance\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"(\")]),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\")\")]),t._v(\" \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"{\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token keyword\"}},[t._v(\"return\")]),t._v(\" SingletonHolder\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\".\")]),t._v(\"INSTANCE\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\";\")]),t._v(\"  \\n    \"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"  \\n\"),s(\"span\",{pre:!0,attrs:{class:\"token punctuation\"}},[t._v(\"}\")]),t._v(\"   \\n\")])])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_10-简单介绍一下bean。知道spring的bean的作用域与生命周期吗？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_10-简单介绍一下bean。知道spring的bean的作用域与生命周期吗？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 10. 简单介绍一下bean。知道Spring的bean的作用域与生命周期吗？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/11/10/166fd45773d5dd2e?w=563&h=299&f=webp&s=27930\",alt:\"pring的bean的作用域\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_11-spring-中的事务传播行为了解吗？transactiondefinition-接口中哪五个表示隔离级别的常量？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_11-spring-中的事务传播行为了解吗？transactiondefinition-接口中哪五个表示隔离级别的常量？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 11. Spring 中的事务传播行为了解吗？TransactionDefinition 接口中哪五个表示隔离级别的常量？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"事务传播行为\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#事务传播行为\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 事务传播行为\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"支持当前事务的情况：\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"TransactionDefinition.PROPAGATION_REQUIRED： 如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。\")]),this._v(\" \"),e(\"li\",[this._v(\"TransactionDefinition.PROPAGATION_SUPPORTS： 如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。\")]),this._v(\" \"),e(\"li\",[this._v(\"TransactionDefinition.PROPAGATION_MANDATORY： 如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。（mandatory：强制性）\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"不支持当前事务的情况：\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"TransactionDefinition.PROPAGATION_REQUIRES_NEW： 创建一个新的事务，如果当前存在事务，则把当前事务挂起。\")]),this._v(\" \"),e(\"li\",[this._v(\"TransactionDefinition.PROPAGATION_NOT_SUPPORTED： 以非事务方式运行，如果当前存在事务，则把当前事务挂起。\")]),this._v(\" \"),e(\"li\",[this._v(\"TransactionDefinition.PROPAGATION_NEVER： 以非事务方式运行，如果当前存在事务，则抛出异常。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"其他情况：\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"ul\",[e(\"li\",[this._v(\"TransactionDefinition.PROPAGATION_NESTED： 如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于TransactionDefinition.PROPAGATION_REQUIRED。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h4\",{attrs:{id:\"隔离级别\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#隔离级别\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 隔离级别\")])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s(\"ul\",[s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_DEFAULT:\")]),t._v(\"  使用后端数据库默认的隔离级别，Mysql 默认采用的 REPEATABLE_READ隔离级别 Oracle 默认采用的 READ_COMMITTED隔离级别.\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_READ_UNCOMMITTED:\")]),t._v(\" 最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读或不可重复读\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_READ_COMMITTED:\")]),t._v(\"   允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读或不可重复读仍有可能发生\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_REPEATABLE_READ:\")]),t._v(\"  对同一字段的多次读取结果都是一致的，除非数据是被本身事务自己所修改，可以阻止脏读和不可重复读，但幻读仍有可能发生。\")]),t._v(\" \"),s(\"li\",[s(\"strong\",[t._v(\"TransactionDefinition.ISOLATION_SERIALIZABLE:\")]),t._v(\"   最高的隔离级别，完全服从ACID的隔离级别。所有的事务依次逐个执行，这样事务之间就完全不可能产生干扰，也就是说，该级别可以防止脏读、不可重复读以及幻读。但是这将严重影响程序的性能。通常情况下也不会用到该级别。\")])])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_12-springmvc-原理了解吗？\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_12-springmvc-原理了解吗？\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 12. SpringMVC 原理了解吗？\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"img\",{attrs:{src:\"https://user-gold-cdn.xitu.io/2018/11/10/166fd45787394192?w=1015&h=466&f=webp&s=35352\",alt:\"SpringMVC 原理\"}})])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"h3\",{attrs:{id:\"_13-spring-aop-ioc-实现原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#_13-spring-aop-ioc-实现原理\",\"aria-hidden\":\"true\"}},[this._v(\"#\")]),this._v(\" 13. Spring AOP IOC 实现原理\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"IOC:\")]),this._v(\" 控制反转也叫依赖注入。IOC利用java反射机制，AOP利用代理模式。IOC 概念看似很抽象，但是很容易理解。说简单点就是将对象交给容器管理，你只需要在spring配置文件中配置对应的bean以及设置相关的属性，让spring容器来生成类的实例对象以及管理对象。在spring容器启动的时候，spring会把你在配置文件中配置的bean都初始化好，然后在你需要调用的时候，就把它已经初始化好的那些bean分配给你需要调用这些bean的类。\")])},function(){var t=this.$createElement,e=this._self._c||t;return e(\"p\",[e(\"strong\",[this._v(\"AOP：\")]),this._v(\" 面向切面编程。（Aspect-Oriented Programming） 。AOP可以说是对OOP的补充和完善。OOP引入封装、继承和多态性等概念来建立一种对象层次结构，用以模拟公共行为的一个集合。实现AOP的技术，主要分为两大类：一是采用动态代理技术，利用截取消息的方式，对该消息进行装饰，以取代原有对象行为的执行；二是采用静态织入的方式，引入特定的语法创建“方面”，从而使得编译器可以在编译期间织入有关“方面”的代码，属于静态代理。\")])}],!1,null,null,null);r.options.__file=\"美团-基础篇.md\";e.default=r.exports}}]);","extractedComments":[]}