(window.webpackJsonp=window.webpackJsonp||[]).push([[50],{229:function(r,t,e){"use strict";e.r(t);var n=e(0),a=Object(n.a)({},function(){var r=this,t=r.$createElement,e=r._self._c||t;return e("div",{staticClass:"content"},[r._m(0),r._v(" "),r._m(1),r._v(" "),e("p",[e("a",{attrs:{href:"https://spring.io/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring官网"),e("OutboundLink")],1)]),r._v(" "),e("p",[e("a",{attrs:{href:"https://spring.io/projects",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring系列主要项目"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("从配置到安全性，Web应用到大数据 - 无论您的应用程序的基础架构需求如何，都有一个Spring Project来帮助您构建它。 从小处着手，根据需要使用 - Spring是通过设计模块化的。")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://spring.io/guides",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring官网指南"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("无论您在构建什么，这些指南都旨在尽可能快地提高您的工作效率 - 使用Spring团队推荐的最新Spring项目发布和技术。")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/tangtong1/article/details/51326887",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring官方文档翻译（1~6章）"),e("OutboundLink")],1)]),r._v(" "),r._m(2),r._v(" "),r._m(3),r._v(" "),e("p",[e("a",{attrs:{href:"http://wiki.jikexueyuan.com/project/spring/transaction-management.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("极客学院Spring Wiki"),e("OutboundLink")],1)]),r._v(" "),e("p",[e("a",{attrs:{href:"https://www.w3cschool.cn/wkspring/f6pk1ic8.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring W3Cschool教程 "),e("OutboundLink")],1)]),r._v(" "),r._m(4),r._v(" "),e("p",[e("a",{attrs:{href:"http://study.163.com/course/courseMain.htm?courseId=1004475015#/courseDetail?tab=1&35",target:"_blank",rel:"noopener noreferrer"}},[r._v("网易云课堂——58集精通java教程Spring框架开发"),e("OutboundLink")],1)]),r._v(" "),e("p",[e("a",{attrs:{href:"https://www.imooc.com/",target:"_blank",rel:"noopener noreferrer"}},[r._v("慕课网相关视频"),e("OutboundLink")],1)]),r._v(" "),r._m(5),r._v(" "),r._m(6),r._v(" "),e("p",[e("a",{attrs:{href:"https://docs.spring.io/spring/docs/4.3.17.RELEASE/javadoc-api/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring Framework 4.3.17.RELEASE API"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("默认浏览器打开，当需要查某个类的作用的时候，可以在浏览器通过ctrl+f搜索。")]),r._v(" "),r._m(7),r._v(" "),r._m(8),r._v(" "),e("p",[r._v("AOP实现原理、动态代理和静态代理、Spring IOC的初始化过程、IOC原理、自己实现怎么实现一个IOC容器？这些东西都是经常会被问到的。")]),r._v(" "),e("p",[e("a",{attrs:{href:"http://www.coolblog.xyz/2018/01/18/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E7%9A%84-Spring-IOC-%E5%92%8C-AOP-%E4%B8%8A%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"}},[r._v("自己动手实现的 Spring IOC 和 AOP - 上篇"),e("OutboundLink")],1)]),r._v(" "),e("p",[e("a",{attrs:{href:"http://www.coolblog.xyz/2018/01/18/%E8%87%AA%E5%B7%B1%E5%8A%A8%E6%89%8B%E5%AE%9E%E7%8E%B0%E7%9A%84-Spring-IOC-%E5%92%8C-AOP-%E4%B8%8B%E7%AF%87/",target:"_blank",rel:"noopener noreferrer"}},[r._v("自己动手实现的 Spring IOC 和 AOP - 下篇"),e("OutboundLink")],1)]),r._v(" "),r._m(9),r._v(" "),r._m(10),r._v(" "),r._m(11),r._v(" "),e("p",[e("a",{attrs:{href:"http://www.cnblogs.com/puyangsky/p/6218925.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("※静态代理、JDK动态代理、CGLIB动态代理讲解"),e("OutboundLink")],1)]),r._v(" "),r._m(12),r._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/5aa7818af265da23844040c6",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring AOP 入门"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("带你入门的一篇文章。这篇文章主要介绍了AOP中的基本概念：5种类型的通知（Before，After，After-returning，After-throwing，Around）；Spring中对AOP的支持：AOP思想的实现一般都是基于代理模式，在JAVA中一般采用JDK动态代理模式，Spring AOP 同时支持 CGLIB、ASPECTJ、JDK动态代理，")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/5a55af9e518825734d14813f",target:"_blank",rel:"noopener noreferrer"}},[r._v("※Spring AOP 基于AspectJ注解如何实现AOP"),e("OutboundLink")],1)]),r._v(" "),r._m(13),r._v(" "),e("p",[r._v("Spring注意到AspectJ在AOP的实现方式上依赖于特殊编译器(ajc编译器)，因此Spring很机智回避了这点，转向采用动态代理技术的实现原理来构建Spring AOP的内部机制（动态织入），这是与AspectJ（静态织入）最根本的区别。")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://www.imooc.com/learn/869",target:"_blank",rel:"noopener noreferrer"}},[r._v("※探秘Spring AOP（慕课网视频，很不错）"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("慕课网视频，讲解的很不错，详细且深入")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://blog.csdn.net/fighterandknight/article/details/51209822",target:"_blank",rel:"noopener noreferrer"}},[r._v("spring源码剖析（六）AOP实现原理剖析"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("通过源码分析Spring AOP的原理")]),r._v(" "),r._m(14),r._v(" "),r._m(15),r._v(" "),e("p",[e("a",{attrs:{href:"https://www.cnblogs.com/wang-meng/p/5597490.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("[Spring框架]Spring IOC的原理及详解。"),e("OutboundLink")],1)]),r._v(" "),e("p",[e("a",{attrs:{href:"https://yikun.github.io/2015/05/29/Spring-IOC%E6%A0%B8%E5%BF%83%E6%BA%90%E7%A0%81%E5%AD%A6%E4%B9%A0/",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring IOC核心源码学习"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("比较简短，推荐阅读。")]),r._v(" "),e("p",[e("a",{attrs:{href:"https://javadoop.com/post/spring-ioc",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring IOC 容器源码分析"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("强烈推荐，内容详尽，而且便于阅读。")]),r._v(" "),r._m(16),r._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/5b00c52ef265da0b95276091",target:"_blank",rel:"noopener noreferrer"}},[r._v("可能是最漂亮的Spring事务管理详解"),e("OutboundLink")],1)]),r._v(" "),e("p",[e("a",{attrs:{href:"https://juejin.im/post/5b010f27518825426539ba38",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring编程式和声明式事务实例讲解"),e("OutboundLink")],1)]),r._v(" "),r._m(17),r._v(" "),r._m(18),r._v(" "),e("p",[e("a",{attrs:{href:"http://www.cnblogs.com/chengxuyuanzhilu/p/6404991.html",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring框架中的单例模式（源码解读）"),e("OutboundLink")],1)]),r._v(" "),e("p",[r._v("单例模式是一种常用的软件设计模式。通过单例模式可以保证系统中一个类只有一个实例。spring依赖注入时，使用了 多重判断加锁 的单例模式。")]),r._v(" "),r._m(19),r._v(" "),e("p",[r._v("阅读源码不仅可以加深我们对Spring设计思想的理解，提高自己的编码水品，还可以让自己字面试中如鱼得水。下面的是Github上的一个开源的Spring源码阅读，大家有时间可以看一下，当然你如果有时间也可以自己慢慢研究源码。")]),r._v(" "),e("h3",{attrs:{id:"spring源码阅读-2"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#spring源码阅读-2","aria-hidden":"true"}},[r._v("#")]),r._v(" "),e("a",{attrs:{href:"https://github.com/seaswalker/Spring",target:"_blank",rel:"noopener noreferrer"}},[r._v("Spring源码阅读"),e("OutboundLink")],1)]),r._v(" "),e("ul",[e("li",[e("a",{attrs:{href:"https://github.com/seaswalker/Spring/blob/master/note/Spring.md",target:"_blank",rel:"noopener noreferrer"}},[r._v("spring-core"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/seaswalker/Spring/blob/master/note/spring-aop.md",target:"_blank",rel:"noopener noreferrer"}},[r._v("spring-aop"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/seaswalker/Spring/blob/master/note/spring-context.md",target:"_blank",rel:"noopener noreferrer"}},[r._v("spring-context"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/seaswalker/Spring/blob/master/note/spring-task.md",target:"_blank",rel:"noopener noreferrer"}},[r._v("spring-task"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/seaswalker/Spring/blob/master/note/spring-transaction.md",target:"_blank",rel:"noopener noreferrer"}},[r._v("spring-transaction"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/seaswalker/Spring/blob/master/note/spring-mvc.md",target:"_blank",rel:"noopener noreferrer"}},[r._v("spring-mvc"),e("OutboundLink")],1)]),r._v(" "),e("li",[e("a",{attrs:{href:"https://github.com/seaswalker/Spring/blob/master/note/guava-cache.md",target:"_blank",rel:"noopener noreferrer"}},[r._v("guava-cache"),e("OutboundLink")],1)])])])},[function(){var r=this.$createElement,t=this._self._c||r;return t("h1",{attrs:{id:"spring相关教程-资料："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring相关教程-资料：","aria-hidden":"true"}},[this._v("#")]),this._v(" Spring相关教程/资料：")])},function(){var r=this.$createElement,t=this._self._c||r;return t("blockquote",[t("h2",{attrs:{id:"官网相关"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#官网相关","aria-hidden":"true"}},[this._v("#")]),this._v(" 官网相关")])])},function(){var r=this.$createElement,t=this._self._c||r;return t("blockquote",[t("h2",{attrs:{id:"系统学习教程："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#系统学习教程：","aria-hidden":"true"}},[this._v("#")]),this._v(" 系统学习教程：")])])},function(){var r=this.$createElement,t=this._self._c||r;return t("h3",{attrs:{id:"文档："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文档：","aria-hidden":"true"}},[this._v("#")]),this._v(" 文档：")])},function(){var r=this.$createElement,t=this._self._c||r;return t("h3",{attrs:{id:"视频："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#视频：","aria-hidden":"true"}},[this._v("#")]),this._v(" 视频：")])},function(){var r=this.$createElement,t=this._self._c||r;return t("p",[t("strong",[this._v("黑马视频（非常推荐）：")]),this._v("\n微信公众号：“"),t("strong",[this._v("Java面试通关手册")]),this._v("”后台回复“"),t("strong",[this._v("资源分享第一波")]),this._v("”免费领取。")])},function(){var r=this.$createElement,t=this._self._c||r;return t("blockquote",[t("h2",{attrs:{id:"一些常用的东西"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一些常用的东西","aria-hidden":"true"}},[this._v("#")]),this._v(" 一些常用的东西")])])},function(){var r=this.$createElement,t=this._self._c||r;return t("h1",{attrs:{id:"面试必备知识点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#面试必备知识点","aria-hidden":"true"}},[this._v("#")]),this._v(" 面试必备知识点")])},function(){var r=this.$createElement,t=this._self._c||r;return t("blockquote",[t("h2",{attrs:{id:"springaop-ioc实现原理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springaop-ioc实现原理","aria-hidden":"true"}},[this._v("#")]),this._v(" SpringAOP,IOC实现原理")])])},function(){var r=this.$createElement,t=this._self._c||r;return t("h3",{attrs:{id:"aop："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#aop：","aria-hidden":"true"}},[this._v("#")]),this._v(" AOP：")])},function(){var r=this.$createElement,t=this._self._c||r;return t("p",[this._v("AOP思想的实现一般都是基于 "),t("strong",[this._v("代理模式")]),this._v(" ，在JAVA中一般采用JDK动态代理模式，但是我们都知道，"),t("strong",[this._v("JDK动态代理模式只能代理接口而不能代理类")]),this._v("。因此，Spring AOP 会这样子来进行切换，因为Spring AOP 同时支持 CGLIB、ASPECTJ、JDK动态代理。")])},function(){var r=this.$createElement,t=this._self._c||r;return t("ul",[t("li",[this._v("如果目标对象的实现类实现了接口，Spring AOP 将会采用 JDK 动态代理来生成 AOP 代理类；")]),this._v(" "),t("li",[this._v("如果目标对象的实现类没有实现接口，Spring AOP 将会采用 CGLIB 来生成 AOP 代理类——不过这个选择过程对开发者完全透明、开发者也无需关心。")])])},function(){var r=this.$createElement,t=this._self._c||r;return t("p",[this._v("我们知道AOP思想的实现一般都是基于 "),t("strong",[this._v("代理模式")]),this._v(" ，所以在看下面的文章之前建议先了解一下静态代理以及JDK动态代理、CGLIB动态代理的实现方式。")])},function(){var r=this.$createElement,t=this._self._c||r;return t("p",[t("strong",[this._v("AspectJ是一个AOP框架，它能够对java代码进行AOP编译（一般在编译期进行），让java代码具有AspectJ的AOP功能（当然需要特殊的编译器）")]),this._v("，可以这样说AspectJ是目前实现AOP框架中最成熟，功能最丰富的语言，更幸运的是，AspectJ与java程序完全兼容，几乎是无缝关联，因此对于有java编程基础的工程师，上手和使用都非常容易")])},function(){var r=this.$createElement,t=this._self._c||r;return t("h3",{attrs:{id:"ioc："}},[t("a",{staticClass:"header-anchor",attrs:{href:"#ioc：","aria-hidden":"true"}},[this._v("#")]),this._v(" IOC：")])},function(){var r=this.$createElement,t=this._self._c||r;return t("p",[this._v("Spring IOC的初始化过程：\n"),t("img",{attrs:{src:"https://user-gold-cdn.xitu.io/2018/5/22/16387903ee72c831?w=709&h=56&f=png&s=4673",alt:"Spring IOC的初始化过程"}})])},function(){var r=this.$createElement,t=this._self._c||r;return t("blockquote",[t("h2",{attrs:{id:"spring事务管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring事务管理","aria-hidden":"true"}},[this._v("#")]),this._v(" Spring事务管理")])])},function(){var r=this.$createElement,t=this._self._c||r;return t("blockquote",[t("h2",{attrs:{id:"其他"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#其他","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他")])])},function(){var r=this.$createElement,t=this._self._c||r;return t("p",[t("strong",[this._v("Spring单例与线程安全：")])])},function(){var r=this.$createElement,t=this._self._c||r;return t("blockquote",[t("h2",{attrs:{id:"spring源码阅读"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#spring源码阅读","aria-hidden":"true"}},[this._v("#")]),this._v(" Spring源码阅读")])])}],!1,null,null,null);t.default=a.exports}}]);